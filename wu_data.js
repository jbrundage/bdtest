window.g_data = {"W20190924-161621":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\ntheft_records := all_records(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)' OR RUBRICA = 'A.I.-ESTUPRO DE VULNERAVEL (ART.217-A)');\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\ntheft_hour_interval := SORT(PROJECT(theft_records(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim),colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nHOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nTHEFT_HOUR_CRIME := RECORD\r\n\ttheft_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,HOUR_CRIME,HORA_OCORRENCIA_BO);\r\ntheft_hour_hotspot :=  TABLE(theft_hour_interval,THEFT_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\nOUTPUT(theft_hour_hotspot);\r\n\r\n","W20190924-160902-3":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~asdf::test::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190924-160431":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\ntheft_records := all_records(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)' OR RUBRICA = 'A.I.-ESTUPRO DE VULNERAVEL (ART.217-A)');\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\ntheft_hour_interval := SORT(PROJECT(theft_records,colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nHOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nTHEFT_HOUR_CRIME := RECORD\r\n\ttheft_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,HOUR_CRIME,HORA_OCORRENCIA_BO);\r\ntheft_hour_hotspot :=  TABLE(theft_hour_interval,THEFT_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\nOUTPUT(theft_hour_hotspot);\r\n\r\n","W20190924-135513":"OUTPUT('Hello World');\n\n<label> := <activity>;","W20190924-135442":"OUTPUT('Hello World');","W20190924-131122":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190924-082456":"MyRec := RECORD\n\tINTEGER2 Value1;\n\tINTEGER2 Value2;\nEND;\n\nSomeFile := DATASET([{10,0},\n\t\t\t\t\t {20,0},\n\t\t\t\t\t {30,0},\n\t\t\t\t\t {40,0},\n\t\t\t\t\t {50,0}],MyRec);\n\nMyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value2 := L.Value2 + R.Value1;\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n\n/* Processes as:\n\tLEFT.Value2   RIGHT.Value1\n\t\t0 (0)\t\t\t1 (10)\t\t- 0 + 10 = 10\n\t\t1 (10)\t\t\t2 (20)\t\t- 10 + 20 = 30\n\t\t2 (30)\t\t\t3 (30)\t\t- 30 + 30 = 60\n\t\t3 (60)\t\t\t4 (40)\t\t- 60 + 40 = 100\n\t\t4 (100)\t\t\t5 (50)\t\t- 100 + 50 = 150\n\nAddedRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\t10\t\t10\n\t2\t\t20\t\t30\t\n\t3\t\t30\t\t60\n\t4\t\t40\t\t100\n\t5\t\t50\t\t150\n*/","W20190923-201741":"\nIMPORT STD.DataPatterns;\n\nfilePath := '~stock_data::full_data';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), flat);\nprofileResults := DataPatterns.Profile(ds);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));\n    ","W20190923-201339":"\nIMPORT STD.DataPatterns;\n\nfilePath := '~hthor::erm::crimes_sp::clean::bo_20132';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), flat);\nprofileResults := DataPatterns.Profile(ds);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));\n    ","W20191015-014811":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n  string25 JourneyID;\n  string3 PulseID;\t\n  string3 SysClientSrcRID;\t\n  real8 DateTimeInterval;\n  real8 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142,\t10.242931268457},\n{'10087815996',\t'2',\t'2',\t928143,\t10.242931268457},\n{'10087815996',\t'3',\t'2',\t929142,\t12.0324807286718},\n{'10087815996',\t'4',\t'2',\t930142,\t13.3947743238029},\n{'10087815996',\t'5',\t'2',\t931142,\t13.3947743238029},\n{'10087815996',\t'6',\t'2',\t932142,\t13.6050460287154},\n{'10087815996',\t'7',\t'2',\t933142,\t13.6050460287154},\n{'10087815996',\t'8',\t'2',\t934142,\t13.6363640673577},\n{'10087815996',\t'9',\t'2',\t935142,\t13.6363640673577},\n{'10087815996',\t'10',\t'2',\t936142,\t12.8646204496317},\n{'10087815996',\t'11',\t'2',\t937142,\t12.8646204496317},\n{'10087815996',\t'12',\t'2',\t938142,\t12.356836448394},\n{'10087815996',\t'13',\t'2',\t939142,\t7.69058688861589},\n{'10087815996',\t'14',\t'2',\t940142,\t7.69058688861589},\n{'10087815996',\t'15',\t'2',\t941142,\t5.10021467906484},\n{'10087815996',\t'16',\t'2',\t942142,\t5.04205428628105},\n{'10087815996',\t'17',\t'2',\t943145,\t4.64164291161294},\n{'10087815998',\t'1',\t'2',\t944142,\t6.55422348309073},\n{'10087815998',\t'2',\t'2',\t945142,\t6.55422348309073},\n{'10087815998',\t'3',\t'2',\t946142,\t9.41750187095558},\n{'10087815998',\t'4',\t'2',\t947141,\t9.82909818209042},\n{'10087815998',\t'5',\t'2',\t948142,\t15.4124907466185},\n{'10087815998',\t'6',\t'2',\t949142,\t15.712240885194},\n{'10087815998',\t'7',\t'2',\t950142,\t15.712240885194},\n{'10087815998',\t'8',\t'2',\t951142,\t16.7926806686933},\n{'10087815998',\t'9',\t'2',\t952142,\t17.0767712555569},\n{'10087815998',\t'10',\t'2',\t953141,\t17.1975666586067},\n{'10087815998',\t'11',\t'2',\t954147,\t17.1975666586067},\n{'10087815998',\t'12',\t'2',\t955142,\t17.1975666586067},\n{'10087815998',\t'13',\t'2',\t956141,\t17.0163740853044},\n{'10087815998',\t'14',\t'2',\t957142,\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\nZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\nEND;\n  \n    // project input into iterate layout\n    GPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n\n\n    // step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n   //this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n    //step 1 is also used to calculate the next 10 record acceleration variance.\n\n    ZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n        SameTrip := L.JourneyID = R.JourneyID;\n    \n        // calculate the acceleration\n        AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n    \n        // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n        SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n        // stair step the next 10 acceleration values to a single record\n        SELF.AccelN01 := SELF.AccelN;\n        SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n        SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n        SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n        SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n        SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n        SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n        SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n        SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n        SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n        //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n        SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n        RecCount := MIN(SELF.RecCounter, 10);    \n    \n        // calculate the average\n        SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                     SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n        AvgNext10 := SumAccelN / RecCount;\n        SELF.AvgNext10 := AvgNext10;\n    \n        // calculate the variance\n        SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                         IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                         IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                         IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                         IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                         IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                         IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                         IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                         IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                         IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n    \n        SELF.VarNext10 := SumDiffSquare / RecCount;\n        SELF := R;\n    END;\n    GPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\n    GPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\noutput(GPSFZ_Next);","W20191015-025727":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n    string25 JourneyID;\n    string3 PulseID;\t\n    string3 SysClientSrcRID;\t\n    real8 DateTimeInterval;\n    real8 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142,\t10.242931268457},\n\t\t\t\t{'10087815996',\t'2',\t'2',\t928143,\t10.242931268457},\n\t\t\t\t{'10087815996',\t'3',\t'2',\t929142,\t12.0324807286718},\n\t\t\t\t{'10087815996',\t'4',\t'2',\t930142,\t13.3947743238029},\n\t\t\t\t{'10087815996',\t'5',\t'2',\t931142,\t13.3947743238029},\n\t\t\t\t{'10087815996',\t'6',\t'2',\t932142,\t-13.6050460287154},\n\t\t\t\t{'10087815996',\t'7',\t'2',\t933142,\t-13.6050460287154},\n\t\t\t\t{'10087815996',\t'8',\t'2',\t934142,\t-13.6363640673577},\n\t\t\t\t{'10087815996',\t'9',\t'2',\t935142,\t-13.6363640673577},\n\t\t\t\t{'10087815996',\t'10',\t'2',\t936142,\t12.8646204496317},\n\t\t\t\t{'10087815996',\t'11',\t'2',\t937142,\t12.8646204496317},\n\t\t\t\t{'10087815996',\t'12',\t'2',\t938142,\t12.356836448394},\n\t\t\t\t{'10087815996',\t'13',\t'2',\t939142,\t7.69058688861589},\n\t\t\t\t{'10087815996',\t'14',\t'2',\t940142,\t7.69058688861589},\n\t\t\t\t{'10087815996',\t'15',\t'2',\t941142,\t5.10021467906484},\n\t\t\t\t{'10087815996',\t'16',\t'2',\t942142,\t5.04205428628105},\n\t\t\t\t{'10087815996',\t'17',\t'2',\t943145,\t4.64164291161294},\n\t\t\t\t{'10087815998',\t'1',\t'2',\t944142,\t6.55422348309073},\n\t\t\t\t{'10087815998',\t'2',\t'2',\t945142,\t6.55422348309073},\n\t\t\t\t{'10087815998',\t'3',\t'2',\t946142,\t9.41750187095558},\n\t\t\t\t{'10087815998',\t'4',\t'2',\t947141,\t9.82909818209042},\n\t\t\t\t{'10087815998',\t'5',\t'2',\t948142,\t15.4124907466185},\n\t\t\t\t{'10087815998',\t'6',\t'2',\t949142,\t15.712240885194},\n\t\t\t\t{'10087815998',\t'7',\t'2',\t950142,\t15.712240885194},\n\t\t\t\t{'10087815998',\t'8',\t'2',\t951142,\t16.7926806686933},\n\t\t\t\t{'10087815998',\t'9',\t'2',\t952142,\t17.0767712555569},\n\t\t\t\t{'10087815998',\t'10',\t'2',\t953141,\t17.1975666586067},\n\t\t\t\t{'10087815998',\t'11',\t'2',\t954147,\t17.1975666586067},\n\t\t\t\t{'10087815998',\t'12',\t'2',\t955142,\t17.1975666586067},\n\t\t\t\t{'10087815998',\t'13',\t'2',\t956141,\t17.0163740853044},\n\t\t\t\t{'10087815998',\t'14',\t'2',\t957142,\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\nZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\nEND;\n  \n\n// project input into iterate layout\nGPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n\n\n// step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n// this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n// step 1 is also used to calculate the next 10 record acceleration variance.\n\nZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n    SameTrip := L.JourneyID = R.JourneyID;\n\n    // calculate the acceleration\n    AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n\n    // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n    SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n    // stair step the next 10 acceleration values to a single record\n    SELF.AccelN01 := SELF.AccelN;\n    SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n    SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n    SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n    SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n    SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n    SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n    SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n    SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n    SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n    //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n    SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n    RecCount := MIN(SELF.RecCounter, 10);    \n\n    // calculate the average\n    SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                 SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n    AvgNext10 := SumAccelN / RecCount;\n    SELF.AvgNext10 := AvgNext10;\n\n    // calculate the variance\n    SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                     IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                     IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                     IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                     IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                     IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                     IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                     IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                     IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                     IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n\n    SELF.VarNext10 := SumDiffSquare / RecCount;\n    SELF := R;\nEND;\n                       \nGPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\nGPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\noutput(GPSFZ_Next);","W20190911-205901":"IMPORT $;\r\n\r\n//modularize this information\r\nfemale_gender\t\t:=\t['F'];\r\nmale_gender\t\t\t:=\t['M'];\r\nundefined_gender\t:=\t['I'];\r\nother_gender\t\t:=\t['','1']; //Those genger isn't specified in the database\r\n//=============================\r\ncrime_author := ['INDICIADO', 'AUTOR'];\r\n\r\ncrimes := $.clean_bo.File(DESCR_TIPO_PESSOA IN crime_author);\r\ntotal_authors\t\t:=\tCOUNT(crimes);\r\ntotala_female\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN female_gender));\r\ntotala_male\t\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN male_gender ));\r\ntotala_undefined\t:=\tCOUNT(crimes(SEXO_PESSOA IN undefined_gender));\r\ntotala_other\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN other_gender));\r\n\r\nOUTPUT(total_authors);\r\nOUTPUT(totala_female);\r\nOUTPUT(totala_male);\r\nOUTPUT(totala_undefined);\r\nOUTPUT(totala_other);\r\n\r\n// total_victims\t4956846\t\r\n// female\t\t\t2036887\t\r\n// male\t\t\t\t2876019\t\r\n// undefined\t\t43663\t\r\n// other\t\t\t277\r\n","W20190911-205741":"IMPORT Visualizer;\n\nds := DATASET([ {'English', 5},\n                {'History', 17},\n                {'Geography', 7},\n                {'Chemistry', 16},\n                {'Irish', 26},\n                {'Spanish', 67},\n                {'Bioligy', 66},\n                {'Physics', 46},\n                {'Math', 98}],\n                {STRING subject, INTEGER4 year});\n\nOUTPUT(ds, NAMED('chartData'));\n\nVisualizer.TwoD.pie('myChart',, 'chartData');","W20190911-203947":"IMPORT $;\r\n\r\n//modularize this information\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n//=============================\r\ncrime_author := ['INDICIADO', 'AUTOR'];\r\n\r\ncrimes := $.clean_bo.File(DESCR_TIPO_PESSOA IN crime_author);\r\ntotal_records := COUNT(crimes);\r\n\r\ntotal_records_pardo\t\t:=\tCOUNT(crimes(COR IN race_pardo));\r\ntotal_records_branco\t:=\tCOUNT(crimes(COR IN race_branco));\r\ntotal_records_negro\t\t:=\tCOUNT(crimes(COR IN race_negro));\r\ntotal_records_vermelho\t:=\tCOUNT(crimes(COR IN race_vermelha));\r\ntotal_records_amarelo\t:=\tCOUNT(crimes(COR IN race_amarelo));\r\ntotal_records_other\t\t:=\tCOUNT(crimes(COR IN race_other));\r\n\r\nOUTPUT(total_records,\t\t\tNAMED('REGISTER_NUMBER'));\r\nOUTPUT(total_records_pardo,\t\tNAMED('TOTALA_PARDO'));\r\nOUTPUT(total_records_branco,\tNAMED('TOTALA_BRANCO'));\r\nOUTPUT(total_records_negro,\t\tNAMED('TOTALA_NEGRO'));\r\nOUTPUT(total_records_vermelho,\tNAMED('TOTALA_VERMELHO'));\r\nOUTPUT(total_records_amarelo,\tNAMED('TOTALA_AMARELO'));\r\nOUTPUT(total_records_other,\t\tNAMED('TOTALA_OTHER'));\r\n","W20190911-202021":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190911-201722":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n ","W20190911-201700":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-195147":"IMPORT $;\r\n\r\ncrimes := SORT($.clean_bo.File(DESCR_TIPO_PESSOA = 'VA­TIMA'), IDADE_PESSOA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190911-193630":"IMPORT $;\r\n\r\ncrimes := SORT($.clean_bo.File(DESCR_TIPO_PESSOA = 'VA­TIMA'), IDADE_PESSOA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0)));\r\nage_info := TABLE(crimes(IDADE_PESSOA >= 0), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190911-192812":"IMPORT $;\r\n\r\ncrimes := SORT($.clean_bo.File, IDADE_PESSOA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nage_info := TABLE(crimes(DESCR_TIPO_PESSOA = 'VA­TIMA'), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190911-181245":"IMPORT $;\r\n\r\nfemale_gender\t\t:=\t['F'];\r\nmale_gender\t\t\t:=\t['M'];\r\nundefined_gender\t:=\t['I'];\r\nother_gender\t\t:=\t['','1']; //Those genger isn't specified in the database\r\n\r\ncrimes := $.clean_bo.File;\r\ntotal_victims\t:= COUNT(crimes(crimes.DESCR_TIPO_PESSOA='VA­TIMA'));\r\ntotalV_female := COUNT(crimes(SEXO_PESSOA IN female_gender AND crimes.DESCR_TIPO_PESSOA='VA­TIMA'));\r\ntotalV_male := COUNT(crimes(SEXO_PESSOA IN male_gender AND crimes.DESCR_TIPO_PESSOA='VA­TIMA'));\r\ntotalV_undefined := COUNT(crimes(SEXO_PESSOA IN undefined_gender AND crimes.DESCR_TIPO_PESSOA='VA­TIMA'));\r\ntotalV_other := COUNT(crimes(SEXO_PESSOA IN other_gender AND crimes.DESCR_TIPO_PESSOA='VA­TIMA'));\r\n\r\nOUTPUT(total_victims);\r\nOUTPUT(totalV_female);\r\nOUTPUT(totalV_male);\r\nOUTPUT(totalV_undefined);\r\nOUTPUT(totalV_other);","W20190911-180855":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-175446":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-175440":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet)\n","W20190911-175424":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-174906":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-174708":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw; \n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-174847":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-174606":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw; \n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-174540":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-174601":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-174344":"IMPORT $;\r\n\r\nOUTPUT(DEDUP(SORT($.clean_bo.File,SEXO_PESSOA),SEXO_PESSOA));","W20190911-174111":"IMPORT $;\r\n\r\nOUTPUT(DEDUP($.clean_bo.File,SEXO_PESSOA));","W20190911-173955":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-173155":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-172931":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-172849":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-173142":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~arjunachala::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~arjunachala::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-172730":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-172626":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-172513":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-171846":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);","W20190911-171736":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);","W20190911-171533":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);","W20190911-171854":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);","W20190911-171428":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-171014":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-160321":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190911-164837":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20},\n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190911-161421":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-160246":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement; \nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190911-160138":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement; \nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190911-155850":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 OR date > 20140501 );\nOUTPUT(validSet);\n","W20190911-160234":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-160037":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-155821":"IMPORT STD;\n\nIMPORT DataPatterns; \nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190911-155803":"IMPORT STD;\n\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190911-155734":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-155603":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-155704":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190911-152515":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-152413":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190911-050436":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004523":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{10, 'mateus', '1'},\n\t\t\t\t\t {2, 'joao', '2'}],MyRec);\n\nset1 := 'id';\nset2 := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND('set'+var);\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck(SomeFile(name='mateus')[1].original);\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004501":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{10, 'mateus', '1'},\n\t\t\t\t\t {2, 'joao', '2'}],MyRec);\n\nset1 := 'id';\nset2 := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND('set'+var);\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck(SomeFile(name='mateus').original);\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004322":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{10, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetMateus := 'id';\nsetJoao := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND('set'+var);\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck('mateus');\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004411":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{10, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nset1 := 'id';\nset2 := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND('set'+var);\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck('1');\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004253":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{10, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetMateus := 'id';\nsetJoao := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND(#EXPAND('set'+var));\n  \n  return SORT(SomeFile, field);\nENDMACRO;\n\nsomePeople := macCheck('mateus');\n\n//  Outputs  ---\nsomePeople;\n","W20190911-003140":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetField := ['id','original'];\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := setField[somefile(name='mateus')[1].id];\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004204":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetMateus := 'id';\nsetJoao := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND('set'+var);\n  \n  return SORT(SomeFile, field);\nENDMACRO;\n\nsomePeople := macCheck('mateus');\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004218":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{10, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetMateus := 'id';\nsetJoao := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND('set'+var);\n  \n  return SORT(SomeFile, field);\nENDMACRO;\n\nsomePeople := macCheck('mateus');\n\n//  Outputs  ---\nsomePeople;\n","W20190911-003210":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetField := ['id','original'];\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := setField[var];\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck(somefile(name='mateus')[1].id);\n\n//  Outputs  ---\nsomePeople;\n","W20190911-003219":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetField := ['id','original'];\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := setField[var];\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck(1);\n\n//  Outputs  ---\nsomePeople;\n","W20190911-004144":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetMateus := 'id';\nsetJoao := 'original';\n\n\n\n\nmacCheck(var) := FUNCTIONMACRO\n  field := #EXPAND('set'+var);\n  \n  return SORT(SomeFile, field);\nENDMACRO;\n\nsomePeople := macCheck(somefile(name='mateus')[1].id);\n\n//  Outputs  ---\nsomePeople;\n","W20190911-003103":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetField := ['id','original'];\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := setField[1];\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-003053":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1, 'mateus', 'id'},\n\t\t\t\t\t {2, 'joao', 'original'}],MyRec);\n\nsetField := ['id','original'];\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := setField[somefile(name='mateus').id];\n  \n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001735":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\nsetField := ['id','id'];\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := somefile[1].original;\n  scmd := 'SORT(SomeFile, #EXPAND(field))';\n  return #EXPAND(scmd);\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001712":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\nsetField := ['id','id'];\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := somefile[1].original;\n  scmd := 'SORT(SomeFile, #EXPAND(field))'\n  return #EXPAND(scmd);\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001551":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\nsetField := SET(SomeFile,original);\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := setField[1];\n\n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001515":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\nsetField := ['id','id'];\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := setField[1];\n\n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001444":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := somefile[1].original;\n\n  return SORT(SomeFile, #EXPAND(field));\nENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001235":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := somefile(name='mateus')[1].original;\n\n  return SORT(SomeFile, id);\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001307":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\n\n\nmacCheck() := FUNCTIONMACRO\n  field := somefile[1].original;\n\n  return SORT(SomeFile, #EXPAND(field));\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001026":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\nmacCheck() := FUNCTIONMACRO\n  field := 'somefile(name=\\'mateus\\')[1].original';\n\n  return SORT(SomeFile, #EXPAND(field));\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001051":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\nmacCheck() := FUNCTIONMACRO\n  field := '#EXPAND(somefile(name=\\'mateus\\')[1].original)';\n\n  return SORT(SomeFile, #EXPAND(field));\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001103":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1100, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\nmacCheck() := FUNCTIONMACRO\n  field := somefile(name='mateus')[1].original;\n\n  return SORT(SomeFile, #EXPAND(field));\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-001008":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\nmacCheck() := FUNCTIONMACRO\n  field := 'somefile(name=\\'mateus\\')[1].original';\n\n  return SORT(SomeFile, -#EXPAND(field));\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190911-000947":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\nmacCheck() := FUNCTIONMACRO\n  field := 'somefile(name=\\'mateus\\')[1].original';\n\n  return SORT(SomeFile, #EXPAND(field));\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190910-222817":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 10},\n\t\t\t\t\t {1001, 'mateus', 12},\n                     {1002, 'mateus', 13},\n\t\t\t\t\t {1003, 'joao', 10},\n\t\t\t\t\t {1004, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=IF(COUNTER=1,0,IF(COUNTER=2,LEFT.id,LEFT.original)),\n                                             SELF:=RIGHT)\n                    );\n\nprojected2 := ROLLUP(projected,GROUP,TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=ROWS(LEFT)[COUNT(ROWS(LEFT))].id,\n                                             SELF:=LEFT)\n                    );\n\nprojectedPruned := PROJECT(projected2, {UNSIGNED id, STRING name});\nprojectedPruningLog := PROJECT(projected(original<>0),{UNSIGNED id, UNSIGNED original});\n\n\nOUTPUT(projectedPruned);\nOUTPUT(projectedPruningLog);\n\n","W20190911-000923":"/*\n    Example code - use without restriction.  \n*/\nMyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tSTRING original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 'id'},\n\t\t\t\t\t {1001, 'mateus', 'id'},\n                     {1002, 'mateus', 'id'},\n\t\t\t\t\t {1003, 'joao', 'id'},\n\t\t\t\t\t {1004, 'joao', 'id'}],MyRec);\n\n\nmacCheck() := FUNCTIONMACRO\n  field := somefile(name='mateus')[1].original;\n\n  return SORT(SomeFile, #EXPAND(field));\n  ENDMACRO;\n\nsomePeople := macCheck();\n\n//  Outputs  ---\nsomePeople;\n","W20190910-222244":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 10},\n\t\t\t\t\t {1001, 'mateus', 12},\n                     {1002, 'mateus', 13},\n\t\t\t\t\t {1003, 'joao', 10},\n\t\t\t\t\t {1004, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=IF(COUNTER=1,0,IF(COUNTER=2,LEFT.id,LEFT.original)),\n                                             SELF:=RIGHT)\n                    );\n\nprojected2 := ROLLUP(projected,GROUP,TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=ROWS(LEFT)[COUNT(ROWS(LEFT))].id,\n                                             SELF:=LEFT)\n                    );\nprojected3 := PROJECT(projected(original<>0),{UNSIGNED id, UNSIGNED original})\n                    );\n\n\nOUTPUT(projected);\nOUTPUT(projected2);\nOUTPUT(projected3);\n","W20190910-222257":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 10},\n\t\t\t\t\t {1001, 'mateus', 12},\n                     {1002, 'mateus', 13},\n\t\t\t\t\t {1003, 'joao', 10},\n\t\t\t\t\t {1004, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=IF(COUNTER=1,0,IF(COUNTER=2,LEFT.id,LEFT.original)),\n                                             SELF:=RIGHT)\n                    );\n\nprojected2 := ROLLUP(projected,GROUP,TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=ROWS(LEFT)[COUNT(ROWS(LEFT))].id,\n                                             SELF:=LEFT)\n                    );\nprojected3 := PROJECT(projected(original<>0),{UNSIGNED id, UNSIGNED original});\n\n\nOUTPUT(projected);\nOUTPUT(projected2);\nOUTPUT(projected3);\n","W20190910-222052":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 10},\n\t\t\t\t\t {1001, 'mateus', 12},\n                     {1002, 'mateus', 13},\n\t\t\t\t\t {1003, 'joao', 10},\n\t\t\t\t\t {1004, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=IF(COUNTER=1,0,IF(COUNTER=2,LEFT.id,LEFT.original)),\n                                             SELF:=RIGHT)\n                    );\n\nprojected2 := ROLLUP(projected,GROUP,TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=ROWS(LEFT)[COUNT(ROWS(LEFT))].id,\n                                             SELF:=LEFT)\n                    );\n\n\nOUTPUT(projected);\nOUTPUT(projected2);\n","W20190910-222034":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 10},\n\t\t\t\t\t {1001, 'mateus', 12},\n                     {1002, 'mateus', 13},\n\t\t\t\t\t {1003, 'joao', 10},\n\t\t\t\t\t {1004, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=IF(COUNTER=1,0,IF(COUNTER=2,LEFT.id,LEFT.original)),\n                                             SELF:=RIGHT)\n                    );\n\nprojected2 := ROLLIP(projected,GROUP,TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=ROWS(LEFT)[COUNT(ROWS(LEFT))].id,\n                                             SELF:=LEFT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-222040":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 10},\n\t\t\t\t\t {1001, 'mateus', 12},\n                     {1002, 'mateus', 13},\n\t\t\t\t\t {1003, 'joao', 10},\n\t\t\t\t\t {1004, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=IF(COUNTER=1,0,IF(COUNTER=2,LEFT.id,LEFT.original)),\n                                             SELF:=RIGHT)\n                    );\n\nprojected2 := ROLLUP(projected,GROUP,TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=ROWS(LEFT)[COUNT(ROWS(LEFT))].id,\n                                             SELF:=LEFT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-221427":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED original;\nEND;\n\nSomeFile := DATASET([{1000, 'mateus', 10},\n\t\t\t\t\t {1001, 'mateus', 12},\n                     {1002, 'mateus', 13},\n\t\t\t\t\t {1003, 'joao', 10},\n\t\t\t\t\t {1004, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.original:=IF(COUNTER=1,0,IF(COUNTER=2,LEFT.id,LEFT.original)),\n                                             SELF:=RIGHT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-221326":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.date:=IF(COUNTER=1,RIGHT.id,IF(COUNTER=2,LEFT.id,LEFT.date)),\n                                             SELF:=RIGHT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-221247":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.date:=IF(COUNTER=1,RIGHT.id,LEFT.id),\n                                             SELF:=RIGHT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-221133":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.date:=IF(COUNTER>1,LEFT.id,RIGHT.date),\n                                             SELF:=RIGHT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-221125":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.date:=IF(COUNTER=1,LEFT.id,RIGHT.date),\n                                             SELF:=RIGHT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-221100":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.date:=IF(COUNTER=1,LEFT.id,LEFT.date),\n                                             SELF:=RIGHT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-220911":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.date:=IF(COUNTER>1,LEFT.id,RIGHT.id),\n                                             SELF:=LEFT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-220927":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := ITERATE(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.date:=IF(COUNTER>1,LEFT.id,RIGHT.id),\n                                             SELF:=RIGHT)\n                    );\n\n\nOUTPUT(projected);\n","W20190910-215335":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=EVALUETE(GROUP).id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-215027":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=TOPN(GROUP,1).id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-214646":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=RANGE(GROUP,[1,2]).id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-214703":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=GROUP(ROWSET).id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-214633":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=RANGE(GROUP,1).id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-214622":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=RANGE(GROUP,[1]).id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-214534":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=GROUP(.id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-214107":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),SELF.id:=ROWS(LEFT)[1].id,SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-214528":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),\n                                             SELF.id:=GROUP.id,\n                                             SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-213910":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),SELF.id:=COUNTER,SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-213008":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := MIN(GROUP,PersonID), \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-213845":"MyRec := RECORD\n\tUNSIGNED id;\n\tSTRING name;\n\tUNSIGNED date;\nEND;\n\nSomeFile := DATASET([{0, 'mateus', 10},\n\t\t\t\t\t {1, 'mateus', 12},\n                     {2, 'mateus', 13},\n\t\t\t\t\t {3, 'joao', 10},\n\t\t\t\t\t {4, 'joao', 11}],MyRec);\n\nSortedRecs  := SORT(SomeFile,name);\n\nGroupedRecs1 := GROUP(SortedRecs,name); \t// unsorted\n\nprojected := PROJECT(GroupedRecs1, TRANSFORM(RECORDOF(LEFT),SELF.id=COUNTER,SELF:=LEFT));\n\n\nOUTPUT(projected);\n","W20190910-212958":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := MIN(GROUP,PersonID), \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212913":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP[1].PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212903":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP().PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212854":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := DATASET(GROUP).PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212617":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP(1).PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212801":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := ROWSET(GROUP).PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212613":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP(ROWSET).PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212607":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP(RANGE).PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212509":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP().PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212501":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP[1].PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-212426":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomePeople2s := PROJECT(somePeople, TRANSFORM(RECORDOF(LEFT), \n                                              SELF.PersonID := GROUP.PersonID, \n                                              SELF := LEFT)\n                       );\n\n//  Outputs  ---\nsomePeople2;\n","W20190910-204805":"pointRec := { REAL x, REAL y };\n\nanalyse( ds) := MACRO\n#uniquename(stats)\n%stats% := TABLE(ds, {c := COUNT(GROUP),\n\t\t\t\t\t\t\t\t\t\t\tsx := SUM(GROUP, x),\n\t\t\t\t\t\t\t\t\t\t\tsy := SUM(GROUP, y),\n\t\t\t\t\t\t\t\t\t\t\tsxx := SUM(GROUP, x * x),\n\t\t\t\t\t\t\t\t\t\t\tsxy := SUM(GROUP, x * y),\n\t\t\t\t\t\t\t\t\t\t\tsyy := SUM(GROUP, y * y),\n\t\t\t\t\t\t\t\t\t\t\tvarx := VARIANCE(GROUP, x);\n\t\t\t\t\t\t\t\t\t\t\tvary := VARIANCE(GROUP, y);\n\t\t\t\t\t\t\t\t\t\t\tvarxy := COVARIANCE(GROUP, x, y);\n\t\t\t\t\t\t\t\t\t\t\trc := CORRELATION(GROUP, x, y) });\nOUTPUT(%stats%);\n// Following should be zero\nOUTPUT(%stats%, { varx - (sxx-sx*sx/c)/c,vary - (syy-sy*sy/c)/c,varxy - (sxy-sx*sy/c)/c,rc - (varxy/SQRT(varx*vary)) });\nOUTPUT(%stats%, { 'bestFit: y=' + (STRING)((sy-sx*varxy/varx)/c) + ' + ' +(STRING)(varxy/varx)+'x' });\nENDMACRO;\n\nds1 := DATASET([{1,1},{2,2},{3,3},{4,4},{5,5},{6,6}], pointRec);\nds2 := DATASET([ {1.93896e+009, 2.04482e+009},\n\t\t\t\t\t\t\t\t{1.77971e+009, 8.54858e+008},\n\t\t\t\t\t\t\t\t{2.96181e+009, 1.24848e+009},\n\t\t\t\t\t\t\t\t{2.7744e+009, 1.26357e+009},\n\t\t\t\t\t\t\t\t{1.14416e+009, 4.3429e+008},\n\t\t\t\t\t\t\t\t{3.38728e+009, 1.30238e+009},\n\t\t\t\t\t\t\t\t{3.19538e+009, 1.71177e+009} ], pointRec);\nds3 := DATASET([{1, 1.00039},\n\t\t\t\t\t\t\t\t{2, 2.07702},\n\t\t\t\t\t\t\t\t{3, 2.86158},\n\t\t\t\t\t\t\t\t{4, 3.87114},\n\t\t\t\t\t\t\t\t{5, 5.12417},\n\t\t\t\t\t\t\t\t{6, 6.20283} ], pointRec);\nanalyse(ds1);\nanalyse(ds2);\nanalyse(ds3);","W20190910-204638":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nPerson := DATASET([ {1,'Fred','Smith'},\n                    {2,'Joe','Blow'},\n                    {3,'Jane','Smith'}],Layout_Person);\n\nSortedPerson := SORT(Person, LastName, FirstName);\n\n//  Outputs  ---\nSortedPerson;\n","W20190910-204555":"IMPORT STD;\t\n///yyyyyyy\nfibRecord := RECORD\n\tINTEGER\t\t\tfib1 := 1;\n\tINTEGER\t\t\tfib2 := 1;\n\tINTEGER\t\t\tmycounter := 100;\n\tSTRING20\t\textra := 'xx';\nEND;\n\nfibTable := DATASET([{9},{8},{7},{6}],fibrecord);\n\nfibRecord makeFibs(fibRecord l, fibRecord r) := TRANSFORM\n\tSELF.fib1 := if(l.fib1=0,r.fib1,r.fib1 + l.fib1);\n\tSELF.fib2 := r.fib2 + l.fib1 + l.fib2;\n\tSELF.mycounter := l.mycounter + 1;\n\tSELF := r;\nEND;\n\ndoDisplay(STRING DispStr) := std.system.Log.addWorkunitInformation(DispStr);\n\nret := ITERATE(fibTable, makeFibs(LEFT, RIGHT));\nAPPLY(ret, \n\tdoDisplay((STRING)fib1 + ','),\n\tdoDisplay((STRING)fib2 + ','),\n\tdoDisplay((STRING)mycounter),\n\tdoDisplay(extra),\n\tBEFORE(doDisplay('Begin APPLY....')),\n\tAFTER(doDisplay('...End APPLY'))\n\t);\nOUTPUT(ret);\n","W20190910-204514":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n\nsbppl := allPeople(PersonID>2);\nsbppl;","W20190910-204456":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n\nsbppl := allPeople(PersonID>2);\nsbppl","W20190910-204506":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n\nsbppl := allPeople(PersonID>2);\nsbppl;","W20190910-204127":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190910-203430":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := ROLLUP(somePeople, personid, transform(recordof(left), \n            self.personid:=rows(left)[1].personid, \n            self := left));\n\n\n//  Outputs  ---\nsomeTest;\n","W20190910-203530":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := ROLLUP(somePeople, group, transform(recordof(left), \n            self.personid:=rows(left)[1].personid, \n            self := left));\n\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202824":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP(ROWSET)[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202536":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP()[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202749":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP(ROWSET)[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202723":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP(ROWSET)[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202533":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP()[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202509":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP()[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202448":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP(ROWS)[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202338":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := CHOOSEN(GROUP,1)[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202421":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := CHOOSEN(GROUP(ROWS),1)[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202355":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := CHOOSEN(GROUP(1),1)[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202250":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := CHOSEEN(GROUP,1).PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-202310":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := CHOOSEN(GROUP,1).PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-201623":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\n//  Outputs  ---\nsomePeople;\n","W20190910-195931":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\n\r\nOUTPUT(total_records,NAMED('REGISTER_NUMBER'));\r\nOUTPUT(COUNT(crimes(crimes.DESCR_TIPO_PESSOA='VA­TIMA')),NAMED('TOTAL_VITIMAS'));\r\nOUTPUT(total_records_pardo,NAMED('TOTALV_PARDO'));\r\nOUTPUT(total_records_branco,NAMED('TOTALV_BRANCO'));\r\nOUTPUT(total_records_negro,NAMED('TOTALV_NEGRO'));\r\nOUTPUT(total_records_vermelho,NAMED('TOTALV_VERMELHO'));\r\nOUTPUT(total_records_amarelo,NAMED('TOTALV_AMARELO'));\r\nOUTPUT(total_records_other,NAMED('TOTALV_OTHER'));","W20190910-202048-2":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Fred','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := GROUP(allPeople, FirstName);\n\nsomeTest := TABLE(somePeople, { PersonID, FirstName, \n  unsigned1 original := GROUP[1].PersonID});\n\n//  Outputs  ---\nsomeTest;\n","W20190910-195251":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\n\r\nOUTPUT(CHOOSEN(crimes,1));\r\nOUTPUT(COUNT(crimes(crimes.DESCR_TIPO_PESSOA='VATIMA')));\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-194758":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\n\r\nOUTPUT(CHOOSEN(crimes,1));\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-194947":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\n\r\nOUTPUT(CHOOSEN(crimes,1));\r\nOUTPUT(COUNT(crimes(DESCR_TIPO_PESSOA='VATIMA')));\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-194456":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VATIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-195605":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VA­TIMA'));\r\n\r\nOUTPUT(CHOOSEN(crimes,1));\r\nOUTPUT(COUNT(crimes(crimes.DESCR_TIPO_PESSOA='VA­TIMA')));\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-192409":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VATIMA')));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VATIMA')));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VATIMA')));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VATIMA')));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VATIMA')));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VATIMA')));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-182047":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2015 := DATASET('~erm::crimes_sp::bo_2015',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2016 := DATASET('~erm::crimes_sp::bo_2016',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tdescre_treated := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',\r\n\t\t\t\t\t\tIF ((STRING)STD.UNI.CleanAccents(d_info.DESCR_TIPO_PESSOA) = 'Vatima', 'VITIMA', STD.STR.ToUpperCase(d_info.DESCR_TIPO_PESSOA))\r\n\t\t\t\t\t\t,'');\r\n\tSELF.DESCR_TIPO_PESSOA := descre_treated;\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\nclean_2015\t:=\tPROJECT(dirty_2015,dataCleaner(LEFT));\r\nclean_2016\t:=\tPROJECT(dirty_2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);\r\nOUTPUT(clean_2015,,\t'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,\t'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190910-192212":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190910-183350":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2015 := DATASET('~erm::crimes_sp::bo_2015',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2016 := DATASET('~erm::crimes_sp::bo_2016',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tdescre_treated := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',\r\n\t\t\t\t\t\tSTD.STR.ToUpperCase((STRING)STD.UNI.CleanAccents(d_info.DESCR_TIPO_PESSOA))\r\n\t\t\t\t\t\t,'');\r\n\tSELF.DESCR_TIPO_PESSOA := descre_treated;\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\nclean_2015\t:=\tPROJECT(dirty_2015,dataCleaner(LEFT));\r\nclean_2016\t:=\tPROJECT(dirty_2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);\r\nOUTPUT(clean_2015,,\t'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,\t'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190910-180312":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2015 := DATASET('~erm::crimes_sp::bo_2015',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2016 := DATASET('~erm::crimes_sp::bo_2016',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tdescre_treated := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',\r\n\t\t\t\t\t\tIF (d_info.DESCR_TIPO_PESSOA = 'Vítima', 'VITIMA', STD.STR.ToUpperCase(d_info.DESCR_TIPO_PESSOA))\r\n\t\t\t\t\t\t,'');\r\n\tSELF.DESCR_TIPO_PESSOA := descre_treated;\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\nclean_2015\t:=\tPROJECT(dirty_2015,dataCleaner(LEFT));\r\nclean_2016\t:=\tPROJECT(dirty_2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);\r\nOUTPUT(clean_2015,,\t'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,\t'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190910-174536":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2015 := DATASET('~erm::crimes_sp::bo_2015',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2016 := DATASET('~erm::crimes_sp::bo_2016',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase((STRING)STD.Uni.CleanAccents(d_info.DESCR_TIPO_PESSOA)),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\nclean_2015\t:=\tPROJECT(dirty_2015,dataCleaner(LEFT));\r\nclean_2016\t:=\tPROJECT(dirty_2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);\r\nOUTPUT(clean_2015,,\t'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,\t'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190910-174523":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190910-174015":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-173541":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND (STRING)STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND (STRING)STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND (STRING)STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND (STRING)STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND (STRING)STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND (STRING)STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-174212":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA')));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA')));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA')));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA')));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA')));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND STD.STR.EqualIgnoreCase(crimes.DESCR_TIPO_PESSOA,'VÍTIMA')));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-173228":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA');\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-172945":"IMPORT $, STD;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND STD.Uni.CleanAccents(crimes.DESCR_TIPO_PESSOA) = 'VITIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-172407":"IMPORT $;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-171551":"IMPORT $;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(COR IN race_pardo AND DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_branco := COUNT(crimes(COR IN race_branco AND DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_negro := COUNT(crimes(COR IN race_negro AND DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_vermelho := COUNT(crimes(COR IN race_vermelha AND DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_amarelo := COUNT(crimes(COR IN race_amarelo AND DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_other := COUNT(crimes(COR IN race_other AND DESCR_TIPO_PESSOA = 'VITIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-171736":"IMPORT $;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VITIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VITIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-171849":"IMPORT $;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-171935":"IMPORT $;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN race_pardo ));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN race_branco AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN race_negro AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN race_vermelha AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN race_amarelo AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN race_other AND crimes.DESCR_TIPO_PESSOA = 'VíTIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-155014":"IMPORT $;\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\nsorted_crimes := SORT(crimes,crimes.COR);\r\n\r\nunique_race := DEDUP(sorted_crimes, sorted_crimes.COR);\r\n\r\nOUTPUT(unique_race);","W20190910-171426":"IMPORT $;\r\nrace_pardo\t\t:=\t['MORENO CLARO', 'MORENO ESCURO','PARDO', 'PARDA', 'PARDO, MEDIANO'];\r\nrace_branco\t\t:=\t['BRANCA', 'BRANCO', 'INDIVIDUO BRANCO'];\r\nrace_negro\t\t:=\t['COR NEGRA', 'MULATO','NEGRO','PRETO', 'PRETA'];\r\nrace_vermelha\t:=\t['VERMELHA'];\r\nrace_amarelo\t:=\t['AMARELA'];\r\nrace_other\t\t:=\t['', 'OUTROS'];\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\ntotal_records_pardo := COUNT(crimes(COR IN race_pardo AND DESCR_TIPO_PESSOA = 'VÍTIMA'));\r\ntotal_records_branco := COUNT(crimes(COR IN race_branco AND DESCR_TIPO_PESSOA = 'VÍTIMA'));\r\ntotal_records_negro := COUNT(crimes(COR IN race_negro AND DESCR_TIPO_PESSOA = 'VÍTIMA'));\r\ntotal_records_vermelho := COUNT(crimes(COR IN race_vermelha AND DESCR_TIPO_PESSOA = 'VÍTIMA'));\r\ntotal_records_amarelo := COUNT(crimes(COR IN race_amarelo AND DESCR_TIPO_PESSOA = 'VÍTIMA'));\r\ntotal_records_other := COUNT(crimes(COR IN race_other AND DESCR_TIPO_PESSOA = 'VÍTIMA'));\r\n\r\nOUTPUT(crimes);\r\nOUTPUT(total_records);\r\nOUTPUT(total_records_pardo);\r\nOUTPUT(total_records_branco);\r\nOUTPUT(total_records_negro);\r\nOUTPUT(total_records_vermelho);\r\nOUTPUT(total_records_amarelo);\r\nOUTPUT(total_records_other);","W20190910-153032":"OUTPUT('Hello World');","W20190910-152016":"IMPORT $;\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\nrace_variant := TOPN(GROUP(crimes,crimes.COR),1,crimes.IDADE_PESSOA);\r\nOUTPUT(race_variant);","W20190910-151857":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190910-152816":"IMPORT Visualizer;\n\nds := DATASET([ {'English', 5},\n                {'History', 17},\n                {'Geography', 7},\n                {'Chemistry', 16},\n                {'Irish', 26},\n                {'Spanish', 67},\n                {'Bioligy', 66},\n                {'Physics', 46},\n                {'Math', 98}],\n                {STRING subject, INTEGER4 year});\n\nOUTPUT(ds, NAMED('chartData'));\n\nVisualizer.TwoD.pie('myChart',, 'chartData');","W20190910-151140":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190910-151213":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2015 := DATASET('~erm::crimes_sp::bo_2015',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2016 := DATASET('~erm::crimes_sp::bo_2016',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\nclean_2015\t:=\tPROJECT(dirty_2015,dataCleaner(LEFT));\r\nclean_2016\t:=\tPROJECT(dirty_2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);\r\nOUTPUT(clean_2015,,\t'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,\t'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190910-150838":"IMPORT $;\r\n\r\ncrimes := $.clean_bo.File;\r\n\r\nrace_variant := TOPN(GROUP(crimes,crimes.COR),1,crimes.IDADE_PESSOA);\r\nOUTPUT(race_variant);","W20190910-150930":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2015 := DATASET('~erm::crimes_sp::bo_2015',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2016 := DATASET('~erm::crimes_sp::bo_2016',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\nclean_2015\t:=\tPROJECT(dirty_2015,dataCleaner(LEFT));\r\nclean_2016\t:=\tPROJECT(dirty_2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);\r\nOUTPUT(clean_2015,,\t'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,\t'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190910-150600":"IMPORT $;\r\n\r\n// OUTPUT($.clean_bo.File);\r\n// OUTPUT($.unprocessed_bo.File);\r\n\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\nOUTPUT(dirty_20071);","W20190909-213527":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190909-213511":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190909-211511":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190909-211419":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190909-211431":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190909-181057-3":"IMPORT STD.DataPatterns;\nfilePath := '~lily::ksu_workshop::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190909-181452":"OUTPUT('hello world');","W20190909-210207":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190908-105501":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190906-204949":"IMPORT linearregression as LROLS;\r\nIMPORT ML_Core;\r\nIMPORT ML_Core.Types as mlTypes;\r\nIMPORT PBblas;\r\nIMPORT PBBlas.test.MakeTestMatrix as tm;\r\nIMPORT PBBlas.Types as pbbTypes;\r\nIMPORT PBBlas.Converted as pbbConverted;\r\nIMPORT ML_Core.Math as Math;\r\nLayout_Cell := pbbTypes.Layout_Cell;\r\nNumericField := mlTypes.NumericField;\r\ntwo31 := POWER(2, 31);  // 2**31\r\n\r\nepsilon := .000001;  // Allowable error\r\n\r\nREAL Noise(maxv=.1) := FUNCTION\r\n  out := ((RANDOM()-two31)%1000000)/(1000000/maxv);\r\n  return out;\r\nEND;\r\n\r\n// Create a multiple linear regression with 3 independents, and also multi-variate\r\n// with three dependents.\r\ncompX := RECORD\r\n  REAL wi;\r\n  REAL id;\r\n  REAL X1;\r\n  REAL X2;\r\n  REAL X3;\r\nEND;\r\ncompX makeComposite(Layout_Cell l, DATASET(Layout_Cell) r) := TRANSFORM\r\n  SELF.wi := l.wi_id;\r\n  SELF.id := l.x;\r\n  SELF.X1 := r(y=1)[1].v;\r\n  SELF.X2 := r(y=2)[1].v;\r\n  SELF.X3 := r(y=3)[1].v;\r\nEND;\r\n// Generation coefficients for Y1 and Y2\r\nA1_1 := -1.8;\r\nA2_1 := -.333;\r\nA3_1 := 1.13;\r\nB_1 := -3.333;\r\n// Generation coefficients for Y3\r\nA1_2 := .0013;\r\nA2_2 := -.123;\r\nA3_2 := .00015;\r\nB_2 := -5.01;\r\n\r\nN := 50;\r\nM := 3;\r\n\r\nmX := tm.RandomMatrix(N, M, 1.0, 2);\r\n\r\nX := pbbConverted.MatrixToNF(mX);\r\ngX := GROUP(mX, x, ALL);\r\ncX := ROLLUP(gX,  GROUP, makeComposite(LEFT, ROWS(LEFT)));\r\nLayout_Cell makeY(compX X, UNSIGNED c) := TRANSFORM\r\n  SELF.x := X.id;\r\n  SELF.y := IF(c=1, 1, 3);  // Make Y1 and Y3.  Y2 will be a copy of Y1,\r\n  SELF.wi_id := X.wi;\r\n  v1 := A1_1 * X.X1 + A2_1 * X.X2 + A3_1 * X.X3 + B_1 + Noise(1);\r\n  v2 := A1_2 * X.X1 + A2_2 * X.X2 + A3_2 * X.X3 + B_2 + Noise(10000);\r\n  SELF.v := IF(c=1, v1, v2);\r\nEND;\r\n// Make 2 Y variables.  One with more noise than the other and different coefficients\r\nmY := NORMALIZE(cX, 2, makeY(LEFT, COUNTER));\r\n// Now copy Y1 to Y2\r\nLayout_Cell make_Y2(Layout_Cell y_cell) := TRANSFORM\r\n  SELF.y := IF(y_cell.y = 1, 2, SKIP);\r\n  SELF   := y_cell\r\nEND;\r\nmY2 := PROJECT(mY, make_Y2(LEFT));\r\nmY3 := mY + mY2;\r\nY := pbbConverted.MatrixToNF(mY3);\r\n\r\n// Create a regression with 3 independents and 3 dependents\r\nlr := LROLS.OLS(X, Y);\r\n\r\n// Test analytic functions starting with the most independent attributes, and working up\r\n// from there\r\n\r\n// Test //OUTPUT format\r\nTestRec := RECORD\r\n  STRING32 testname;\r\n  UNSIGNED errors;\r\n  STRING   details;\r\nEND;\r\n\r\n\r\nINTEGER testSame(REAL8 v, REAL8 expected) := FUNCTION\r\n err := IF(ABS((v - expected)/expected) < epsilon, 0, 1);\r\n return err;\r\nEND;\r\nINTEGER testDiff(REAL8 v, REAL8 expected) := FUNCTION\r\n err := IF(ABS((v - expected)/expected) >= epsilon, 0, 1);\r\n return err;\r\nEND;\r\n\r\n\r\n\r\n\r\n// TEST01 -- R Squared\r\nRsq := lr.RSquared;\r\nRsq1 := Rsq(number=1)[1].RSquared;\r\nRsq2 := Rsq(number=2)[1].RSquared;\r\nRsq3 := Rsq(number=3)[1].RSquared;\r\nerrors1_1 := testSame(Rsq1, Rsq2);\r\nerrors1_2 := testDiff(Rsq1, Rsq3);\r\ndetails1_1 := 'Rsq1: ' + Rsq1 + ', Rsq2: ' + Rsq2;\r\ndetails1_2 := 'Rsq1: ' + Rsq1 + ', Rsq3: ' + Rsq3;\r\ntest1_1 := DATASET([{'TEST1_1 -- R Squared(1 vs 2)', errors1_1, details1_1}], TestRec);\r\ntest1_2 := DATASET([{'TEST1_2 -- R Squared(1 vs 3)', errors1_2, details1_2}], TestRec);\r\n\r\n// TEST02 -- ANOVA\r\nan := lr.Anova;\r\nan1 := an(number=1)[1];\r\nan2 := an(number=2)[1];\r\nan3 := an(number=3)[1];\r\ntotalSS1 := an1.Total_SS;\r\ntotalSS2 := an2.Total_SS;\r\ntotalSS3 := an3.Total_SS;\r\nmodelSS1 := an1.Model_SS;\r\nmodelSS2 := an2.Model_SS;\r\nmodelSS3 := an3.Model_SS;\r\nerrorSS1 := an1.Error_SS;\r\nerrorSS2 := an2.Error_SS;\r\nerrorSS3 := an3.Error_SS;\r\ntotalDF1 := an1.Total_DF;\r\ntotalDF2 := an2.Total_DF;\r\ntotalDF3 := an3.Total_DF;\r\nmodelDF1 := an1.Model_DF;\r\nmodelDF2 := an2.Model_DF;\r\nmodelDF3 := an3.Model_DF;\r\nerrorDF1 := an1.Error_DF;\r\nerrorDF2 := an2.Error_DF;\r\nerrorDF3 := an3.Error_DF;\r\ntotalMS1 := an1.Total_MS;\r\ntotalMS2 := an2.Total_MS;\r\ntotalMS3 := an3.Total_MS;\r\nmodelMS1 := an1.Model_MS;\r\nmodelMS2 := an2.Model_MS;\r\nmodelMS3 := an3.Model_MS;\r\nerrorMS1 := an1.Error_MS;\r\nerrorMS2 := an2.Error_MS;\r\nerrorMS3 := an3.Error_MS;\r\nmodelF1  := an1.Model_F;\r\nmodelF2  := an2.Model_F;\r\nmodelF3 := an3.Model_F;\r\n// 2_1 Total_SS\r\nerrors2_1_1 := testSame(TotalSS1, TotalSS2);\r\nerrors2_1_2 := testDiff(TotalSS1, TotalSS3);\r\ndetails2_1_1 := 'totalSS1: ' + totalSS1 + ', totalSS2: ' + totalSS2;\r\ndetails2_1_2 := 'totalSS1: ' + totalSS2 + ', totalSS3: ' + totalSS3;\r\ntest2_1_1 := DATASET([{'TEST2_1_1 -- Total_SS (1 vs 2)', errors2_1_1, details2_1_1}], TestRec);\r\ntest2_1_2 := DATASET([{'TEST2_1_2 -- Total_SS (1 vs 3)', errors2_1_2, details2_1_2}], TestRec);\r\n// 2_2 Model_SS\r\nerrors2_2_1 := testSame(modelSS1, ModelSS2);\r\nerrors2_2_2 := testDiff(modelSS1, modelSS3);\r\ndetails2_2_1 := 'modelSS1: ' + modelSS1 + ', modelSS2: ' + modelSS2;\r\ndetails2_2_2 := 'modelSS1: ' + modelSS2 + ', modelSS3: ' + modelSS3;\r\ntest2_2_1 := DATASET([{'TEST2_2_1 -- Model_SS (1 vs 2)', errors2_2_1, details2_2_1}], TestRec);\r\ntest2_2_2 := DATASET([{'TEST2_2_2 -- Model_SS (1 vs 3)', errors2_2_2, details2_2_2}], TestRec);\r\n// 2_3 Error_SS\r\nerrors2_3_1 := testSame(errorSS1, errorSS2);\r\nerrors2_3_2 := testDiff(errorSS1, errorSS3);\r\ndetails2_3_1 := 'errorSS1: ' + errorSS1 + ', errorSS2: ' + errorSS2;\r\ndetails2_3_2 := 'errorSS1: ' + errorSS2 + ', errrorSS3: ' + errorSS3;\r\ntest2_3_1 := DATASET([{'TEST2_3_1 -- Error_SS (1 vs 2)', errors2_3_1, details2_3_1}], TestRec);\r\ntest2_3_2 := DATASET([{'TEST2_3_2 -- Error_SS (1 vs 3)', errors2_3_2, details2_3_2}], TestRec);\r\n// 2_4 Total_DF\r\n// Note: for DF, only verify that all are the same\r\nerrors2_4_1 := testSame(TotalDF1, TotalDF2);\r\nerrors2_4_2 := testSame(TotalDF1, TotalDF3);\r\ndetails2_4_1 := 'totalDF1: ' + totalDF1 + ', totalDF2: ' + totalDF2;\r\ndetails2_4_2 := 'totalDF1: ' + totalDF2 + ', totalDF3: ' + totalDF3;\r\ntest2_4_1 := DATASET([{'TEST2_4_1 -- Total_DF (1 vs 2)', errors2_4_1, details2_4_1}], TestRec);\r\ntest2_4_2 := DATASET([{'TEST2_4_2 -- Total_DF (1 vs 3)', errors2_4_2, details2_4_2}], TestRec);\r\n// 2_5 Model_DF\r\nerrors2_5_1 := testSame(modelDF1, ModelDF2);\r\nerrors2_5_2 := testSame(modelDF1, modelDF3);\r\ndetails2_5_1 := 'modelDF1: ' + modelDF1 + ', modelDF2: ' + modelDF2;\r\ndetails2_5_2 := 'modelDF1: ' + modelDF2 + ', modelDF3: ' + modelDF3;\r\ntest2_5_1 := DATASET([{'TEST2_5_1 -- Model_DF (1 vs 2)', errors2_5_1, details2_5_1}], TestRec);\r\ntest2_5_2 := DATASET([{'TEST2_5_2 -- Model_DF (1 vs 3)', errors2_5_2, details2_5_2}], TestRec);\r\n// 2_6 Error_DF\r\nerrors2_6_1 := testSame(errorDF1, errorDF2);\r\nerrors2_6_2 := testSame(errorDF1, errorDF3);\r\ndetails2_6_1 := 'errorDF1: ' + errorDF1 + ', errorDF2: ' + errorDF2;\r\ndetails2_6_2 := 'errorDF1: ' + errorDF2 + ', errrorDF3: ' + errorDF3;\r\ntest2_6_1 := DATASET([{'TEST2_6_1 -- Error_DF (1 vs 2)', errors2_6_1, details2_6_1}], TestRec);\r\ntest2_6_2 := DATASET([{'TEST2_6_2 -- Error_DF (1 vs 3)', errors2_6_2, details2_6_2}], TestRec);\r\n// 2_7 Total_MS\r\nerrors2_7_1 := testSame(TotalMS1, TotalMS2);\r\nerrors2_7_2 := testDiff(TotalMS1, TotalMS3);\r\ndetails2_7_1 := 'totalMS1: ' + totalMS1 + ', totalMS2: ' + totalMS2;\r\ndetails2_7_2 := 'totalMS1: ' + totalMS2 + ', totalMS3: ' + totalMS3;\r\ntest2_7_1 := DATASET([{'TEST2_7_1 -- Total_MS (1 vs 2)', errors2_7_1, details2_7_1}], TestRec);\r\ntest2_7_2 := DATASET([{'TEST2_7_2 -- Total_MS (1 vs 3)', errors2_7_2, details2_7_2}], TestRec);\r\n// 2_8 Model_MS\r\nerrors2_8_1 := testSame(modelMS1, ModelMS2);\r\nerrors2_8_2 := testDiff(modelMS1, modelMS3);\r\ndetails2_8_1 := 'modelMS1: ' + modelMS1 + ', modelMS2: ' + modelMS2;\r\ndetails2_8_2 := 'modelMS1: ' + modelMS2 + ', modelMS3: ' + modelMS3;\r\ntest2_8_1 := DATASET([{'TEST2_8_1 -- Model_MS (1 vs 2)', errors2_8_1, details2_8_1}], TestRec);\r\ntest2_8_2 := DATASET([{'TEST2_8_2 -- Model_MS (1 vs 3)', errors2_8_2, details2_8_2}], TestRec);\r\n// 2_9 Error_MS\r\nerrors2_9_1 := testSame(errorMS1, errorMS2);\r\nerrors2_9_2 := testDiff(errorMS1, errorMS3);\r\ndetails2_9_1 := 'errorMS1: ' + errorMS1 + ', errorMS2: ' + errorMS2;\r\ndetails2_9_2 := 'errorSS1: ' + errorMS2 + ', errrorMS3: ' + errorMS3;\r\ntest2_9_1 := DATASET([{'TEST2_9_1 -- Error_MS (1 vs 2)', errors2_9_1, details2_9_1}], TestRec);\r\ntest2_9_2 := DATASET([{'TEST2_9_2 -- Error_MS (1 vs 3)', errors2_9_2, details2_9_2}], TestRec);\r\n// 2_10 Model_F\r\nerrors2_10_1 := testSame(modelF1, modelF2);\r\nerrors2_10_2 := testDiff(modelF1, modelF3);\r\ndetails2_10_1 := 'modelF1: ' + modelF1 + ', modelF2: ' + modelF2;\r\ndetails2_10_2 := 'modelF1: ' + modelF1 + ', modelF3: ' + modelF3;\r\ntest2_10_1 := DATASET([{'TEST2_10_1 -- Model_F (1 vs 2)', errors2_10_1, details2_10_1}], TestRec);\r\ntest2_10_2 := DATASET([{'TEST2_10_2 -- Model_F (1 vs 3)', errors2_10_2, details2_10_2}], TestRec);\r\n\r\n\r\n// TEST03 -- Adjusted R Squared\r\naRsq := lr.AdjRSquared;\r\naRsq1 := aRsq(number=1)[1].RSquared;\r\naRsq2 := aRsq(number=2)[1].RSquared;\r\naRsq3 := aRsq(number=3)[1].RSquared;\r\ndetails3_1 := 'adjRsq1: ' + aRsq1 + ', adjRsq2: ' + aRsq2;\r\ndetails3_2 := 'adjRsq1: ' + aRsq1 + ', adjRsq3: ' + aRsq3;\r\nerrors3_1 := testSame(aRsq1, aRsq2);\r\nerrors3_2 := testDiff(aRsq1, aRsq3);\r\ntest3_1 := DATASET([{'TEST3_1 -- Adjusted R Squared(1 vs 2)', errors3_1, details3_1}], TestRec);\r\ntest3_2 := DATASET([{'TEST3_2 -- AdjustedR Squared(1 vs 3)', errors3_2, details3_2}], TestRec);\r\n\r\n// TEST04 -- Standard Error\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\nse := lr.SE;\r\nOUTPUT(se);\r\nse1 := se(number=1 AND id=4)[1].value;\r\nse2 := se(number=2 AND id=4)[1].value;\r\nse3 := se(number=3 AND id=4)[1].value;\r\ndetails4_1 := 'SE1: ' + se1 + ', SE2: ' + se2;\r\ndetails4_2 := 'SE1: ' + se1 + ', SE3: ' + se3;\r\nerrors4_1 := testSame(se1, se2);\r\nerrors4_2 := testDiff(se1, se3);\r\ntest4_1 := DATASET([{'TEST4_1 -- Standard Error(1 vs 2)', errors4_1, details4_1}], TestRec);\r\ntest4_2 := DATASET([{'TEST4_2 -- Standard Error(1 vs 3)', errors4_2, details4_2}], TestRec);\r\n\r\n// TEST05 -- Tstat\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\nts := lr.Tstat;\r\nts1 := ts(number=1 AND id=4)[1].value;\r\nts2 := ts(number=2 AND id=4)[1].value;\r\nts3 := ts(number=3 AND id=4)[1].value;\r\ndetails5_1 := 'Tstat1: ' + ts1 + ', Tstat2: ' + ts2;\r\ndetails5_2 := 'Tstat1: ' + ts1 + ', Tstat3: ' + ts3;\r\nerrors5_1 := testSame(ts1, ts2);\r\nerrors5_2 := testDiff(ts1, ts3);\r\ntest5_1 := DATASET([{'TEST5_1 -- Tstat(1 vs 2)', errors5_1, details5_1}], TestRec);\r\ntest5_2 := DATASET([{'TEST5_2 -- Tstat(1 vs 3)', errors5_2, details5_2}], TestRec);\r\n\r\n// TEST06 -- P-val\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\npv := lr.Pval;\r\npv1 := pv(number=1 AND id=4)[1].value;\r\npv2 := pv(number=2 AND id=4)[1].value;\r\npv3 := pv(number=3 AND id=4)[1].value;\r\ndetails6_1 := 'Pval1: ' + pv1 + ', Pval2: ' + pv2;\r\ndetails6_2 := 'Pval1: ' + pv1 + ', Pval3: ' + pv3;\r\nerrors6_1 := testSame(pv1, pv2);\r\nerrors6_2 := testDiff(pv1, pv3);\r\ntest6_1 := DATASET([{'TEST6_1 -- Pval (1 vs 2)', errors6_1, details6_1}], TestRec);\r\ntest6_2 := DATASET([{'TEST6_2 -- Pval (1 vs 3)', errors6_2, details6_2}], TestRec);\r\n\r\n// TEST07 -- AIC\r\naic := lr.AIC;\r\naic1 := aic(number=1)[1].aic;\r\naic2 := aic(number=2)[1].aic;\r\naic3 := aic(number=3)[1].aic;\r\nerrors7_1 := testSame(aic1, aic2);\r\nerrors7_2 := testDiff(aic1, aic3);\r\ndetails7_1 := 'AIC1: ' + aic1 + 'AIC2: ' + aic2;\r\ndetails7_2 := 'AIC1: ' + aic1 + 'AIC3: ' + aic3;\r\ntest7_1 := DATASET([{'TEST7_1 -- AIC (1 vs 2)', errors7_1, details7_1}], TestRec);\r\ntest7_2 := DATASET([{'TEST7_2 -- AIC (1 vs 3)', errors7_2, details7_2}], TestRec);\r\n\r\n// TEST08 -- Confidence Interval\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\nci := lr.Confint(95);\r\nli1 := ci(number=1 AND id=4)[1].LowerInt;\r\nli2 := ci(number=2 AND id=4)[1].LowerInt;\r\nli3 := ci(number=3 AND id=4)[1].LowerInt;\r\nui1 := ci(number=1 AND id=4)[1].UpperInt;\r\nui2 := ci(number=2 AND id=4)[1].UpperInt;\r\nui3 := ci(number=3 AND id=4)[1].UpperInt;\r\ndetails8_1_1 := 'LowerInt1: ' + li1 + ', LowerInt2: ' + li2;\r\ndetails8_1_2 := 'LowerInt1: ' + li1 + ', LowerInt3: ' + li3;\r\ndetails8_2_1 := 'UpperInt1: ' + ui1 + ', UpperInt2: ' + ui2;\r\ndetails8_2_2 := 'UpperInt1: ' + ui1 + ', UpperInt3: ' + ui3;\r\nerrors8_1_1 := testSame(li1, li2);\r\nerrors8_1_2 := testDiff(li1, li3);\r\nerrors8_2_1 := testSame(ui1, ui2);\r\nerrors8_2_2 := testDiff(ui1, ui3);\r\ntest8_1_1 := DATASET([{'TEST8_1_1 -- Conf Int Lower (1 vs 2)', errors8_1_1, details8_1_1}], TestRec);\r\ntest8_1_2 := DATASET([{'TEST8_1_2 -- Conf Int Lower (1 vs 3)', errors8_1_2, details8_1_2}], TestRec);\r\ntest8_2_1 := DATASET([{'TEST8_2_1 -- Conf Int Upper (1 vs 2)', errors8_2_1, details8_2_1}], TestRec);\r\ntest8_2_2 := DATASET([{'TEST8_2_2 -- Conf Int Upper (1 vs 3)', errors8_2_2, details8_2_2}], TestRec);\r\n\r\n// TEST09 -- FTest\r\nft := lr.Ftest;\r\nft1 := ft(number=1)[1].pValue;\r\nft2 := ft(number=2)[1].pValue;\r\nft3 := ft(number=3)[1].pValue;\r\nerrors9_1 := testSame(ft1, ft2);\r\nerrors9_2 := testDiff(ft1, ft3);\r\ndetails9_1 := 'Ftest1: ' + ft1 + ', Ftest2: ' + ft2;\r\ndetails9_2 := 'Ftest1: ' + ft1 + ', Ftest3: ' + ft3;\r\ntest9_1 := DATASET([{'TEST9_1 -- Ftest Pvalue (1 vs 2)', errors9_1, details9_1}], TestRec);\r\ntest9_2 := DATASET([{'TEST9_2 -- Ftest Pvalue (1 vs 3)', errors9_2, details9_2}], TestRec);\r\n\r\n// TEST10 -- T Distribution\r\n\r\ntdist1 := lr.TDistribution(10);\r\npdfT1 := tdist1.density(2.0);\r\ncumT1 := tdist1.cumulative(2.0);\r\ntdist2 := lr.TDistribution(4168);\r\npdfT2   := tdist2.density(2.0);\r\ncumT2 := tdist2.cumulative(2.0);\r\nexpPdfT1 := 0.061145766321218202;\r\nexpPdfT2 := 0.054013619512625885;\r\nexpCumT1 := 0.96330598261462974;\r\nexpCumT2 := 0.97721748014745291;\r\ntval1 := tdist1.Ntile(expCumT1);\r\ntval2 := tdist2.Ntile(expCumT2);\r\nexpTval1 := 2.0;\r\nexpTval2 := 2.0;\r\nerrors10_1 := testSame(pdfT1, expPdfT1);\r\nerrors10_2 := testSame(pdfT2, expPdfT2);\r\nerrors10_3 := testSame(cumT1, expCumT1);\r\nerrors10_4 := testSame(cumT2, expCumT2);\r\nerrors10_5 := testSame(tval1, expTval1);\r\nerrors10_6 := testSame(tval2, expTval2);\r\ndetails10_1 := 'T PDF(2)[10]: ' + pdfT1 + ', Expected: ' + expPdfT1;\r\ndetails10_2 := 'T PDF(2)[4168]: ' + pdfT2 + ', Expected: ' + expPdfT2;\r\ndetails10_3 := 'Cumulative T: ' + cumT1 + ', Expected: ' + expCumT1;\r\ndetails10_4 := 'Cumulative T: ' + cumT2 + ', Expected: ' + expCumT2;\r\ndetails10_5 := 'T value: ' + tval1 + ', Expected: ' + expTval1;\r\ndetails10_6 := 'T value: ' + tval2 + ', Expected: ' + expTval2;\r\ntest10_1 := DATASET([{'TEST10_1 -- T-Distr PDF(1)(2.0)', errors10_1, details10_1}], TestRec);\r\ntest10_2 := DATASET([{'TEST10_2 -- T-Distr PDF(2)(2.0)', errors10_2, details10_2}], TestRec);\r\ntest10_3 := DATASET([{'TEST10_3 -- T-Distr CDF(1)', errors10_3, details10_3}], TestRec);\r\ntest10_4 := DATASET([{'TEST10_4 -- T-Distr CDF(2)', errors10_4, details10_4}], TestRec);\r\ntest10_5 := DATASET([{'TEST10_5 -- T-Distr Inv CDF(1)', errors10_5, details10_5}], TestRec);\r\ntest10_6 := DATASET([{'TEST10_6 -- T-Distr Inv CDF(2)', errors10_6, details10_6}], TestRec);\r\n\r\n// TEST11 -- F Distribution\r\nfdist1 := lr.FDistribution(5, 10);\r\nfdist2 := lr.FDistribution(8, 4168);\r\npdfF1 := fdist1.Density(2.0);\r\npdfF2 := fdist2.Density(2.0);\r\ncumF1 := fdist1.cumulative(2.0);\r\ncumF2 := fdist2.cumulative(2.0);\r\nexpPdfF1 := 0.16200574218011515;\r\nexpPdfF2 := 0.11483341094261676;\r\nexpCumF1 := 0.83580504910026132;\r\nexpCumF2 := 0.95734506461383584;\r\nerrors11_1 := testSame(pdfF1, expPdfF1);\r\nerrors11_2 := testSame(pdfF2, expPdfF2);\r\nerrors11_3 := testSame(cumF1, expCumF1);\r\nerrors11_4 := testSame(cumF2, expCumF2);\r\ndetails11_1 := 'PDF(2.0): ' + pdfF1 + ', Expected: ' + expPdfF1;\r\ndetails11_2 := 'PDF(2.0): ' + pdfF2 + ', Expected: ' + expPdfF2;\r\ndetails11_3 := 'Cumulative F: ' + cumF1 + ', Expected: ' + expCumF1;\r\ndetails11_4 := 'Cumulative F: ' + cumF2 + ', Expected: ' + expCumF2;\r\ntest11_1 := DATASET([{'TEST11_1 -- F-Distr PDF(1)', errors11_1, details11_1}], TestRec);\r\ntest11_2 := DATASET([{'TEST11_2 -- F-Distr PDF(2)', errors11_2, details11_2}], TestRec);\r\ntest11_3 := DATASET([{'TEST11_3 -- F-Distr CDF(1)', errors11_3, details11_3}], TestRec);\r\ntest11_4 := DATASET([{'TEST11_4 -- F-Distr CDF(2)', errors11_4, details11_4}], TestRec);\r\ntest11_5 := DATASET([{'TEST11_5 -- Beta(4, 2084)', 0, 'Beta val: ' + math.Beta(4, 2084)}], TestRec);\r\n\r\nsummary :=    test1_1 + test1_2\r\n            + test2_1_1 + test2_1_2 + test2_2_1 + test2_2_2 + test2_3_1 + test2_3_2 + test2_4_1 + test2_4_2\r\n            + test2_5_1 + test2_5_2 + test2_6_1 + test2_6_2 + test2_7_1 + test2_7_2 + test2_8_1 + test2_8_2\r\n            + test2_9_1 + test2_9_2 + test2_10_1 + test2_10_2\r\n            + test3_1 + test3_2\r\n            + test4_1 + test4_2\r\n            + test5_1 + test5_2\r\n            + test6_1 + test6_2\r\n            + test7_1 + test7_2\r\n            + test8_1_1 + test8_1_2 + test8_2_1 + test8_2_2\r\n            + test9_1 + test9_2\r\n            + test10_1 + test10_2 + test10_3 + test10_4 + test10_5 + test10_6\r\n            + test11_1 + test11_2 + test11_3 + test11_4 + test11_5;\r\n\r\n\r\nOLSAnalytics := summary;\r\n//OUTPUT(OLSAnalytics);","W20190906-204926":"IMPORT linearregression as LROLS;\r\nIMPORT ML_Core;\r\nIMPORT ML_Core.Types as mlTypes;\r\nIMPORT PBblas;\r\nIMPORT PBBlas.test.MakeTestMatrix as tm;\r\nIMPORT PBBlas.Types as pbbTypes;\r\nIMPORT PBBlas.Converted as pbbConverted;\r\nIMPORT ML_Core.Math as Math;\r\nLayout_Cell := pbbTypes.Layout_Cell;\r\nNumericField := mlTypes.NumericField;\r\ntwo31 := POWER(2, 31);  // 2**31\r\n\r\nepsilon := .000001;  // Allowable error\r\n\r\nREAL Noise(maxv=.1) := FUNCTION\r\n  out := ((RANDOM()-two31)%1000000)/(1000000/maxv);\r\n  return out;\r\nEND;\r\n\r\n// Create a multiple linear regression with 3 independents, and also multi-variate\r\n// with three dependents.\r\ncompX := RECORD\r\n  REAL wi;\r\n  REAL id;\r\n  REAL X1;\r\n  REAL X2;\r\n  REAL X3;\r\nEND;\r\ncompX makeComposite(Layout_Cell l, DATASET(Layout_Cell) r) := TRANSFORM\r\n  SELF.wi := l.wi_id;\r\n  SELF.id := l.x;\r\n  SELF.X1 := r(y=1)[1].v;\r\n  SELF.X2 := r(y=2)[1].v;\r\n  SELF.X3 := r(y=3)[1].v;\r\nEND;\r\n// Generation coefficients for Y1 and Y2\r\nA1_1 := -1.8;\r\nA2_1 := -.333;\r\nA3_1 := 1.13;\r\nB_1 := -3.333;\r\n// Generation coefficients for Y3\r\nA1_2 := .0013;\r\nA2_2 := -.123;\r\nA3_2 := .00015;\r\nB_2 := -5.01;\r\n\r\nN := 50;\r\nM := 3;\r\n\r\nmX := tm.RandomMatrix(N, M, 1.0, 2);\r\n\r\nX := pbbConverted.MatrixToNF(mX);\r\ngX := GROUP(mX, x, ALL);\r\ncX := ROLLUP(gX,  GROUP, makeComposite(LEFT, ROWS(LEFT)));\r\nLayout_Cell makeY(compX X, UNSIGNED c) := TRANSFORM\r\n  SELF.x := X.id;\r\n  SELF.y := IF(c=1, 1, 3);  // Make Y1 and Y3.  Y2 will be a copy of Y1,\r\n  SELF.wi_id := X.wi;\r\n  v1 := A1_1 * X.X1 + A2_1 * X.X2 + A3_1 * X.X3 + B_1 + Noise(1);\r\n  v2 := A1_2 * X.X1 + A2_2 * X.X2 + A3_2 * X.X3 + B_2 + Noise(10000);\r\n  SELF.v := IF(c=1, v1, v2);\r\nEND;\r\n// Make 2 Y variables.  One with more noise than the other and different coefficients\r\nmY := NORMALIZE(cX, 2, makeY(LEFT, COUNTER));\r\n// Now copy Y1 to Y2\r\nLayout_Cell make_Y2(Layout_Cell y_cell) := TRANSFORM\r\n  SELF.y := IF(y_cell.y = 1, 2, SKIP);\r\n  SELF   := y_cell\r\nEND;\r\nmY2 := PROJECT(mY, make_Y2(LEFT));\r\nmY3 := mY + mY2;\r\nY := pbbConverted.MatrixToNF(mY3);\r\n\r\n// Create a regression with 3 independents and 3 dependents\r\nlr := LROLS.OLS(X, Y);\r\n\r\n// Test analytic functions starting with the most independent attributes, and working up\r\n// from there\r\n\r\n// Test //OUTPUT format\r\nTestRec := RECORD\r\n  STRING32 testname;\r\n  UNSIGNED errors;\r\n  STRING   details;\r\nEND;\r\n\r\nINTEGER testSame(REAL8 v, REAL8 expected) := FUNCTION\r\n err := IF(ABS((v - expected)/expected) < epsilon, 0, 1);\r\n return err;\r\nEND;\r\nINTEGER testDiff(REAL8 v, REAL8 expected) := FUNCTION\r\n err := IF(ABS((v - expected)/expected) >= epsilon, 0, 1);\r\n return err;\r\nEND;\r\n\r\n\r\n\r\n\r\n// TEST01 -- R Squared\r\nRsq := lr.RSquared;\r\nRsq1 := Rsq(number=1)[1].RSquared;\r\nRsq2 := Rsq(number=2)[1].RSquared;\r\nRsq3 := Rsq(number=3)[1].RSquared;\r\nerrors1_1 := testSame(Rsq1, Rsq2);\r\nerrors1_2 := testDiff(Rsq1, Rsq3);\r\ndetails1_1 := 'Rsq1: ' + Rsq1 + ', Rsq2: ' + Rsq2;\r\ndetails1_2 := 'Rsq1: ' + Rsq1 + ', Rsq3: ' + Rsq3;\r\ntest1_1 := DATASET([{'TEST1_1 -- R Squared(1 vs 2)', errors1_1, details1_1}], TestRec);\r\ntest1_2 := DATASET([{'TEST1_2 -- R Squared(1 vs 3)', errors1_2, details1_2}], TestRec);\r\n\r\n// TEST02 -- ANOVA\r\nan := lr.Anova;\r\nan1 := an(number=1)[1];\r\nan2 := an(number=2)[1];\r\nan3 := an(number=3)[1];\r\ntotalSS1 := an1.Total_SS;\r\ntotalSS2 := an2.Total_SS;\r\ntotalSS3 := an3.Total_SS;\r\nmodelSS1 := an1.Model_SS;\r\nmodelSS2 := an2.Model_SS;\r\nmodelSS3 := an3.Model_SS;\r\nerrorSS1 := an1.Error_SS;\r\nerrorSS2 := an2.Error_SS;\r\nerrorSS3 := an3.Error_SS;\r\ntotalDF1 := an1.Total_DF;\r\ntotalDF2 := an2.Total_DF;\r\ntotalDF3 := an3.Total_DF;\r\nmodelDF1 := an1.Model_DF;\r\nmodelDF2 := an2.Model_DF;\r\nmodelDF3 := an3.Model_DF;\r\nerrorDF1 := an1.Error_DF;\r\nerrorDF2 := an2.Error_DF;\r\nerrorDF3 := an3.Error_DF;\r\ntotalMS1 := an1.Total_MS;\r\ntotalMS2 := an2.Total_MS;\r\ntotalMS3 := an3.Total_MS;\r\nmodelMS1 := an1.Model_MS;\r\nmodelMS2 := an2.Model_MS;\r\nmodelMS3 := an3.Model_MS;\r\nerrorMS1 := an1.Error_MS;\r\nerrorMS2 := an2.Error_MS;\r\nerrorMS3 := an3.Error_MS;\r\nmodelF1  := an1.Model_F;\r\nmodelF2  := an2.Model_F;\r\nmodelF3 := an3.Model_F;\r\n// 2_1 Total_SS\r\nerrors2_1_1 := testSame(TotalSS1, TotalSS2);\r\nerrors2_1_2 := testDiff(TotalSS1, TotalSS3);\r\ndetails2_1_1 := 'totalSS1: ' + totalSS1 + ', totalSS2: ' + totalSS2;\r\ndetails2_1_2 := 'totalSS1: ' + totalSS2 + ', totalSS3: ' + totalSS3;\r\ntest2_1_1 := DATASET([{'TEST2_1_1 -- Total_SS (1 vs 2)', errors2_1_1, details2_1_1}], TestRec);\r\ntest2_1_2 := DATASET([{'TEST2_1_2 -- Total_SS (1 vs 3)', errors2_1_2, details2_1_2}], TestRec);\r\n// 2_2 Model_SS\r\nerrors2_2_1 := testSame(modelSS1, ModelSS2);\r\nerrors2_2_2 := testDiff(modelSS1, modelSS3);\r\ndetails2_2_1 := 'modelSS1: ' + modelSS1 + ', modelSS2: ' + modelSS2;\r\ndetails2_2_2 := 'modelSS1: ' + modelSS2 + ', modelSS3: ' + modelSS3;\r\ntest2_2_1 := DATASET([{'TEST2_2_1 -- Model_SS (1 vs 2)', errors2_2_1, details2_2_1}], TestRec);\r\ntest2_2_2 := DATASET([{'TEST2_2_2 -- Model_SS (1 vs 3)', errors2_2_2, details2_2_2}], TestRec);\r\n// 2_3 Error_SS\r\nerrors2_3_1 := testSame(errorSS1, errorSS2);\r\nerrors2_3_2 := testDiff(errorSS1, errorSS3);\r\ndetails2_3_1 := 'errorSS1: ' + errorSS1 + ', errorSS2: ' + errorSS2;\r\ndetails2_3_2 := 'errorSS1: ' + errorSS2 + ', errrorSS3: ' + errorSS3;\r\ntest2_3_1 := DATASET([{'TEST2_3_1 -- Error_SS (1 vs 2)', errors2_3_1, details2_3_1}], TestRec);\r\ntest2_3_2 := DATASET([{'TEST2_3_2 -- Error_SS (1 vs 3)', errors2_3_2, details2_3_2}], TestRec);\r\n// 2_4 Total_DF\r\n// Note: for DF, only verify that all are the same\r\nerrors2_4_1 := testSame(TotalDF1, TotalDF2);\r\nerrors2_4_2 := testSame(TotalDF1, TotalDF3);\r\ndetails2_4_1 := 'totalDF1: ' + totalDF1 + ', totalDF2: ' + totalDF2;\r\ndetails2_4_2 := 'totalDF1: ' + totalDF2 + ', totalDF3: ' + totalDF3;\r\ntest2_4_1 := DATASET([{'TEST2_4_1 -- Total_DF (1 vs 2)', errors2_4_1, details2_4_1}], TestRec);\r\ntest2_4_2 := DATASET([{'TEST2_4_2 -- Total_DF (1 vs 3)', errors2_4_2, details2_4_2}], TestRec);\r\n// 2_5 Model_DF\r\nerrors2_5_1 := testSame(modelDF1, ModelDF2);\r\nerrors2_5_2 := testSame(modelDF1, modelDF3);\r\ndetails2_5_1 := 'modelDF1: ' + modelDF1 + ', modelDF2: ' + modelDF2;\r\ndetails2_5_2 := 'modelDF1: ' + modelDF2 + ', modelDF3: ' + modelDF3;\r\ntest2_5_1 := DATASET([{'TEST2_5_1 -- Model_DF (1 vs 2)', errors2_5_1, details2_5_1}], TestRec);\r\ntest2_5_2 := DATASET([{'TEST2_5_2 -- Model_DF (1 vs 3)', errors2_5_2, details2_5_2}], TestRec);\r\n// 2_6 Error_DF\r\nerrors2_6_1 := testSame(errorDF1, errorDF2);\r\nerrors2_6_2 := testSame(errorDF1, errorDF3);\r\ndetails2_6_1 := 'errorDF1: ' + errorDF1 + ', errorDF2: ' + errorDF2;\r\ndetails2_6_2 := 'errorDF1: ' + errorDF2 + ', errrorDF3: ' + errorDF3;\r\ntest2_6_1 := DATASET([{'TEST2_6_1 -- Error_DF (1 vs 2)', errors2_6_1, details2_6_1}], TestRec);\r\ntest2_6_2 := DATASET([{'TEST2_6_2 -- Error_DF (1 vs 3)', errors2_6_2, details2_6_2}], TestRec);\r\n// 2_7 Total_MS\r\nerrors2_7_1 := testSame(TotalMS1, TotalMS2);\r\nerrors2_7_2 := testDiff(TotalMS1, TotalMS3);\r\ndetails2_7_1 := 'totalMS1: ' + totalMS1 + ', totalMS2: ' + totalMS2;\r\ndetails2_7_2 := 'totalMS1: ' + totalMS2 + ', totalMS3: ' + totalMS3;\r\ntest2_7_1 := DATASET([{'TEST2_7_1 -- Total_MS (1 vs 2)', errors2_7_1, details2_7_1}], TestRec);\r\ntest2_7_2 := DATASET([{'TEST2_7_2 -- Total_MS (1 vs 3)', errors2_7_2, details2_7_2}], TestRec);\r\n// 2_8 Model_MS\r\nerrors2_8_1 := testSame(modelMS1, ModelMS2);\r\nerrors2_8_2 := testDiff(modelMS1, modelMS3);\r\ndetails2_8_1 := 'modelMS1: ' + modelMS1 + ', modelMS2: ' + modelMS2;\r\ndetails2_8_2 := 'modelMS1: ' + modelMS2 + ', modelMS3: ' + modelMS3;\r\ntest2_8_1 := DATASET([{'TEST2_8_1 -- Model_MS (1 vs 2)', errors2_8_1, details2_8_1}], TestRec);\r\ntest2_8_2 := DATASET([{'TEST2_8_2 -- Model_MS (1 vs 3)', errors2_8_2, details2_8_2}], TestRec);\r\n// 2_9 Error_MS\r\nerrors2_9_1 := testSame(errorMS1, errorMS2);\r\nerrors2_9_2 := testDiff(errorMS1, errorMS3);\r\ndetails2_9_1 := 'errorMS1: ' + errorMS1 + ', errorMS2: ' + errorMS2;\r\ndetails2_9_2 := 'errorSS1: ' + errorMS2 + ', errrorMS3: ' + errorMS3;\r\ntest2_9_1 := DATASET([{'TEST2_9_1 -- Error_MS (1 vs 2)', errors2_9_1, details2_9_1}], TestRec);\r\ntest2_9_2 := DATASET([{'TEST2_9_2 -- Error_MS (1 vs 3)', errors2_9_2, details2_9_2}], TestRec);\r\n// 2_10 Model_F\r\nerrors2_10_1 := testSame(modelF1, modelF2);\r\nerrors2_10_2 := testDiff(modelF1, modelF3);\r\ndetails2_10_1 := 'modelF1: ' + modelF1 + ', modelF2: ' + modelF2;\r\ndetails2_10_2 := 'modelF1: ' + modelF1 + ', modelF3: ' + modelF3;\r\ntest2_10_1 := DATASET([{'TEST2_10_1 -- Model_F (1 vs 2)', errors2_10_1, details2_10_1}], TestRec);\r\ntest2_10_2 := DATASET([{'TEST2_10_2 -- Model_F (1 vs 3)', errors2_10_2, details2_10_2}], TestRec);\r\n\r\n\r\n// TEST03 -- Adjusted R Squared\r\naRsq := lr.AdjRSquared;\r\naRsq1 := aRsq(number=1)[1].RSquared;\r\naRsq2 := aRsq(number=2)[1].RSquared;\r\naRsq3 := aRsq(number=3)[1].RSquared;\r\ndetails3_1 := 'adjRsq1: ' + aRsq1 + ', adjRsq2: ' + aRsq2;\r\ndetails3_2 := 'adjRsq1: ' + aRsq1 + ', adjRsq3: ' + aRsq3;\r\nerrors3_1 := testSame(aRsq1, aRsq2);\r\nerrors3_2 := testDiff(aRsq1, aRsq3);\r\ntest3_1 := DATASET([{'TEST3_1 -- Adjusted R Squared(1 vs 2)', errors3_1, details3_1}], TestRec);\r\ntest3_2 := DATASET([{'TEST3_2 -- AdjustedR Squared(1 vs 3)', errors3_2, details3_2}], TestRec);\r\n\r\n// TEST04 -- Standard Error\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\nse := lr.SE;\r\nOUTPUT(se);\r\nse1 := se(number=1 AND id=4)[1].value;\r\nse2 := se(number=2 AND id=4)[1].value;\r\nse3 := se(number=3 AND id=4)[1].value;\r\ndetails4_1 := 'SE1: ' + se1 + ', SE2: ' + se2;\r\ndetails4_2 := 'SE1: ' + se1 + ', SE3: ' + se3;\r\nerrors4_1 := testSame(se1, se2);\r\nerrors4_2 := testDiff(se1, se3);\r\ntest4_1 := DATASET([{'TEST4_1 -- Standard Error(1 vs 2)', errors4_1, details4_1}], TestRec);\r\ntest4_2 := DATASET([{'TEST4_2 -- Standard Error(1 vs 3)', errors4_2, details4_2}], TestRec);\r\n\r\n// TEST05 -- Tstat\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\nts := lr.Tstat;\r\nts1 := ts(number=1 AND id=4)[1].value;\r\nts2 := ts(number=2 AND id=4)[1].value;\r\nts3 := ts(number=3 AND id=4)[1].value;\r\ndetails5_1 := 'Tstat1: ' + ts1 + ', Tstat2: ' + ts2;\r\ndetails5_2 := 'Tstat1: ' + ts1 + ', Tstat3: ' + ts3;\r\nerrors5_1 := testSame(ts1, ts2);\r\nerrors5_2 := testDiff(ts1, ts3);\r\ntest5_1 := DATASET([{'TEST5_1 -- Tstat(1 vs 2)', errors5_1, details5_1}], TestRec);\r\ntest5_2 := DATASET([{'TEST5_2 -- Tstat(1 vs 3)', errors5_2, details5_2}], TestRec);\r\n\r\n// TEST06 -- P-val\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\npv := lr.Pval;\r\npv1 := pv(number=1 AND id=4)[1].value;\r\npv2 := pv(number=2 AND id=4)[1].value;\r\npv3 := pv(number=3 AND id=4)[1].value;\r\ndetails6_1 := 'Pval1: ' + pv1 + ', Pval2: ' + pv2;\r\ndetails6_2 := 'Pval1: ' + pv1 + ', Pval3: ' + pv3;\r\nerrors6_1 := testSame(pv1, pv2);\r\nerrors6_2 := testDiff(pv1, pv3);\r\ntest6_1 := DATASET([{'TEST6_1 -- Pval (1 vs 2)', errors6_1, details6_1}], TestRec);\r\ntest6_2 := DATASET([{'TEST6_2 -- Pval (1 vs 3)', errors6_2, details6_2}], TestRec);\r\n\r\n// TEST07 -- AIC\r\naic := lr.AIC;\r\naic1 := aic(number=1)[1].aic;\r\naic2 := aic(number=2)[1].aic;\r\naic3 := aic(number=3)[1].aic;\r\nerrors7_1 := testSame(aic1, aic2);\r\nerrors7_2 := testDiff(aic1, aic3);\r\ndetails7_1 := 'AIC1: ' + aic1 + 'AIC2: ' + aic2;\r\ndetails7_2 := 'AIC1: ' + aic1 + 'AIC3: ' + aic3;\r\ntest7_1 := DATASET([{'TEST7_1 -- AIC (1 vs 2)', errors7_1, details7_1}], TestRec);\r\ntest7_2 := DATASET([{'TEST7_2 -- AIC (1 vs 3)', errors7_2, details7_2}], TestRec);\r\n\r\n// TEST08 -- Confidence Interval\r\n// Just test for coefficient 3.  If it works for that, it will work for the rest\r\nci := lr.Confint(95);\r\nli1 := ci(number=1 AND id=4)[1].LowerInt;\r\nli2 := ci(number=2 AND id=4)[1].LowerInt;\r\nli3 := ci(number=3 AND id=4)[1].LowerInt;\r\nui1 := ci(number=1 AND id=4)[1].UpperInt;\r\nui2 := ci(number=2 AND id=4)[1].UpperInt;\r\nui3 := ci(number=3 AND id=4)[1].UpperInt;\r\ndetails8_1_1 := 'LowerInt1: ' + li1 + ', LowerInt2: ' + li2;\r\ndetails8_1_2 := 'LowerInt1: ' + li1 + ', LowerInt3: ' + li3;\r\ndetails8_2_1 := 'UpperInt1: ' + ui1 + ', UpperInt2: ' + ui2;\r\ndetails8_2_2 := 'UpperInt1: ' + ui1 + ', UpperInt3: ' + ui3;\r\nerrors8_1_1 := testSame(li1, li2);\r\nerrors8_1_2 := testDiff(li1, li3);\r\nerrors8_2_1 := testSame(ui1, ui2);\r\nerrors8_2_2 := testDiff(ui1, ui3);\r\ntest8_1_1 := DATASET([{'TEST8_1_1 -- Conf Int Lower (1 vs 2)', errors8_1_1, details8_1_1}], TestRec);\r\ntest8_1_2 := DATASET([{'TEST8_1_2 -- Conf Int Lower (1 vs 3)', errors8_1_2, details8_1_2}], TestRec);\r\ntest8_2_1 := DATASET([{'TEST8_2_1 -- Conf Int Upper (1 vs 2)', errors8_2_1, details8_2_1}], TestRec);\r\ntest8_2_2 := DATASET([{'TEST8_2_2 -- Conf Int Upper (1 vs 3)', errors8_2_2, details8_2_2}], TestRec);\r\n\r\n// TEST09 -- FTest\r\nft := lr.Ftest;\r\nft1 := ft(number=1)[1].pValue;\r\nft2 := ft(number=2)[1].pValue;\r\nft3 := ft(number=3)[1].pValue;\r\nerrors9_1 := testSame(ft1, ft2);\r\nerrors9_2 := testDiff(ft1, ft3);\r\ndetails9_1 := 'Ftest1: ' + ft1 + ', Ftest2: ' + ft2;\r\ndetails9_2 := 'Ftest1: ' + ft1 + ', Ftest3: ' + ft3;\r\ntest9_1 := DATASET([{'TEST9_1 -- Ftest Pvalue (1 vs 2)', errors9_1, details9_1}], TestRec);\r\ntest9_2 := DATASET([{'TEST9_2 -- Ftest Pvalue (1 vs 3)', errors9_2, details9_2}], TestRec);\r\n\r\n// TEST10 -- T Distribution\r\n\r\ntdist1 := lr.TDistribution(10);\r\npdfT1 := tdist1.density(2.0);\r\ncumT1 := tdist1.cumulative(2.0);\r\ntdist2 := lr.TDistribution(4168);\r\npdfT2   := tdist2.density(2.0);\r\ncumT2 := tdist2.cumulative(2.0);\r\nexpPdfT1 := 0.061145766321218202;\r\nexpPdfT2 := 0.054013619512625885;\r\nexpCumT1 := 0.96330598261462974;\r\nexpCumT2 := 0.97721748014745291;\r\ntval1 := tdist1.Ntile(expCumT1);\r\ntval2 := tdist2.Ntile(expCumT2);\r\nexpTval1 := 2.0;\r\nexpTval2 := 2.0;\r\nerrors10_1 := testSame(pdfT1, expPdfT1);\r\nerrors10_2 := testSame(pdfT2, expPdfT2);\r\nerrors10_3 := testSame(cumT1, expCumT1);\r\nerrors10_4 := testSame(cumT2, expCumT2);\r\nerrors10_5 := testSame(tval1, expTval1);\r\nerrors10_6 := testSame(tval2, expTval2);\r\ndetails10_1 := 'T PDF(2)[10]: ' + pdfT1 + ', Expected: ' + expPdfT1;\r\ndetails10_2 := 'T PDF(2)[4168]: ' + pdfT2 + ', Expected: ' + expPdfT2;\r\ndetails10_3 := 'Cumulative T: ' + cumT1 + ', Expected: ' + expCumT1;\r\ndetails10_4 := 'Cumulative T: ' + cumT2 + ', Expected: ' + expCumT2;\r\ndetails10_5 := 'T value: ' + tval1 + ', Expected: ' + expTval1;\r\ndetails10_6 := 'T value: ' + tval2 + ', Expected: ' + expTval2;\r\ntest10_1 := DATASET([{'TEST10_1 -- T-Distr PDF(1)(2.0)', errors10_1, details10_1}], TestRec);\r\ntest10_2 := DATASET([{'TEST10_2 -- T-Distr PDF(2)(2.0)', errors10_2, details10_2}], TestRec);\r\ntest10_3 := DATASET([{'TEST10_3 -- T-Distr CDF(1)', errors10_3, details10_3}], TestRec);\r\ntest10_4 := DATASET([{'TEST10_4 -- T-Distr CDF(2)', errors10_4, details10_4}], TestRec);\r\ntest10_5 := DATASET([{'TEST10_5 -- T-Distr Inv CDF(1)', errors10_5, details10_5}], TestRec);\r\ntest10_6 := DATASET([{'TEST10_6 -- T-Distr Inv CDF(2)', errors10_6, details10_6}], TestRec);\r\n\r\n// TEST11 -- F Distribution\r\nfdist1 := lr.FDistribution(5, 10);\r\nfdist2 := lr.FDistribution(8, 4168);\r\npdfF1 := fdist1.Density(2.0);\r\npdfF2 := fdist2.Density(2.0);\r\ncumF1 := fdist1.cumulative(2.0);\r\ncumF2 := fdist2.cumulative(2.0);\r\nexpPdfF1 := 0.16200574218011515;\r\nexpPdfF2 := 0.11483341094261676;\r\nexpCumF1 := 0.83580504910026132;\r\nexpCumF2 := 0.95734506461383584;\r\nerrors11_1 := testSame(pdfF1, expPdfF1);\r\nerrors11_2 := testSame(pdfF2, expPdfF2);\r\nerrors11_3 := testSame(cumF1, expCumF1);\r\nerrors11_4 := testSame(cumF2, expCumF2);\r\ndetails11_1 := 'PDF(2.0): ' + pdfF1 + ', Expected: ' + expPdfF1;\r\ndetails11_2 := 'PDF(2.0): ' + pdfF2 + ', Expected: ' + expPdfF2;\r\ndetails11_3 := 'Cumulative F: ' + cumF1 + ', Expected: ' + expCumF1;\r\ndetails11_4 := 'Cumulative F: ' + cumF2 + ', Expected: ' + expCumF2;\r\ntest11_1 := DATASET([{'TEST11_1 -- F-Distr PDF(1)', errors11_1, details11_1}], TestRec);\r\ntest11_2 := DATASET([{'TEST11_2 -- F-Distr PDF(2)', errors11_2, details11_2}], TestRec);\r\ntest11_3 := DATASET([{'TEST11_3 -- F-Distr CDF(1)', errors11_3, details11_3}], TestRec);\r\ntest11_4 := DATASET([{'TEST11_4 -- F-Distr CDF(2)', errors11_4, details11_4}], TestRec);\r\ntest11_5 := DATASET([{'TEST11_5 -- Beta(4, 2084)', 0, 'Beta val: ' + math.Beta(4, 2084)}], TestRec);\r\n\r\nsummary :=    test1_1 + test1_2\r\n            + test2_1_1 + test2_1_2 + test2_2_1 + test2_2_2 + test2_3_1 + test2_3_2 + test2_4_1 + test2_4_2\r\n            + test2_5_1 + test2_5_2 + test2_6_1 + test2_6_2 + test2_7_1 + test2_7_2 + test2_8_1 + test2_8_2\r\n            + test2_9_1 + test2_9_2 + test2_10_1 + test2_10_2\r\n            + test3_1 + test3_2\r\n            + test4_1 + test4_2\r\n            + test5_1 + test5_2\r\n            + test6_1 + test6_2\r\n            + test7_1 + test7_2\r\n            + test8_1_1 + test8_1_2 + test8_2_1 + test8_2_2\r\n            + test9_1 + test9_2\r\n            + test10_1 + test10_2 + test10_3 + test10_4 + test10_5 + test10_6\r\n            + test11_1 + test11_2 + test11_3 + test11_4 + test11_5;\r\n\r\n\r\nOLSAnalytics := summary;\r\n//OUTPUT(OLSAnalytics);","W20190906-202418":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190906-200123":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190906-195412":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2015 := DATASET('~erm::crimes_sp::bo_2015',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_2016 := DATASET('~erm::crimes_sp::bo_2016',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\nclean_2015\t:=\tPROJECT(dirty_2015,dataCleaner(LEFT));\r\nclean_2016\t:=\tPROJECT(dirty_2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);\r\nOUTPUT(clean_2015,,\t'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,\t'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190906-192641-4":"IMPORT STD.DataPatterns;\nfilePath := '~jj2::Test::Popular_Baby_Names.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190906-192140":"IMPORT STD.DataPatterns;\nfilePath := '~jj2::Test::Popular_Baby_Names.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190906-192540-4":"IMPORT STD.DataPatterns;\nfilePath := '~jj2::Test::Popular_Baby_Names.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190906-191827-4":"IMPORT STD.DataPatterns;\nfilePath := '~jj2::Test::acknowledgement.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190906-191600":"IMPORT $,STD;\r\n\r\ndirty_data := $.unprocessed_bo.File;\r\n\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_data := PROJECT(dirty_data,dataCleaner(LEFT));\r\nOUTPUT(clean_data,'erm::crimes_sp::clean::bo',OVERWRITE);","W20190906-191638":"IMPORT $,STD;\r\n\r\ndirty_data := $.unprocessed_bo.File;\r\n\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_data := PROJECT(dirty_data,dataCleaner(LEFT));\r\nOUTPUT(clean_data,,'erm::crimes_sp::clean::bo',OVERWRITE);","W20190906-190927":"IMPORT $,STD;\r\n\r\ndirty_data := $.unprocessed_bo.File;\r\n\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_data := PROJECT(dirty_data,dataCleaner(LEFT));\r\nOUTPUT(clean_data);","W20190906-190757":"IMPORT $,STD;\r\n\r\ndirty_data := $.unprocessed_bo.File;\r\n\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := (INTEGER)d_info.NUMERO_LOGRADOURO;\r\n\tSELF.DESCR_TIPO_PESSOA := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA),'');\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_data := PROJECT(dirty_data,dataCleaner(LEFT));\r\nOUTPUT(clean_data);","W20190906-190100":"IMPORT $,STD;\r\n\r\ndirty_data := $.unprocessed_bo.File;\r\n\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO);\r\n\tSELF.NOME_SECCIONAL := STD.Str.ToUpperCase(d_info.NOME_SECCIONAL);\r\n\tSELF.DELEGACIA := STD.Str.ToUpperCase(d_info.DELEGACIA);\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC);\r\n\tSELF.NOME_SECCIONAL_CIRC := STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC);\r\n\tSELF.NOME_DELEGACIA_CIRC := STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC);\r\n\tSELF.ANO := (INTEGER)d_info.ANO;\r\n\tSELF.MES := (INTEGER)d_info.MES;\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),4294967295);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),65535);\r\n\tSELF.FLAG_STATUS := STD.Str.ToUpperCase(d_info.FLAG_STATUS);\r\n\tSELF.RUBRICA := STD.Str.ToUpperCase(d_info.RUBRICA);\r\n\tSELF.DESDOBRAMENTO := STD.Str.ToUpperCase(d_info.DESDOBRAMENTO);\r\n\tSELF.CONDUTA := STD.Str.ToUpperCase(d_info.CONDUTA);\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := STD.Str.ToUpperCase(d_info.CIDADE);\r\n\tSELF.LOGRADOURO := STD.Str.ToUpperCase(d_info.LOGRADOURO);\r\n\tSELF.NUMERO_LOGRADOURO := (INTEGER)d_info.NUMERO_LOGRADOURO;\r\n\tSELF.DESCR_TIPO_PESSOA := STD.Str.ToUpperCase(d_info.DESCR_TIPO_PESSOA);\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := STD.Str.ToUpperCase(d_info.SEXO_PESSOA);\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := STD.Str.ToUpperCase(d_info.COR);\r\n\tSELF.DESCR_PROFISSAO := STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO);\r\n\tSELF.DESCR_GRAU_INSTRUCAO := STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO);\r\nEND;\r\n\r\nclean_data := PROJECT(dirty_data,dataCleaner(LEFT));\r\nOUTPUT(clean_data);","W20190906-174159":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  string11   precipintensity;\n  INTEGER trend;\nEND;\n\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(trainData, NFtrain);\n\n//Independent and Dependent data\nDStrainInd := NFtrain(number < 4);\nDStrainDpt := PROJECT(NFtrain(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(DStrainInd, DStrainDpt);\n\n//Prediction\npredict_bi := LR.BinomialLogisticRegression().Classify(mod_bi, DStrainInd);\nOUTPUT(predict_bi);","W20190906-174040":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-174004":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-174140":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-173920":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-173731":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-173039":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 OR date > 20140501 );\nOUTPUT(validSet);\n","W20190906-173112":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-172816":"IMPORT STD;\n\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190906-172852":"IMPORT STD;\n\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190906-171741":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190906-162727":"IMPORT STD;\n\n//Reading Taxi_Weather Data\nEXPORT A_Data_Ingestion := MODULE\n\nEXPORT Layout := RECORD\n  STD.Date.Date_t date;\n  string11 precipintensity;\n  INTEGER3 trip_counts;\nEND;\n\nEXPORT raw := DATASET('~asdf::TaxiTrip3::NY_SampleInput.csv_thor', Layout, THOR);\n\nEND;\n","W20190906-162735":"IMPORT STD;\nIMPORT DataPatterns;\nIMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190906-162655":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::TaxiTrip3::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::TaxiTrip3::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190906-162351":"IMPORT STD;\nIMPORT DataPatterns;\nIMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190906-162330":"IMPORT DataPatterns;\nIMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190906-162310":"IMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190906-155012":"NySampleinput:= RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);\noutput(DS(date=20150106));","W20190906-160658":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::TaxiTrip3::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::TaxiTrip3::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190906-155616":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-154557":"NySampleinput:= RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);\noutput(DS(date=20150106));","W20190906-154534":"NySampleinput:= RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);\noutput(DS(date=20150106));","W20190906-154518":"NySampleinput:= RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\n//OUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);\noutput(DS(date=20150106));","W20190906-154210":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190906-154138":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190906-133056":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190906-154108":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190906-132242":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-220451":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-220339":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-220211":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-215312":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-215256":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-212644":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-212631":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-212219":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-212512":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-212205":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-221642":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-212141":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-212022":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-211617":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-211643":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-210614":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-210503":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-210826":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-210344":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-210133":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-205549":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-205905":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-205106":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-205243":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-201750":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-194453":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-194611":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-194220":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-192819":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-192436":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-192349":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-192049":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-191959":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-191700":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-191045":"IMPORT $;\r\n\r\nMax_BO\t\t\t\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NUM_BO));\r\n//ANO_BO\r\nMax_ID_Delegacia\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.ID_DELEGACIA));\r\nMax_Nome_Departamento\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NOME_DEPARTAMENTO));\r\nMax_Nome_Seccional\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NOME_SECCIONAL));\r\nMax_Delegacia\t\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.DELEGACIA));\r\nMax_NOME_DEPARTAMENTO_CIRC\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NOME_DEPARTAMENTO_CIRC));\r\nMax_NOME_SECCIONAL_CIRC\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NOME_SECCIONAL_CIRC));\r\nMax_NOME_DELEGACIA_CIRC\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NOME_DELEGACIA_CIRC));\r\n//ANO\r\n//MES\r\n//Data ocorrencia\r\n//Hora ocorrencia\r\n//Flag status\r\nMax_RUBRICA\t\t\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.RUBRICA));\r\nMax_DESDOBRAMENTO\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.DESDOBRAMENTO));\r\nMax_CONDUTA\t\t\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.CONDUTA));\r\n//Latitude\r\n//Longitude\r\nMax_CIDADE\t\t\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.CIDADE));\r\nMax_LOGRADOURO\t\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.LOGRADOURO));\r\nMax_NUMERO_LOGRADOURO\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NUMERO_LOGRADOURO));\r\nMax_DESCR_TIPO_PESSOA\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.DESCR_TIPO_PESSOA));\r\n//Cont Pessoa\r\n//Sexo pessoa\r\n//Idade pessoa\r\nMax_COR\t\t\t\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.COR));\r\nMax_DESCR_PROFISSAO\t\t\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.DESCR_PROFISSAO));\r\nMax_DESCR_GRAU_INSTRUCAO\t:=\tMAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.DESCR_GRAU_INSTRUCAO));\r\nresult_info := [Max_BO,Max_Id_Delegacia,Max_Nome_Departamento,Max_Nome_Seccional,Max_Delegacia,Max_NOME_DEPARTAMENTO_CIRC,\r\nMax_NOME_SECCIONAL_CIRC,Max_NOME_DELEGACIA_CIRC,Max_RUBRICA,Max_DESDOBRAMENTO,Max_CONDUTA,Max_CIDADE,Max_LOGRADOURO,Max_NUMERO_LOGRADOURO,\r\nMax_DESCR_TIPO_PESSOA,Max_COR,Max_DESCR_PROFISSAO,Max_DESCR_GRAU_INSTRUCAO];\r\nOUTPUT(result_info);","W20190905-185724":"IMPORT Std;\nIMPORT DataPatterns;\nIMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190905-183955":"IMPORT $;\r\n\r\nData_Info := MAX($.unprocessed_bo.File, LENGTH($.unprocessed_bo.File.NUM_BO));\r\nOUTPUT(Data_Info);","W20190905-183154":"IMPORT $;\r\n\r\nData_Info := MAX($.unprocessed_bo.File,$.unprocessed_bo.File.NUM_BO);\r\nOUTPUT(Data_Info);","W20190905-172738":"IMPORT $;\r\nOUTPUT($.unprocessed_bo.File);","W20190905-182338":"IMPORT $;\r\n\r\nData_Info := $.unprocessed_bo.File;\r\nOUTPUT(Data_Info);","W20190905-173826":"OUTPUT('Welcome');","W20190905-175235":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2007_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2007_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2008_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2008_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2009_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2009_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2010_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2010_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2011_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2011_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2012_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2012_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2013_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2013_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2014_1'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2014_2'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2015'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190905-165352":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190905-131551":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-130636":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190905-132527":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190905-095303":"IMPORT STD;\t\n///yyyyyyy\nfibRecord := RECORD\n\tINTEGER\t\t\tfib1 := 1;\n\tINTEGER\t\t\tfib2 := 1;\n\tINTEGER\t\t\tmycounter := 100;\n\tSTRING20\t\textra := 'xx';\nEND;\n\nfibTable := DATASET([{9},{8},{7},{6}],fibrecord);\n\nfibRecord makeFibs(fibRecord l, fibRecord r) := TRANSFORM\n\tSELF.fib1 := if(l.fib1=0,r.fib1,r.fib1 + l.fib1);\n\tSELF.fib2 := r.fib2 + l.fib1 + l.fib2;\n\tSELF.mycounter := l.mycounter + 1;\n\tSELF := r;\nEND;\n\ndoDisplay(STRING DispStr) := std.system.Log.addWorkunitInformation(DispStr);\n\nret := ITERATE(fibTable, makeFibs(LEFT, RIGHT));\nAPPLY(ret, \n\tdoDisplay((STRING)fib1 + ','),\n\tdoDisplay((STRING)fib2 + ','),\n\tdoDisplay((STRING)mycounter),\n\tdoDisplay(extra),\n\tBEFORE(doDisplay('Begin APPLY....')),\n\tAFTER(doDisplay('...End APPLY'))\n\t);\nOUTPUT(ret);\n","W20190904-204420":"IMPORT Std;\nIMPORT DataPatterns;\nIMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190904-204306":"IMPORT Std;\nIMPORT DataPatterns;\nIMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190904-204135":"IMPORT Std;\nIMPORT DataPatterns;\nIMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);","W20190904-204231":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-203909":"IMPORT STD.DataPatterns;\nfilePath := '~asdf::play::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190904-203908":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::play::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::play::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-163816":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190904-163804":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  string11   precipintensity;\n  INTEGER trend;\nEND;\n\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(trainData, NFtrain);\n\n//Independent and Dependent data\nDStrainInd := NFtrain(number < 4);\nDStrainDpt := PROJECT(NFtrain(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(DStrainInd, DStrainDpt);\n\n//Prediction\npredict_bi := LR.BinomialLogisticRegression().Classify(mod_bi, DStrainInd);\nOUTPUT(predict_bi);","W20190904-162538-2":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::TaxiTrip4::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190904-162307":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::TaxiTrip3::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::TaxiTrip3::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-162538":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip4::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip4::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-162248":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::TaxiTrip3::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::TaxiTrip3::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-161951":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::TaxiTrip3::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190904-161950":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip3::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip3::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-161348":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  string11   precipintensity;\n  INTEGER trend;\nEND;\n\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(trainData, NFtrain);\n\n//Independent and Dependent data\nDStrainInd := NFtrain(number < 4);\nDStrainDpt := PROJECT(NFtrain(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(DStrainInd, DStrainDpt);\n\n//Prediction\npredict_bi := LR.BinomialLogisticRegression().Classify(mod_bi, DStrainInd);\nOUTPUT(predict_bi);","W20190904-161632":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-161316":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  string11   precipintensity;\n  INTEGER trend;\nEND;\n\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(trainData, NFtrain);\n\n//Independent and Dependent data\nDStrainInd := NFtrain(number < 4);\nDStrainDpt := PROJECT(NFtrain(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(DStrainInd, DStrainDpt);\n\n//Prediction\npredict_bi := LR.BinomialLogisticRegression().Classify(mod_bi, DStrainInd);\nOUTPUT(predict_bi);","W20190904-161256":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  REAL8   precipintensity;\n  INTEGER trend;\nEND;\n\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(trainData, NFtrain);\n\n//Independent and Dependent data\nDStrainInd := NFtrain(number < 4);\nDStrainDpt := PROJECT(NFtrain(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(DStrainInd, DStrainDpt);\n\n//Prediction\npredict_bi := LR.BinomialLogisticRegression().Classify(mod_bi, DStrainInd);\nOUTPUT(predict_bi);","W20190904-161201":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190904-160950":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190904-160825":"IMPORT STD;\nIMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190904-160741":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, train);\nOUTPUT(train);\n\n// split into input (X) and output (Y) variables\nX := train(number < 4);\nY := train(number = 4);\n\n\n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict);\n","W20190904-160354":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 OR date > 20140501 );\nOUTPUT(validSet);\n","W20190904-160332":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 OR date > 20190501 );\nOUTPUT(validSet);\n","W20190904-160310":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date > 20180501 );\nOUTPUT(validSet);\n","W20190904-160258":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20180501 );\nOUTPUT(validSet);\n","W20190904-160156":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-155607":"IMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-155832":"IMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-155903":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-155912":"IMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-155516":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-155459":"IMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-155424":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);\n","W20190904-154944":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\n//OUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);\noutput(DS(date=20150106));","W20190904-154923":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);\noutput(DS(date=20150106));","W20190904-154910":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);\noutput(DS(date='20150106'));","W20190904-154818":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-154747-1":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::TaxiTrip::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190904-154747":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-154509-4":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::TaxiTrip::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190904-154509":"NySampleinput-JJ:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TaxiTrip::NY_SampleInput.csv',NySampleinput-JJ,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TaxiTrip::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190904-154205":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(FirstName = 'Joe');\n\n//  Outputs  ---\nsomePeople;\n","W20190904-154131":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190904-153855":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\nOUTPUT(SOMEpEOPLE)","W20190904-153927":"IMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);","W20190904-153840":"IMPORT A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( date < 20000101 AND date > 20190501 );\nOUTPUT(validSet);","W20190904-153651":"OUTPUT('test');","W20190904-153805":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190904-073750":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190904-151156":"IMPORT STD;\n\n//Reading Taxi_Weather Data\nEXPORT A_Data_Ingestion := MODULE\n\n  EXPORT Layout := RECORD\n    STD.Date.Date_t date;\n    REAL8 precipintensity;\n    INTEGER3 trip_counts;\n  END;\n\n  //Change the file name based on your username, workspace name and raw file name in below format:\n  //'~USERNMAE::WORKSPACENAME::RAWFILENAME'\n  //For example, if your usename is Mike and you created a worksplace 'HPCCSystems'.\n  //The raw file you uploaded is 'test.csv'.Then the file name inside the DATASET() function should be \n  //'~Mike::HPCCSystems::test.csv'\n  EXPORT raw := DATASET('~lily::ksu_workshop::ny_sampleinput.csv_thor', Layout, THOR);\n\nEND;","W20190904-153630":"OUTPUT('test');","W20190903-212650":"MyRec := RECORD\n\tSTRING1  Value1;\n\tSTRING1  Value2;\n\tINTEGER1 Value3;\nEND;\nSomeFile := DATASET([{'C','G',1},\n\t\t\t\t\t {'C','C',2},\n\t\t\t\t\t {'A','X',3},\n\t\t\t\t\t {'B','G',4},\n\t\t\t\t\t {'A','B',5}],MyRec);\nMyOutRec := RECORD\n\tSomeFile.Value1;\n\tGrpCount := COUNT(GROUP);\n\tGrpSum   := SUM(GROUP,SomeFile.Value3);\n\tAveSum   := AVE(GROUP,SomeFile.Value3);\nEND;\n\nMyTable := TABLE(SomeFile,MyOutRec,Value1);\n\n\nOUTPUT(MyTable);\n\n/* MyTable result set is:\n\tRec#\tValue1\tGrpCount\tGrpSum\n\t1\t\tC\t\t2\t\t\t3\n\t2\t\tA\t\t2\t\t\t8\n\t3\t\tB\t\t1\t\t\t4\n*/\n","W20190903-161222":"//run on hthor\n//If you are running without the Java plugin installed, you will get syntax errors\n\nIMPORT java;\n\nINTEGER add1(INTEGER val)  := IMPORT(java, 'JavaCat.add1:(I)I');\nSTRING add2(STRING val)    := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nSTRING add3(VARSTRING val) := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nUTF8 add4(UTF8 val)        := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nUNICODE add5(UNICODE val)  := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\n\nSTRING addChar(STRING c)         := IMPORT(java, 'JavaCat.addChar:(C)C');\nSTRING cat(STRING s1, STRING s2) := IMPORT(java, 'JavaCat.cat:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;');\nDATA testData(DATA indata)       := IMPORT(java, 'JavaCat.testData:([B)[B');\nINTEGER testArrays(SET OF BOOLEAN b, SET OF INTEGER2 s, SET OF INTEGER4 i, SET OF REAL8 d) \n                                 := IMPORT(java, 'JavaCat.testArrays:([Z[S[I[D)I');\nSET OF STRING testStringArray1(SET OF STRING s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF VARSTRING testStringArray2(SET OF VARSTRING s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF STRING8 testStringArray3(SET OF STRING8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF VARSTRING8 testStringArray4(SET OF VARSTRING8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UTF8 testStringArray5(SET OF UTF8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UNICODE8 testStringArray6(SET OF UNICODE8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UNICODE testStringArray7(SET OF UNICODE s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\n\nadd1(10);\nadd2('Hello');\nadd3('World');\nadd4(U'Leovenaðes');\nadd5(U'你好世界');\naddChar('A');\n\ncat('Hello', ' world');\n\ntestData(d'aa');\ntestArrays([true],[2,3],[4,5,6,7],[8.0,9.0]);\ntestArrays([],[],[],[]);\ntestStringArray1(['one', 'two', 'three']);\ntestStringArray2(['one', 'two', 'three']);\ntestStringArray3(['one', 'two', 'three']);\ntestStringArray4(['one', 'two', 'three']);\ntestStringArray5(['one', 'two', 'three']);\ntestStringArray6(['one', 'two', 'three']);\ntestStringArray7(['one', 'two', 'three']);\n\ns1 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER)));\ns2 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER/2)));\n SUM(NOFOLD(s1 + s2), a);\n\ns1a :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) add2((STRING)COUNTER)));\ns2a :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) add3((STRING)(COUNTER/2))));\n SUM(NOFOLD(s1a + s2a), a);\n\ns1b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := COUNTER+1));\ns2b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (COUNTER/2)+1));\n SUM(NOFOLD(s1b + s2b), a);\n\ns1c :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) ((STRING) COUNTER + '1')));\ns2c :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) ((STRING)(COUNTER/2) + '1')));\n SUM(NOFOLD(s1c + s2c), a);","W20190903-212545":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190903-160838":"/*\n    Example code - use without restriction.  \n*/\n\n'Hello and Welcome!';\n","W20190903-131837":"layout_visits := RECORD\n  STRING20 User;\n  STRING30 url;\n\tSTRING5 time;\nEND;\nvisits := DATASET([{'Bob','www.yahoo.com','11:30'},\n\t\t\t\t\t\t\t\t\t {'Fred','www.amazon.com','08:30'},\n\t\t\t\t\t\t\t\t\t {'Fred','www.amazon.com','09:30'},\n\t\t\t\t\t\t\t\t\t {'Fred','www.amazon.com','10:30'},\n\t\t\t\t\t\t\t\t\t {'Frank','www.amazon.com','11:31'},\n\t\t\t\t\t\t\t\t\t {'Fred','www.amazon.com','12:30'},\n\t\t\t\t\t\t\t\t\t {'Fred','www.amazon.com','21:30'},\n\t\t\t\t\t\t\t\t\t {'Fred','www.cnn.com','01:30'},\n\t\t\t\t\t\t\t\t\t {'Sara','www.yahoo.com','23:33'},\n\t\t\t\t\t\t\t\t\t {'Bob','www.amazon.com','11:30'},\n\t\t\t\t\t\t\t\t\t {'Bill','www.yahoo.com','07:30'}],layout_visits);\n\nlayout_urlInfo := RECORD\n  STRING30 url;\n  STRING20 category;\n\tSTRING3 pRank;\nEND;\n\nurlInfo := DATASET([{'www.yahoo.com','all','1'},\n\t\t\t\t\t\t\t\t\t\t{'www.cnn.com','news','2'},\n\t\t\t\t\t\t\t\t\t\t{'www.amazon.com','commerce','3'},\n\t\t\t\t\t\t\t\t\t\t{'www.lexisnexis.com','commerce','4'},\n\t\t\t\t\t\t\t\t\t\t{'www.msnbc.com','new','2'},\n\t\t\t\t\t\t\t\t\t\t{'www.hotwire.com','travel','5'}],layout_urlInfo);\n\n//Distribute Visits by URL, Count visits by URL\nlayout_visitCounts := RECORD\n  visits.url;\n  visits_cnt := COUNT(GROUP);\nEND;\n\nvisitcounts := TABLE(DISTRIBUTE(visits,HASH32(url)),\n                     layout_visitCounts,url,LOCAL);\n\n//Distribute Category by url, JOIN Category to URLs\nvisitCountsCat := JOIN(visitcounts,\n                       DISTRIBUTE(urlinfo,HASH32(url)),\n\t\t\t\t\t\t\t\t\t\t\t LEFT.URL=RIGHT.URL,LOCAL);\n\n//Distribute and group by category, Output top 10 URLs for each category\ntopUrls := TOPN(GROUP(DISTRIBUTE(visitCountsCat,HASH32(category)),\n                      category,\n\t\t\t\t\t\t\t\t      ALL,\n\t\t\t\t\t\t\t\t      LOCAL),\n\t\t\t\t\t\t\t\t10,\n\t\t\t\t\t\t\t\t-visits_cnt);\n\t\t\t\t\t\t\t\t\nOUTPUT(topurls);","W20190903-131753":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\n SomeFile := GROUP(DATASET([{'C','G'},\n   \t\t\t\t                \t {'C','C'},\n   \t\t\t\t\t                 {'A','X'},\n   \t\t\t\t\t                 {'B','G'},\n   \t\t\t\t\t                 {'A','B'}],MyRec),TRUE);\n\n\n\n\n\n\nDedup1 := DEDUP(SomeFile, \n                LEFT.Value2 IN ['G','C','X'] AND \n\t\t\t\t\t\t\t\tRIGHT.Value2 IN ['X','B','C'] ,ALL);\n\n/*\nProcesses as:\tLEFT   vs. \tRIGHT\n\t\t\t\t1 (G)\t\t2 (C)\t\t- lose 2 (RIGHT rec)\n\t\t\t\t1 (G)\t\t3 (X)\t\t- lose 3 (RIGHT rec)\n\t\t\t\t1 (G)\t\t4 (G)\t\t- keep RIGHT rec 4\n\t\t\t\t1 (G)\t\t5 (B)\t\t- lose 5 (RIGHT rec)\n\n\t\t\t\t4 (G)\t\t1 (G)\t\t- keep RIGHT rec 1 \n\nResult set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tG\n\t4\t\tB\t\tG\n*/\n\nDedup2 := DEDUP(SomeFile, \n                LEFT.Value2 IN ['G','C'] AND \n\t\t\t\t\t\t\t\tRIGHT.Value2 IN ['X','B'] ,ALL);\n\n/*\nProcesses as:\tLEFT   vs. \tRIGHT\n\t\t\t\t1 (G)\t\t2 (C)\t\t- keep RIGHT rec 2\n\t\t\t\t1 (G)\t\t3 (X)\t\t- lose 3 (RIGHT rec)\n\t\t\t\t1 (G)\t\t4 (G)\t\t- keep RIGHT rec 4\n\t\t\t\t1 (G)\t\t5 (B)\t\t- lose 5 (RIGHT rec)\n\n\t\t\t\t2 (C)\t\t1 (G)\t\t- keep RIGHT rec 1\n\t\t\t\t2 (C)\t\t4 (G)\t\t- keep RIGHT rec 4\n\n\t\t\t\t4 (G)\t\t1 (G)\t\t- keep RIGHT rec 1\n\t\t\t\t4 (G)\t\t2 (C)\t\t- keep RIGHT rec 2\n\nResult set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tG\n\t2\t\tC\t\tC\n\t4\t\tB\t\tG\n*/\n\nDedup3 := DEDUP(SomeFile, \n                LEFT.Value2 IN ['X','B'] AND \n\t\t\t\t\t\t\t\tRIGHT.Value2 IN ['G','C'],ALL);\n\n/*\nProcesses as:\tLEFT   vs. \tRIGHT\n\t\t\t\t1 (G)\t\t2 (C)\t\t- keep RIGHT rec 2\n\t\t\t\t1 (G)\t\t3 (X)\t\t- keep RIGHT rec 3 \n\t\t\t\t1 (G)\t\t4 (G)\t\t- keep RIGHT rec 4\n\t\t\t\t1 (G)\t\t5 (B)\t\t- keep RIGHT rec 5\n\n\t\t\t\t2 (C)\t\t1 (G)\t\t- keep RIGHT rec 1\n\t\t\t\t2 (C)\t\t3 (X)\t\t- keep RIGHT rec 3\n\t\t\t\t2 (C)\t\t4 (G)\t\t- keep RIGHT rec 4\n\t\t\t\t2 (C)\t\t5 (B)\t\t- keep RIGHT rec 5\n\n\t\t\t\t3 (X)\t\t1 (G)\t\t- lose 1 (RIGHT rec)\n\t\t\t\t3 (X)\t\t2 (C)\t\t- lose 2 (RIGHT rec)\n\t\t\t\t3 (X)\t\t4 (G)\t\t- lose 4 (RIGHT rec)\n\t\t\t\t3 (X)\t\t5 (B)\t\t- keep RIGHT rec 5\n\n\t\t\t\t5 (B)\t\t3 (X)\t\t- keep RIGHT rec 3\nResult set is:\n\tRec#\tValue1\tValue2\n\t3\t\tA\t\tX\n\t5\t\tA\t\tB\n*/\n\noutput(Dedup1);\noutput(Dedup2);\noutput(Dedup3);","W20190828-173243-4":"LAYOUT_COLORCODE:={STRING COLOR,UNSIGNED1 CODE};\nCOLORCODE:=DATASET([{'BLACK',0},\n                    {'WHITE',1},\n                    {'PINK',2},\n                    {'PURPLE',3},{'RED',4}],LAYOUT_COLORCODE);\nOUTPUT(COLORCODE);\nCODECOLOR:=DICTIONARY(COLORCODE,{CODE=>COLOR});\nOUTPUT(CODECOLOR);\n//OUTPUT(ROW({'RED',4},)LAYOUT_COLORCODE) IN CODECOLOR);\n\n\n/*ColorCodes := DATASET([{'Black' ,0 },\n{'Brown' ,1 },\n{'Red' ,2 },\n{'White' ,3 }], rec);\nCodeColorDCT := DICTIONARY(ColorCodes,{Code => Color});*/\n\n/*rec := {STRING color,UNSIGNED1 code};\nColorCodes := DATASET([{'Black' ,0 },\n{'Brown' ,1 },\n{'Red' ,2 },\n{'White' ,3 }], rec);\nCodeColorDCT := DICTIONARY(ColorCodes,{Code => Color});\nOUTPUT(6 IN CodeColorDCT); //false\nColorCodesDCT := DICTIONARY(ColorCodes,{Color,Code});\nOUTPUT(ROW({'Red',2},rec) IN ColorCodesDCT);*/","W20190828-003707":"IMPORT STD;\n\nEXPORT Layout_Persons := RECORD\n\tINTEGER4 RECID;\n\tSTRING15 FirstName;\n\tSTRING25 LastName;\n\tSTRING15 MiddleName;\n\tSTRING2 NameSuffix;\n    STRING8 FileDate;\n\tUNSIGNED2 BureauCode;\n\tSTRING1 MaritalStatus;\n\tSTRING1 Gender;\n\tUNSIGNED1 DependentCount;\n\tSTRING8 BirthDate;\n\tSTRING42 StreetAddress;\n\tSTRING20 City;\n\tSTRING2 State;\n\tSTRING5 ZipCode;\nEND;\n\n\n\nEXPORT Persons := DATASET('~ONLINE::RFC::Intro::Persons' ,Layout_Persons, THOR);\nLayout_Persons_UID := RECORD\n\n\tUNSIGNED4 UID:=0;\n\tLayout_Persons;\nEnd;\n\nPersonsTB1:= TABLE(Layout_Persons.PersonsLayout_Persons_UID);\nLayout_Persons_UID IDRecs(Layout_Persons_UID L,\n                        Layout_Persons_UID R):=TRANSFORM\n \tSELF.UID:=IF(L.UID=0,std.system.thorlib.node()+1,L.UID+CLUSTERSIZE);\n    SELF := R;\nEND;\n\nEXPORT UID_PersonsAlt:= ITERATE(PersonsTB1,IDrecs(LEFT,RIGHT),LOCAL)\n:PERSIST('~CLASS::RFC::PERSIST::UID_PersonsAlt');","W20190812-154521":"IMPORT $,STD;\r\n\r\nTYPEOF($.clean_review.Layout) takeIt($.clean_review.File l_data) := TRANSFORM\r\n\tSELF := l_data;\r\nEND;\r\n\r\nFetch_review(STRING input_date, STRING input_business_name) := FUNCTION\r\n\tdate_separators := './-';\r\n\thave_date := input_date != '';\r\n\thave_business := input_business_name != '';\r\n\tclear_date := IF(have_date,\r\n\t\t\t\t\tSTD.STR.SubstituteIncluded(input_date,date_separators,''),\r\n\t\t\t\t\t'');\r\n\t//is used the present day if wasnt informed a date\r\n\tidx_review_date := IF(have_date,\r\n\t\t\t\t\t\t$.clean_review.IDX_USER_BUSINESS_DATE(DATE = (INTEGER)clear_date),\r\n\t\t\t\t\t\t$.clean_review.IDX_USER_BUSINESS_DATE(DATE = STD.Date.Today()));\r\n\tidx_business_name := $.clean_slimbusiness.IDX_NAME(NAME = input_business_name);\r\n\tfetched_review_date := FETCH($.clean_review.File,idx_review_date,RIGHT.RECPOS,takeIt(LEFT));\r\n\tfinal_filter := IF(have_business,\r\n\t\t\t\t\tfetched_review_date(BUSINESS_ID IN SET(idx_business_name,BUSINESS_ID)),\r\n\t\t\t\t\tfetched_review_date);\r\n\tRETURN final_filter;\r\nEND;\r\n\r\n\r\nEXPORT find_review_based_date() := FUNCTION\r\n\t//IS NECESSARY A STRING IN THE FORMAT YEARS MONTH DAY, COULD BE HAVE SEPARATORS\r\n\tSTRING input_date := '' : STORED('Date');\r\n\tSTRING input_business_name := '' : STORED('BusinessName');\r\n\tfinded_reviews := Fetch_review(input_date,input_business_name);\r\n\tRETURN finded_reviews;\r\nEND;","W20190812-154318":"IMPORT $;\r\n\r\nTYPEOF($.clean_businesslocation.Layout) takeIt($.clean_businesslocation.File l_data) := TRANSFORM\r\n\tSELF := l_data;\r\nEND;\r\n\r\nFetch_Business_Location(STRING51 city_input, STRING3 state_input) := FUNCTION\r\n\thave_city := city_input != '';\r\n\thave_state := state_input != '';\r\n\t// the function need at least one of two parameters.\r\n\tfetch_result := MAP( have_city AND have_state => FETCH($.clean_businesslocation.File, $.clean_businesslocation.IDX_CTST(CITY = city_input AND STATE = state_input),RIGHT.RECPOS, takeIt(LEFT)),\r\n\t\t\t\t\t\t\t\t\thave_state => FETCH($.clean_businesslocation.File, $.clean_businesslocation.IDX_CTST(STATE = state_input),RIGHT.RECPOS, takeIt(LEFT)),\r\n\t\t\t\t\t\t\t\t\tFETCH($.clean_businesslocation.File, $.clean_businesslocation.IDX_CTST(CITY = city_input),RIGHT.RECPOS, takeIt(LEFT)));\r\n\tfinded_businesss := $.clean_slimbusiness.File(BUSINESS_ID IN SET(fetch_result,BUSINESS_ID));\r\n\tRETURN finded_businesss;\r\nEND;\r\n\r\n//OUTPUT(Fetch_Business_Location('','AZ'));\r\nEXPORT find_business_based_location() := FUNCTION\r\n\tSTRING51 business_city := '' : STORED('City');\r\n\tSTRING3 business_state := '' : STORED('State');\r\n\tfinded_businesss := Fetch_Business_Location(business_city, business_state);\r\n\tRETURN finded_businesss;\r\nEND;","W20190812-154216":"IMPORT $,STD;\r\n\r\nTYPEOF($.clean_businesscategories.Layout) takeIt($.clean_businesscategories.File l_data) := TRANSFORM\r\n\tSELF := l_data;\r\nEND;\r\n\r\nFetch_Business_Categorie(STRING36 input_categorie) := FUNCTION\r\n\thave_categorie := input_categorie != '';\r\n\tfetch_result := IF(have_categorie,\r\n\t\t\t\t\tFETCH($.clean_businesscategories.File, $.clean_businesscategories.IDX_NAME(NAME = input_categorie), RIGHT.RECPOS, takeIt(LEFT)),\r\n\t\t\t\t\tFETCH($.clean_businesscategories.File, $.clean_businesscategories.IDX_NAME, RIGHT.RECPOS, takeIt(LEFT)));\r\n\tfinded_business := $.clean_slimbusiness.File(EXISTS(CATEGORIES(NAME IN SET(fetch_result,NAME))));\r\n\tRETURN finded_business;\r\nEND;\r\n\r\nEXPORT find_business_based_categorie() := FUNCTION\r\n\tSTRING36 business_categorie := '' : STORED('Categorie');\r\n\tfinded_business := Fetch_Business_Categorie(business_categorie);\r\n\tRETURN finded_business;\r\nEND;","W20190718-085300":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191015-014727":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n  string25 JourneyID;\n  string3 PulseID;\t\n  string3 SysClientSrcRID;\t\n  real8 DateTimeInterval;\n  real8 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142,\t10.242931268457},\n{'10087815996',\t'2',\t'2',\t928143,\t10.242931268457},\n{'10087815996',\t'3',\t'2',\t929142,\t12.0324807286718},\n{'10087815996',\t'4',\t'2',\t930142,\t13.3947743238029},\n{'10087815996',\t'5',\t'2',\t931142,\t13.3947743238029},\n{'10087815996',\t'6',\t'2',\t932142,\t13.6050460287154},\n{'10087815996',\t'7',\t'2',\t933142,\t13.6050460287154},\n{'10087815996',\t'8',\t'2',\t934142,\t13.6363640673577},\n{'10087815996',\t'9',\t'2',\t935142,\t13.6363640673577},\n{'10087815996',\t'10',\t'2',\t936142,\t12.8646204496317},\n{'10087815996',\t'11',\t'2',\t937142,\t12.8646204496317},\n{'10087815996',\t'12',\t'2',\t938142,\t12.356836448394},\n{'10087815996',\t'13',\t'2',\t939142,\t7.69058688861589},\n{'10087815996',\t'14',\t'2',\t940142,\t7.69058688861589},\n{'10087815996',\t'15',\t'2',\t941142,\t5.10021467906484},\n{'10087815996',\t'16',\t'2',\t942142,\t5.04205428628105},\n{'10087815996',\t'17',\t'2',\t943145,\t4.64164291161294},\n{'10087815998',\t'1',\t'2',\t944142,\t6.55422348309073},\n{'10087815998',\t'2',\t'2',\t945142,\t6.55422348309073},\n{'10087815998',\t'3',\t'2',\t946142,\t9.41750187095558},\n{'10087815998',\t'4',\t'2',\t947141,\t9.82909818209042},\n{'10087815998',\t'5',\t'2',\t948142,\t15.4124907466185},\n{'10087815998',\t'6',\t'2',\t949142,\t15.712240885194},\n{'10087815998',\t'7',\t'2',\t950142,\t15.712240885194},\n{'10087815998',\t'8',\t'2',\t951142,\t16.7926806686933},\n{'10087815998',\t'9',\t'2',\t952142,\t17.0767712555569},\n{'10087815998',\t'10',\t'2',\t953141,\t17.1975666586067},\n{'10087815998',\t'11',\t'2',\t954147,\t17.1975666586067},\n{'10087815998',\t'12',\t'2',\t955142,\t17.1975666586067},\n{'10087815998',\t'13',\t'2',\t956141,\t17.0163740853044},\n{'10087815998',\t'14',\t'2',\t957142,\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\nZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\nEND;\n  \n    // project input into iterate layout\n    GPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n\n\n    // step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n   //this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n    //step 1 is also used to calculate the next 10 record acceleration variance.\n\n    ZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n        SameTrip := L.JourneyID = R.JourneyID;\n    \n        // calculate the acceleration\n        AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n    \n        // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n        SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n        // stair step the next 10 acceleration values to a single record\n        SELF.AccelN01 := SELF.AccelN;\n        SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n        SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n        SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n        SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n        SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n        SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n        SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n        SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n        SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n        //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n        SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n        RecCount := MIN(SELF.RecCounter, 10);    \n    \n        // calculate the average\n        SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                     SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n        AvgNext10 := SumAccelN / RecCount;\n        SELF.AvgNext10 := AvgNext10;\n    \n        // calculate the variance\n        SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                         IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                         IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                         IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                         IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                         IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                         IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                         IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                         IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                         IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n    \n        SELF.VarNext10 := SumDiffSquare / RecCount;\n        SELF := R;\n    END;\n    GPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\n    GPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\n","W20191015-014334":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n  string25 JourneyID;\n  string3 PulseID;\t\n  string3 SysClientSrcRID;\t\n  real8 DateTimeInterval;\n  real8 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142\t10.242931268457},\n{'10087815996',\t'2',\t'2',\t928143\t10.242931268457},\n{'10087815996',\t'3',\t'2',\t929142\t12.0324807286718},\n{'10087815996',\t'4',\t'2',\t930142\t13.3947743238029},\n{'10087815996',\t'5',\t'2',\t931142\t13.3947743238029},\n{'10087815996',\t'6',\t'2',\t932142\t13.6050460287154},\n{'10087815996',\t'7',\t'2',\t933142\t13.6050460287154},\n{'10087815996',\t'8',\t'2',\t934142\t13.6363640673577},\n{'10087815996',\t'9',\t'2',\t935142\t13.6363640673577},\n{'10087815996',\t'10',\t'2',\t936142\t12.8646204496317},\n{'10087815996',\t'11',\t'2',\t937142\t12.8646204496317},\n{'10087815996',\t'12',\t'2',\t938142\t12.356836448394},\n{'10087815996',\t'13',\t'2',\t939142\t7.69058688861589},\n{'10087815996',\t'14',\t'2',\t940142\t7.69058688861589},\n{'10087815996',\t'15',\t'2',\t941142\t5.10021467906484},\n{'10087815996',\t'16',\t'2',\t942142\t5.04205428628105},\n{'10087815996',\t'17',\t'2',\t943145\t4.64164291161294},\n{'10087815998',\t'1',\t'2',\t944142\t6.55422348309073},\n{'10087815998',\t'2',\t'2',\t945142\t6.55422348309073},\n{'10087815998',\t'3',\t'2',\t946142\t9.41750187095558},\n{'10087815998',\t'4',\t'2',\t947141\t9.82909818209042},\n{'10087815998',\t'5',\t'2',\t948142\t15.4124907466185},\n{'10087815998',\t'6',\t'2',\t949142\t15.712240885194},\n{'10087815998',\t'7',\t'2',\t950142\t15.712240885194},\n{'10087815998',\t'8',\t'2',\t951142\t16.7926806686933},\n{'10087815998',\t'9',\t'2',\t952142\t17.0767712555569},\n{'10087815998',\t'10',\t'2',\t953141\t17.1975666586067},\n{'10087815998',\t'11',\t'2',\t954147\t17.1975666586067},\n{'10087815998',\t'12',\t'2',\t955142\t17.1975666586067},\n{'10087815998',\t'13',\t'2',\t956141\t17.0163740853044},\n{'10087815998',\t'14',\t'2',\t957142\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\n    ZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\n    END;\n  \n    // project input into iterate layout\n    GPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n    '''\n    GPSForZeroSpeedFilter = Gps\n\n    # step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n    # this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n    # step 1 is also used to calculate the next 10 record acceleration variance.\n    '''\n    ZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n        SameTrip := L.JourneyID = R.JourneyID;\n    \n        // calculate the acceleration\n        AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n    \n        // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n        SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n        // stair step the next 10 acceleration values to a single record\n        SELF.AccelN01 := SELF.AccelN;\n        SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n        SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n        SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n        SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n        SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n        SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n        SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n        SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n        SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n        //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n        SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n        RecCount := MIN(SELF.RecCounter, 10);    \n    \n        // calculate the average\n        SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                     SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n        AvgNext10 := SumAccelN / RecCount;\n        SELF.AvgNext10 := AvgNext10;\n    \n        // calculate the variance\n        SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                         IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                         IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                         IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                         IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                         IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                         IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                         IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                         IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                         IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n    \n        SELF.VarNext10 := SumDiffSquare / RecCount;\n        SELF := R;\n    END;\n    GPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\n    GPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\n","W20191015-014700":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n  string25 JourneyID;\n  string3 PulseID;\t\n  string3 SysClientSrcRID;\t\n  real8 DateTimeInterval;\n  real8 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142,\t10.242931268457},\n{'10087815996',\t'2',\t'2',\t928143,\t10.242931268457},\n{'10087815996',\t'3',\t'2',\t929142,\t12.0324807286718},\n{'10087815996',\t'4',\t'2',\t930142,\t13.3947743238029},\n{'10087815996',\t'5',\t'2',\t931142,\t13.3947743238029},\n{'10087815996',\t'6',\t'2',\t932142,\t13.6050460287154},\n{'10087815996',\t'7',\t'2',\t933142,\t13.6050460287154},\n{'10087815996',\t'8',\t'2',\t934142,\t13.6363640673577},\n{'10087815996',\t'9',\t'2',\t935142,\t13.6363640673577},\n{'10087815996',\t'10',\t'2',\t936142,\t12.8646204496317},\n{'10087815996',\t'11',\t'2',\t937142,\t12.8646204496317},\n{'10087815996',\t'12',\t'2',\t938142,\t12.356836448394},\n{'10087815996',\t'13',\t'2',\t939142,\t7.69058688861589},\n{'10087815996',\t'14',\t'2',\t940142,\t7.69058688861589},\n{'10087815996',\t'15',\t'2',\t941142,\t5.10021467906484},\n{'10087815996',\t'16',\t'2',\t942142,\t5.04205428628105},\n{'10087815996',\t'17',\t'2',\t943145,\t4.64164291161294},\n{'10087815998',\t'1',\t'2',\t944142,\t6.55422348309073},\n{'10087815998',\t'2',\t'2',\t945142,\t6.55422348309073},\n{'10087815998',\t'3',\t'2',\t946142,\t9.41750187095558},\n{'10087815998',\t'4',\t'2',\t947141,\t9.82909818209042},\n{'10087815998',\t'5',\t'2',\t948142,\t15.4124907466185},\n{'10087815998',\t'6',\t'2',\t949142,\t15.712240885194},\n{'10087815998',\t'7',\t'2',\t950142,\t15.712240885194},\n{'10087815998',\t'8',\t'2',\t951142,\t16.7926806686933},\n{'10087815998',\t'9',\t'2',\t952142,\t17.0767712555569},\n{'10087815998',\t'10',\t'2',\t953141,\t17.1975666586067},\n{'10087815998',\t'11',\t'2',\t954147,\t17.1975666586067},\n{'10087815998',\t'12',\t'2',\t955142,\t17.1975666586067},\n{'10087815998',\t'13',\t'2',\t956141,\t17.0163740853044},\n{'10087815998',\t'14',\t'2',\t957142,\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\nZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\nEND;\n  \n    // project input into iterate layout\n    GPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n    '''\n    GPSForZeroSpeedFilter = Gps\n\n    // step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n   //this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n    //step 1 is also used to calculate the next 10 record acceleration variance.\n\n    ZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n        SameTrip := L.JourneyID = R.JourneyID;\n    \n        // calculate the acceleration\n        AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n    \n        // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n        SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n        // stair step the next 10 acceleration values to a single record\n        SELF.AccelN01 := SELF.AccelN;\n        SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n        SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n        SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n        SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n        SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n        SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n        SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n        SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n        SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n        //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n        SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n        RecCount := MIN(SELF.RecCounter, 10);    \n    \n        // calculate the average\n        SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                     SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n        AvgNext10 := SumAccelN / RecCount;\n        SELF.AvgNext10 := AvgNext10;\n    \n        // calculate the variance\n        SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                         IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                         IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                         IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                         IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                         IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                         IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                         IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                         IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                         IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n    \n        SELF.VarNext10 := SumDiffSquare / RecCount;\n        SELF := R;\n    END;\n    GPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\n    GPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\n","W20191015-014432":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n  string25 JourneyID;\n  string3 PulseID;\t\n  string3 SysClientSrcRID;\t\n  real8 DateTimeInterval;\n  real8 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142,\t10.242931268457},\n{'10087815996',\t'2',\t'2',\t928143,\t10.242931268457},\n{'10087815996',\t'3',\t'2',\t929142,\t12.0324807286718},\n{'10087815996',\t'4',\t'2',\t930142,\t13.3947743238029},\n{'10087815996',\t'5',\t'2',\t931142,\t13.3947743238029},\n{'10087815996',\t'6',\t'2',\t932142,\t13.6050460287154},\n{'10087815996',\t'7',\t'2',\t933142,\t13.6050460287154},\n{'10087815996',\t'8',\t'2',\t934142,\t13.6363640673577},\n{'10087815996',\t'9',\t'2',\t935142,\t13.6363640673577},\n{'10087815996',\t'10',\t'2',\t936142,\t12.8646204496317},\n{'10087815996',\t'11',\t'2',\t937142,\t12.8646204496317},\n{'10087815996',\t'12',\t'2',\t938142,\t12.356836448394},\n{'10087815996',\t'13',\t'2',\t939142,\t7.69058688861589},\n{'10087815996',\t'14',\t'2',\t940142,\t7.69058688861589},\n{'10087815996',\t'15',\t'2',\t941142,\t5.10021467906484},\n{'10087815996',\t'16',\t'2',\t942142,\t5.04205428628105},\n{'10087815996',\t'17',\t'2',\t943145,\t4.64164291161294},\n{'10087815998',\t'1',\t'2',\t944142,\t6.55422348309073},\n{'10087815998',\t'2',\t'2',\t945142,\t6.55422348309073},\n{'10087815998',\t'3',\t'2',\t946142,\t9.41750187095558},\n{'10087815998',\t'4',\t'2',\t947141,\t9.82909818209042},\n{'10087815998',\t'5',\t'2',\t948142,\t15.4124907466185},\n{'10087815998',\t'6',\t'2',\t949142,\t15.712240885194},\n{'10087815998',\t'7',\t'2',\t950142,\t15.712240885194},\n{'10087815998',\t'8',\t'2',\t951142,\t16.7926806686933},\n{'10087815998',\t'9',\t'2',\t952142,\t17.0767712555569},\n{'10087815998',\t'10',\t'2',\t953141,\t17.1975666586067},\n{'10087815998',\t'11',\t'2',\t954147,\t17.1975666586067},\n{'10087815998',\t'12',\t'2',\t955142,\t17.1975666586067},\n{'10087815998',\t'13',\t'2',\t956141,\t17.0163740853044},\n{'10087815998',\t'14',\t'2',\t957142,\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\n    ZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\n    END;\n  \n    // project input into iterate layout\n    GPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n    '''\n    GPSForZeroSpeedFilter = Gps\n\n    # step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n    # this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n    # step 1 is also used to calculate the next 10 record acceleration variance.\n    '''\n    ZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n        SameTrip := L.JourneyID = R.JourneyID;\n    \n        // calculate the acceleration\n        AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n    \n        // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n        SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n        // stair step the next 10 acceleration values to a single record\n        SELF.AccelN01 := SELF.AccelN;\n        SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n        SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n        SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n        SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n        SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n        SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n        SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n        SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n        SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n        //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n        SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n        RecCount := MIN(SELF.RecCounter, 10);    \n    \n        // calculate the average\n        SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                     SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n        AvgNext10 := SumAccelN / RecCount;\n        SELF.AvgNext10 := AvgNext10;\n    \n        // calculate the variance\n        SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                         IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                         IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                         IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                         IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                         IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                         IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                         IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                         IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                         IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n    \n        SELF.VarNext10 := SumDiffSquare / RecCount;\n        SELF := R;\n    END;\n    GPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\n    GPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\n","W20191015-014216":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n  string25 JourneyID;\n  string3 PulseID;\t\n  string3 SysClientSrcRID;\t\n  real8 DateTimeInterval;\n  real8 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142\t10.242931268457}\n{'10087815996',\t'2',\t'2',\t928143\t10.242931268457}\n{'10087815996',\t'3',\t'2',\t929142\t12.0324807286718}\n{'10087815996',\t'4',\t'2',\t930142\t13.3947743238029}\n{'10087815996',\t'5',\t'2',\t931142\t13.3947743238029}\n{'10087815996',\t'6',\t'2',\t932142\t13.6050460287154}\n{'10087815996',\t'7',\t'2',\t933142\t13.6050460287154}\n{'10087815996',\t'8',\t'2',\t934142\t13.6363640673577}\n{'10087815996',\t'9',\t'2',\t935142\t13.6363640673577}\n{'10087815996',\t'10',\t'2',\t936142\t12.8646204496317}\n{'10087815996',\t'11',\t'2',\t937142\t12.8646204496317}\n{'10087815996',\t'12',\t'2',\t938142\t12.356836448394}\n{'10087815996',\t'13',\t'2',\t939142\t7.69058688861589}\n{'10087815996',\t'14',\t'2',\t940142\t7.69058688861589}\n{'10087815996',\t'15',\t'2',\t941142\t5.10021467906484}\n{'10087815996',\t'16',\t'2',\t942142\t5.04205428628105}\n{'10087815996',\t'17',\t'2',\t943145\t4.64164291161294}\n{'10087815998',\t'1',\t'2',\t944142\t6.55422348309073}\n{'10087815998',\t'2',\t'2',\t945142\t6.55422348309073}\n{'10087815998',\t'3',\t'2',\t946142\t9.41750187095558}\n{'10087815998',\t'4',\t'2',\t947141\t9.82909818209042}\n{'10087815998',\t'5',\t'2',\t948142\t15.4124907466185}\n{'10087815998',\t'6',\t'2',\t949142\t15.712240885194}\n{'10087815998',\t'7',\t'2',\t950142\t15.712240885194}\n{'10087815998',\t'8',\t'2',\t951142\t16.7926806686933}\n{'10087815998',\t'9',\t'2',\t952142\t17.0767712555569}\n{'10087815998',\t'10',\t'2',\t953141\t17.1975666586067}\n{'10087815998',\t'11',\t'2',\t954147\t17.1975666586067}\n{'10087815998',\t'12',\t'2',\t955142\t17.1975666586067}\n{'10087815998',\t'13',\t'2',\t956141\t17.0163740853044}\n{'10087815998',\t'14',\t'2',\t957142\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\n    ZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\n    END;\n  \n    // project input into iterate layout\n    GPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n    '''\n    GPSForZeroSpeedFilter = Gps\n\n    # step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n    # this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n    # step 1 is also used to calculate the next 10 record acceleration variance.\n    '''\n    ZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n        SameTrip := L.JourneyID = R.JourneyID;\n    \n        // calculate the acceleration\n        AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n    \n        // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n        SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n        // stair step the next 10 acceleration values to a single record\n        SELF.AccelN01 := SELF.AccelN;\n        SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n        SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n        SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n        SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n        SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n        SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n        SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n        SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n        SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n        //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n        SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n        RecCount := MIN(SELF.RecCounter, 10);    \n    \n        // calculate the average\n        SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                     SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n        AvgNext10 := SumAccelN / RecCount;\n        SELF.AvgNext10 := AvgNext10;\n    \n        // calculate the variance\n        SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                         IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                         IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                         IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                         IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                         IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                         IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                         IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                         IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                         IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n    \n        SELF.VarNext10 := SumDiffSquare / RecCount;\n        SELF := R;\n    END;\n    GPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\n    GPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\n","W20191014-190033":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4, 'love', 'u'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\nallPeople;\n//  Outputs  ---\n//somePeople;\n","W20191015-014156":"/*\n    Example code - use without restriction.  \n*/\nGPS_LAYOUT := RECORD\n  string25 JourneyID;\n  string3 PulseID;\t\n  string3 SysClientSrcRID;\t\n  real8 DateTimeInterval;\n  real10 GpsSpeed;\nEND;\n\nGPS := DATASET([{'10087815996',\t'1',\t'2',\t927142\t10.242931268457}\n{'10087815996',\t'2',\t'2',\t928143\t10.242931268457}\n{'10087815996',\t'3',\t'2',\t929142\t12.0324807286718}\n{'10087815996',\t'4',\t'2',\t930142\t13.3947743238029}\n{'10087815996',\t'5',\t'2',\t931142\t13.3947743238029}\n{'10087815996',\t'6',\t'2',\t932142\t13.6050460287154}\n{'10087815996',\t'7',\t'2',\t933142\t13.6050460287154}\n{'10087815996',\t'8',\t'2',\t934142\t13.6363640673577}\n{'10087815996',\t'9',\t'2',\t935142\t13.6363640673577}\n{'10087815996',\t'10',\t'2',\t936142\t12.8646204496317}\n{'10087815996',\t'11',\t'2',\t937142\t12.8646204496317}\n{'10087815996',\t'12',\t'2',\t938142\t12.356836448394}\n{'10087815996',\t'13',\t'2',\t939142\t7.69058688861589}\n{'10087815996',\t'14',\t'2',\t940142\t7.69058688861589}\n{'10087815996',\t'15',\t'2',\t941142\t5.10021467906484}\n{'10087815996',\t'16',\t'2',\t942142\t5.04205428628105}\n{'10087815996',\t'17',\t'2',\t943145\t4.64164291161294}\n{'10087815998',\t'1',\t'2',\t944142\t6.55422348309073}\n{'10087815998',\t'2',\t'2',\t945142\t6.55422348309073}\n{'10087815998',\t'3',\t'2',\t946142\t9.41750187095558}\n{'10087815998',\t'4',\t'2',\t947141\t9.82909818209042}\n{'10087815998',\t'5',\t'2',\t948142\t15.4124907466185}\n{'10087815998',\t'6',\t'2',\t949142\t15.712240885194}\n{'10087815998',\t'7',\t'2',\t950142\t15.712240885194}\n{'10087815998',\t'8',\t'2',\t951142\t16.7926806686933}\n{'10087815998',\t'9',\t'2',\t952142\t17.0767712555569}\n{'10087815998',\t'10',\t'2',\t953141\t17.1975666586067}\n{'10087815998',\t'11',\t'2',\t954147\t17.1975666586067}\n{'10087815998',\t'12',\t'2',\t955142\t17.1975666586067}\n{'10087815998',\t'13',\t'2',\t956141\t17.0163740853044}\n{'10087815998',\t'14',\t'2',\t957142\t16.8284711885437}], GPS_LAYOUT);\n\n    //Now need to calculate the filter weight to address the zero speed issue On iphone, sometimes the speed reports as zero, when it shouldn't need to remove those records from the calculations\n    // this layout is used for three iterates to gather surrounding data for a record to make the necessary rule calculations\n\n    ZeroSpeedFilterLayout := RECORD\n        GPS_LAYOUT;\n        REAL4 AccelP := 0;   REAL4 AccelN := 0;\n    \n        BOOLEAN RemovedForZS := FALSE;        BOOLEAN Exceeds20 := FALSE;          BOOLEAN ExceedsDelta7 := FALSE;\n        UNSIGNED2 CountDown := 0;             REAL4 LastPreDeleteSpeed := 0;\n    \n        UNSIGNED4 RecCounter := 0;            REAL4 AvgNext10 := 0;                REAL4 VarNext10 := 0;\n    \n        REAL4 AccelN01 := 0;                  REAL4 AccelN02 := 0;                 REAL4 AccelN03 := 0;\n        REAL4 AccelN04 := 0;                  REAL4 AccelN05 := 0;                 REAL4 AccelN06 := 0;\n        REAL4 AccelN07 := 0;                  REAL4 AccelN08 := 0;                 REAL4 AccelN09 := 0;\n        REAL4 AccelN10 := 0;\n    END;\n  \n    // project input into iterate layout\n    GPSForZeroSpeedFilter := PROJECT(GPS, ZeroSpeedFilterLayout);\n    '''\n    GPSForZeroSpeedFilter = Gps\n\n    # step 1 is to reverse the gps list and calculate acceleration (next) from a record and it's next\n    # this is done with a reverse iterate.  If there are two zeros in a row, then 2nd zero uses previous record's acceleration\n    # step 1 is also used to calculate the next 10 record acceleration variance.\n    '''\n    ZeroSpeedFilterLayout CalculateNextAccel(ZeroSpeedFilterLayout L, ZeroSpeedFilterLayout R) := TRANSFORM\n        SameTrip := L.JourneyID = R.JourneyID;\n    \n        // calculate the acceleration\n        AccelN := (L.GPSSpeed - R.GPSSpeed) / ((L.DateTimeInterval - R.DateTimeInterval) / 1000);\n    \n        // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n        SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\n        // stair step the next 10 acceleration values to a single record\n        SELF.AccelN01 := SELF.AccelN;\n        SELF.AccelN02 := IF(~SameTrip, 0, L.AccelN01);\n        SELF.AccelN03 := IF(~SameTrip, 0, L.AccelN02);\n        SELF.AccelN04 := IF(~SameTrip, 0, L.AccelN03);\n        SELF.AccelN05 := IF(~SameTrip, 0, L.AccelN04);\n        SELF.AccelN06 := IF(~SameTrip, 0, L.AccelN05);\n        SELF.AccelN07 := IF(~SameTrip, 0, L.AccelN06);\n        SELF.AccelN08 := IF(~SameTrip, 0, L.AccelN07);\n        SELF.AccelN09 := IF(~SameTrip, 0, L.AccelN08);\n        SELF.AccelN10 := IF(~SameTrip, 0, L.AccelN09);\n\n        //we only want to factor in 10 for average, but if we're not at 10 yet, need to count only the records we've calculated so far \n        SELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n        RecCount := MIN(SELF.RecCounter, 10);    \n    \n        // calculate the average\n        SumAccelN := SELF.AccelN01 + SELF.AccelN02 + SELF.AccelN03 + SELF.AccelN04 + SELF.AccelN05 + \n                     SELF.AccelN06 + SELF.AccelN07 + SELF.AccelN08 + SELF.AccelN09 + SELF.AccelN10;\n\n        AvgNext10 := SumAccelN / RecCount;\n        SELF.AvgNext10 := AvgNext10;\n    \n        // calculate the variance\n        SumDiffSquare := POWER(AvgNext10 - SELF.AccelN01, 2) + \n                         IF(RecCount >=  2, POWER(AvgNext10 - SELF.AccelN02, 2), 0) +\n                         IF(RecCount >=  3, POWER(AvgNext10 - SELF.AccelN03, 2), 0) +\n                         IF(RecCount >=  4, POWER(AvgNext10 - SELF.AccelN04, 2), 0) +\n                         IF(RecCount >=  5, POWER(AvgNext10 - SELF.AccelN05, 2), 0) +\n                         IF(RecCount >=  6, POWER(AvgNext10 - SELF.AccelN06, 2), 0) +\n                         IF(RecCount >=  7, POWER(AvgNext10 - SELF.AccelN07, 2), 0) +\n                         IF(RecCount >=  8, POWER(AvgNext10 - SELF.AccelN08, 2), 0) +\n                         IF(RecCount >=  9, POWER(AvgNext10 - SELF.AccelN09, 2), 0) +\n                         IF(RecCount >= 10, POWER(AvgNext10 - SELF.AccelN10, 2), 0);\n    \n        SELF.VarNext10 := SumDiffSquare / RecCount;\n        SELF := R;\n    END;\n    GPSForZeroSpeedFilterS := SORT(GPSForZeroSpeedFilter, SysClientSrcRID, JourneyID, -DateTimeInterval, -PulseID, LOCAL);\n    GPSFZ_Next := ITERATE(GPSForZeroSpeedFilterS, CalculateNextAccel(LEFT, RIGHT), LOCAL);\n","W20191014-190008":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4, 'love', 'u'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-190046":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4, 'love', 'u'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\nallPeople;\n//  Outputs  ---\nsomePeople;\n","W20191014-190032":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4, 'love', 'u'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\nallPeople;\n//  Outputs  ---\n//somePeople;\n","W20191014-185946":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {44, 'love', 'u'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-185937":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4, 'love', 'u'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-183407":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-151022":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'oBA!','Smith'}],Layout_Person);\n\nsomePeople := allPeople(FirstName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-185904":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {44, 'love u'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-185920":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4, 'love u'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-185823":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-125840":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(PersonID = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-173859":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-125905":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(PersonID = 3);\n\n//  Outputs  ---\nsomePeople;\n","W20191014-150941":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'oBA!','Smith'}],Layout_Person);\n\nsomePeople := allPeople(FirstName = 'Fred');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-150749":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-150833":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'oBA!','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191013-120913":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-125823":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-122224":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191014-125810":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191012-122724":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n\tmyRec.Value1;\n\tSomeFile.Value2;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value1 + L.Value2 + '-' + (STRING)C;\n\tSELF := L;\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191011-150243":"IMPORT STD;\r\n STD.Date.Today()","W20191008-193304":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191012-122658":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191008-135319":" STD.Date.Today()","W20191010-023745":"PtblRec := RECORD\n  STRING2 State := Person.per_st;\n  STRING20 City := Person.per_full_city;\n  STRING25 Lname := Person.per_last_name;\n  STRING15 Fname := Person.per_first_name;\nEND;\n\nPtblOut := OUTPUT(TABLE(Person,PtblRec),,'RTTEMP::TestFetch');\n          \nPtbl := DATASET('RTTEMP::TestFetch',\n          {PtblRec,UNSIGNED8 RecPtr {virtual(fileposition)}},\n          FLAT);\n          \nAlphaInStateCity := INDEX(Ptbl,\n                   {state,city,lname,fname,RecPtr},\n                   'RTTEMPkey::TestFetch');\nBld := BUILDINDEX(AlphaInStateCity);\n","W20191008-135328":"import std; \nSTD.Date.Today()","W20191008-134642":"^(3=5);","W20191008-134710":"1=1 not (3=5);","W20191008-134702":"not (3=5);","W20191008-134722":"1=1 and (3=5);","W20191008-134635":"!(3=5);","W20191008-134625":"3=5;","W20191008-134717":"1=1 and not (3=5);","W20191007-205157":"IMPORT SampleData.Sales;\nIMPORT Visualizer;\n\n//  Aggregate by Order_Priority ---\nOUTPUT(TABLE(Sales.CleanDataset, {Order_Priority, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Order_Priority, FEW), NAMED('Order_Priority'));\nVisualizer.TwoD.Pie('myPieChart',, 'Order_Priority');\n\n//  Aggregate by Region ---\nOUTPUT(TABLE(Sales.CleanDataset, {Region, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Region, FEW), NAMED('Region'));\nVisualizer.MultiD.Bar('myBarChart',, 'Region');\n\n//  Aggregate by Ship_Mode ---\nOUTPUT(TABLE(Sales.CleanDataset, {Ship_Mode, UNSIGNED INTEGER4 Sum_Order_Quantity := SUM(GROUP, Order_Quantity)}, Ship_Mode, FEW), NAMED('Ship_Mode'));\nVisualizer.MultiD.Column('myColumnChart',, 'Ship_Mode',,, DATASET([{'xAxisFocus', false}], Visualizer.KeyValueDef));\n\n//  All data filtered by previous visualizations ---\nOUTPUT(CHOOSEN(SORT(Sales.CleanDataset, Fixed_Order_Date), ALL), NAMED('Sales'));\n\nmappings :=  DATASET([  {'Date', 'Fixed_Order_Date'}, \n                        {'Unit Price', 'Unit_Price'}, \n                        {'Shipping Cost', 'Shipping_Cost'}], Visualizer.KeyValueDef);\n\nfilter := DATASET([     \n                        {'myPieChart', [{'Order_Priority', 'Order_Priority'}]},\n  \t\t\t\t\t\t\t\t\t\t\t{'myColumnChart', [{'Ship_Mode', 'Ship_Mode'}]},\n                        {'myBarChart', [{'Region', 'Region'}]}], Visualizer.FiltersDef);\n\nproperties := DATASET([ {'xAxisType', 'time'}, \n                        {'xAxisTypeTimePattern', '%Y-%m-%d'}, \n                        {'xAxisFocus', true},\n                        {'interpolate', 'cardinal'}\n                        ], Visualizer.KeyValueDef);\n\nVisualizer.MultiD.Area('myLine',, 'Sales', mappings, filter, properties);","W20191007-212021":"MyRec := RECORD\n\tINTEGER2 Value1;\n\tINTEGER2 Value2;\nEND;\n\nMyRec2 := RECORD\n  INTEGER2 value;\nEND;\n\nSomeFile := DATASET([{10,0},\n\t\t\t\t\t {20,0},\n\t\t\t\t\t {30,0},\n\t\t\t\t\t {40,0},\n\t\t\t\t\t {50,0}],MyRec);\n\n/*MyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value2 := L.Value2 + R.Value1;\n\tSELF := R;\nEND;*/\n\nMyRec2 AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value := L.Value2 + R.Value1;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n\n/* Processes as:\n\tLEFT.Value2   RIGHT.Value1\n\t\t0 (0)\t\t\t1 (10)\t\t- 0 + 10 = 10\n\t\t1 (10)\t\t\t2 (20)\t\t- 10 + 20 = 30\n\t\t2 (30)\t\t\t3 (30)\t\t- 30 + 30 = 60\n\t\t3 (60)\t\t\t4 (40)\t\t- 60 + 40 = 100\n\t\t4 (100)\t\t\t5 (50)\t\t- 100 + 50 = 150\n\nAddedRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\t10\t\t10\n\t2\t\t20\t\t30\t\n\t3\t\t30\t\t60\n\t4\t\t40\t\t100\n\t5\t\t50\t\t150\n*/","W20191008-093623":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-205023":"IMPORT SampleData.Sales;\nIMPORT Visualizer;\n\n//  Aggregate by Order_Priority ---\nOUTPUT(TABLE(Sales.CleanDataset, {Order_Priority, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Order_Priority, FEW), NAMED('Order_Priority'));\nVisualizer.TwoD.Pie('myPieChart',, 'Order_Priority');\n\n//  Aggregate by Ship_Mode ---\nOUTPUT(TABLE(Sales.CleanDataset, {Ship_Mode, UNSIGNED INTEGER4 Sum_Order_Quantity := SUM(GROUP, Order_Quantity)}, Ship_Mode, FEW), NAMED('Ship_Mode'));\nVisualizer.MultiD.Column('myColumnChart',, 'Ship_Mode',,, DATASET([{'xAxisFocus', false}], Visualizer.KeyValueDef));\n\n//  Aggregate by Region ---\nOUTPUT(TABLE(Sales.CleanDataset, {Region, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Region, FEW), NAMED('Region'));\nVisualizer.MultiD.Bar('myBarChart',, 'Region');\n\n//  All data filtered by previous visualizations ---\nOUTPUT(CHOOSEN(SORT(Sales.CleanDataset, Fixed_Order_Date), ALL), NAMED('Sales'));\n\nmappings :=  DATASET([  {'Date', 'Fixed_Order_Date'}, \n                        {'Unit Price', 'Unit_Price'}, \n                        {'Shipping Cost', 'Shipping_Cost'}], Visualizer.KeyValueDef);\n\nfilter := DATASET([     \n                        {'myPieChart', [{'Order_Priority', 'Order_Priority'}]},\n  \t\t\t\t\t\t\t\t\t\t\t{'myColumnChart', [{'Ship_Mode', 'Ship_Mode'}]},\n                        {'myBarChart', [{'Region', 'Region'}]}], Visualizer.FiltersDef);\n\nproperties := DATASET([ {'xAxisType', 'time'}, \n                        {'xAxisTypeTimePattern', '%Y-%m-%d'}, \n                        {'xAxisFocus', true},\n                        {'interpolate', 'cardinal'}\n                        ], Visualizer.KeyValueDef);\n\nVisualizer.MultiD.Area('myLine',, 'Sales', mappings, filter, properties);","W20191007-204915":"IMPORT SampleData.Sales;\nIMPORT Visualizer;\n\n//  Aggregate by Ship_Mode ---\nOUTPUT(TABLE(Sales.CleanDataset, {Ship_Mode, UNSIGNED INTEGER4 Sum_Order_Quantity := SUM(GROUP, Order_Quantity)}, Ship_Mode, FEW), NAMED('Ship_Mode'));\nVisualizer.MultiD.Column('myColumnChart',, 'Ship_Mode',,, DATASET([{'xAxisFocus', false}], Visualizer.KeyValueDef));\n\n//  Aggregate by Order_Priority ---\nOUTPUT(TABLE(Sales.CleanDataset, {Order_Priority, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Order_Priority, FEW), NAMED('Order_Priority'));\nVisualizer.TwoD.Pie('myPieChart',, 'Order_Priority');\n\n//  Aggregate by Region ---\nOUTPUT(TABLE(Sales.CleanDataset, {Region, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Region, FEW), NAMED('Region'));\nVisualizer.MultiD.Bar('myBarChart',, 'Region');\n\n//  All data filtered by previous visualizations ---\nOUTPUT(CHOOSEN(SORT(Sales.CleanDataset, Fixed_Order_Date), ALL), NAMED('Sales'));\n\nmappings :=  DATASET([  {'Date', 'Fixed_Order_Date'}, \n                        {'Unit Price', 'Unit_Price'}, \n                        {'Shipping Cost', 'Shipping_Cost'}], Visualizer.KeyValueDef);\n\nfilter := DATASET([     \n                        {'myPieChart', [{'Order_Priority', 'Order_Priority'}]},\n  \t\t\t\t\t\t\t\t\t\t\t{'myColumnChart', [{'Ship_Mode', 'Ship_Mode'}]},\n                        {'myBarChart', [{'Region', 'Region'}]}], Visualizer.FiltersDef);\n\nproperties := DATASET([ {'xAxisType', 'time'}, \n                        {'xAxisTypeTimePattern', '%Y-%m-%d'}, \n                        {'xAxisFocus', true},\n                        {'interpolate', 'cardinal'}\n                        ], Visualizer.KeyValueDef);\n\nVisualizer.MultiD.Area('myLine',, 'Sales', mappings, filter, properties);","W20191007-165129":"IMPORT SampleData.Sales;\nIMPORT Visualizer;\n\n//  Aggregate by Ship_Mode ---\nOUTPUT(TABLE(Sales.CleanDataset, {Ship_Mode, UNSIGNED INTEGER4 Sum_Order_Quantity := SUM(GROUP, Order_Quantity)}, Ship_Mode, FEW), NAMED('Ship_Mode'));\nVisualizer.MultiD.Column('myColumnChart',, 'Ship_Mode',,, DATASET([{'xAxisFocus', false}], Visualizer.KeyValueDef));\n\n//  Aggregate by Order_Priority ---\nOUTPUT(TABLE(Sales.CleanDataset, {Order_Priority, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Order_Priority, FEW), NAMED('Order_Priority'));\nVisualizer.TwoD.Pie('myPieChart',, 'Order_Priority');\n\n//  Aggregate by Region ---\nOUTPUT(TABLE(Sales.CleanDataset, {Region, UNSIGNED INTEGER4 SumOrderQuantity := SUM(GROUP, Order_Quantity)}, Region, FEW), NAMED('Region'));\nVisualizer.MultiD.Bar('myBarChart',, 'Region');\n\n//  All data filtered by previous visualizations ---\nOUTPUT(CHOOSEN(SORT(Sales.CleanDataset, Fixed_Order_Date), ALL), NAMED('Sales'));\n\nmappings :=  DATASET([  {'Date', 'Fixed_Order_Date'}, \n                        {'Unit Price', 'Unit_Price'}, \n                        {'Shipping Cost', 'Shipping_Cost'}], Visualizer.KeyValueDef);\n\nfilter := DATASET([     {'myColumnChart', [{'Ship_Mode', 'Ship_Mode'}]},\n                        {'myPieChart', [{'Order_Priority', 'Order_Priority'}]},\n                        {'myBarChart', [{'Region', 'Region'}]}], Visualizer.FiltersDef);\n\nproperties := DATASET([ {'xAxisType', 'time'}, \n                        {'xAxisTypeTimePattern', '%Y-%m-%d'}, \n                        {'xAxisFocus', true},\n                        {'interpolate', 'cardinal'}\n                        ], Visualizer.KeyValueDef);\n\nVisualizer.MultiD.Area('myLine',, 'Sales', mappings, filter, properties);","W20191007-190406":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-143836":"IMPORT STD;\t\n///yyyyyyy\nfibRecord := RECORD\n\tINTEGER\t\t\tfib1 := 1;\n\tINTEGER\t\t\tfib2 := 1;\n\tINTEGER\t\t\tmycounter := 100;\n\tSTRING20\t\textra := 'xx';\nEND;\n\nfibTable := DATASET([{9},{8},{7},{6}],fibrecord);\n\nfibRecord makeFibs(fibRecord l, fibRecord r) := TRANSFORM\n\tSELF.fib1 := if(l.fib1=0,r.fib1,r.fib1 + l.fib1);\n\tSELF.fib2 := r.fib2 + l.fib1 + l.fib2;\n\tSELF.mycounter := l.mycounter + 1;\n\tSELF := r;\nEND;\n\ndoDisplay(STRING DispStr) := std.system.Log.addWorkunitInformation(DispStr);\n\nret := ITERATE(fibTable, makeFibs(LEFT, RIGHT));\nAPPLY(ret, \n\tdoDisplay((STRING)fib1 + ','),\n\tdoDisplay((STRING)fib2 + ','),\n\tdoDisplay((STRING)mycounter),\n\tdoDisplay(extra),\n\tBEFORE(doDisplay('Begin APPLY....')),\n\tAFTER(doDisplay('...End APPLY'))\n\t);\nOUTPUT(ret);\n","W20191007-143801":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nPerson := DATASET([ {1,'Fred','Smith'},\n                    {2,'Joe','Blow'},\n                    {3,'Jane','Smith'}],Layout_Person);\n\nSortedPerson := SORT(Person, LastName, FirstName);\n\n//  Outputs  ---\nSortedPerson;\n","W20191007-143743":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-143741":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-143735":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-110334":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-143732":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-143615":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191007-143621":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191004-172729":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n  \tSTRING4 Value3;\n\tString4 Value4;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value1 + L.Value2 + '-' + (STRING)C;\n\t//SELF := L;\n\tSELF :=[];\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191005-134012":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191004-172655":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n  \tSTRING4 Value3;\n\tString4 Value4;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value1 + L.Value2 + '-' + (STRING)C;\n\t//SELF := L;\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191007-143756":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nPerson := DATASET([ {1,'Fred','Smith'},\n                    {2,'Joe','Blow'},\n                    {3,'Jane','Smith'}],Layout_Person);\n\nSortedPerson := SORT(Person, LastName, FirstName);\n\n//  Outputs  ---\nSortedPerson;\n","W20191004-172554":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n  \tSTRING4 Value1;\n\tString4 Value2;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value1 + L.Value2 + '-' + (STRING)C;\n\tSELF := L;\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191004-172233":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n\t//myRec.Value1;\n\t//SomeFile.Value2;\n  \tSTRING4 Value3;\n\tString4 Value4;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value3 + L.Value4 + '-' + (STRING)C;\n\tSELF := L;\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191004-172358":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n\t//myRec.Value1;\n\t//SomeFile.Value2;\n  \tSTRING4 Value3;\n\tString4 Value4;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value1 + L.Value2 + '-' + (STRING)C;\n\tSELF := L;\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191004-172542":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n  \tSTRING4 Value3;\n\tString4 Value4;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value1 + L.Value2 + '-' + (STRING)C;\n\tSELF := L;\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191004-165713":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191004-172226":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nSomeFile := DATASET([{'C','G'},\n\t\t\t\t\t           {'C','C'},\n\t\t\t\t\t           {'A','X'},\n\t\t\t\t\t           {'B','G'},\n\t\t\t\t\t           {'A','B'}],MyRec);\n\nMyOutRec := RECORD\n\t//myRec.Value1;\n\t//SomeFile.Value2;\n  \tSTRING4 Value3;\n\tString4 Value4;\n\tSTRING4 CatValues;\nEND;\n\nMyOutRec CatThem(SomeFile L, INTEGER C) := TRANSFORM\n\tSELF.CatValues := \n\tL.Value3 + L.Value4 + '-' + (STRING)C;\n\tSELF := L;\nEND;\n\nCatRecs := PROJECT(SomeFile,\n                   CatThem(LEFT,COUNTER));\n\nOUTPUT(CatRecs);\n\n/* CatRecs result set is:\n\tRec#\tValue1\tValue2\tCatValues\n\t1\t\tC\t\tG\t\tCG-1\n\t2\t\tC\t\tC\t\tCC-2\n\t3\t\tA\t\tX\t\tAX-3\n\t4\t\tB\t\tG\t\tBG-4\n\t5\t\tA\t\tB\t\tAB-5\n*/","W20191004-110838":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191002-144727-1":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::TestShare::test_ny.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20191002-194138":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191001-165633":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191002-143538":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20191001-133043":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20191001-133116":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-191007":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-191039":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-185345":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-185358":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-172351":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-172308":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-172500":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-162943":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File,RUBRICA);\r\n\r\nTOTAL_CRIME := RECORD\r\n\tall_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nCRIME_SPECS := TABLE(all_crimes,TOTAL_CRIME,RUBRICA);\r\nOUTPUT(SORT(CRIME_SPECS,-total));","W20190930-172237":"MyRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\nEND;\n\nLeftFile := DATASET([{'C','A'},\n\t\t\t\t\t           {'X','B'},\n\t\t\t\t\t           {'A','C'}],MyRec);\n\nRightFile := DATASET([{'C','X'},\n\t \t\t\t\t            {'B','Y'},\n\t\t\t\t\t            {'A','Z'}],MyRec);\n\nMyOutRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 LeftValue2;\n\tSTRING1 RightValue2;\nEND;\n\nMyOutRec JoinThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value1 := IF(L.Value1<>'', L.Value1, R.Value1);\n\tSELF.LeftValue2 := L.Value2;\n\tSELF.RightValue2 := R.Value2;\nEND;\n\nInnerJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT));\nLOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             LEFT OUTER);\nROutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             RIGHT OUTER);\nFOutJoinedRecs := JOIN(LeftFile,RightFile,\n\t\t\t\t\t             LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t JoinThem(LEFT,RIGHT),\n\t\t\t\t\t             FULL OUTER);\nLOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              LEFT ONLY);\nROnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              RIGHT ONLY);\nFOnlyJoinedRecs := JOIN(LeftFile,RightFile,\n\t \t\t\t\t              LEFT.Value1 = RIGHT.Value1,\n\t\t\t\t\t\t\t\t\t\t\t\tJoinThem(LEFT,RIGHT),\n\t\t\t\t\t              FULL ONLY);\n\n\nOUTPUT(InnerJoinedRecs,,NAMED('Inner'));\nOUTPUT(LOutJoinedRecs,,NAMED('LeftOuter'));\nOUTPUT(ROutJoinedRecs,,NAMED('RightOuter'));\nOUTPUT(FOutJoinedRecs,,NAMED('FullOuter'));\nOUTPUT(LOnlyJoinedRecs,,NAMED('LeftOnly'));\nOUTPUT(ROnlyJoinedRecs,,NAMED('RightOnly'));\nOUTPUT(FOnlyJoinedRecs,,NAMED('FullOnly'));\n\n/* InnerJoinedRecs result set is: \n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n \nLOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tC\t\tA\t\t\tX\n\t3\t\tX\t\tB\t\t\t\n\nROutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\t\n\t2\t\tB\t\t\t\t\tY\t\t\t\n\t3\t\tC\t\tA\t\t\tX\n\nFOutJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tA\t\tC\t\t\tZ\n\t2\t\tB\t\t\t\t\tY\t\n\t3\t\tC\t\tA\t\t\tX\n\t4\t\tX\t\tB\t\t\t\n\nLOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tX\t\tB\t\t\t\n\nROnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\n\nFOnlyJoinedRecs result set is:\n\tRec#\tValue1\tLeftValue2\tRightValue2\n\t1\t\tB\t\t\t\t\tY\t\n\t2\t\tX\t\tB\t\t\t\n*/","W20190930-154228":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO != 'SUPERIOR COMPLETO' OR DESCR_GRAU_INSTRUCAO != 'SUPERIOR INCOMPLETO')),\r\nRUBRICA);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.RUBRICA;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ntype_crimes := TABLE(all_crimes,SCHOOL_PROFILE,RUBRICA);\r\nwoman_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,RUBRICA);\r\nmen_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,RUBRICA);\r\n\r\nOUTPUT(SORT(type_crimes,-TOTAL));\r\nOUTPUT(SORT(woman_crimes,-TOTAL));\r\nOUTPUT(SORT(men_crimes,-TOTAL));\r\n","W20190930-142117":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck('7.4.20');","W20190930-142129":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck('7.4.18');","W20190930-153858":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO = '1 GRAU COMPLETO')),\r\nRUBRICA);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.RUBRICA;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ntype_crimes := TABLE(all_crimes,SCHOOL_PROFILE,RUBRICA);\r\nwoman_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,RUBRICA);\r\nmen_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,RUBRICA);\r\n\r\nOUTPUT(SORT(type_crimes,-TOTAL));\r\nOUTPUT(SORT(woman_crimes,-TOTAL));\r\nOUTPUT(SORT(men_crimes,-TOTAL));\r\n","W20190930-142056":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck('7.4.12);","W20190930-142106":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck('7.4.12');","W20190930-142034":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck('7.4.22');","W20190930-142046":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck('7.4.10');","W20190930-141957":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck();","W20190930-142022":"IMPORT std;\nSTD.System.Util.PlatformVersionCheck('7.4.0');","W20190930-141759":"Layout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\nsomePeople;\n","W20190930-141457":"IMPORT STD;\na := ('hello');\nb := Std.Str.toUpperCase(a);\nOUTPUT(b);","W20190930-141348":"IMPORT STD;\na := ('hello');\n//b := Std.Str.toUpper(a);\nOUTPUT(a);","W20190930-141333":"IMPORT STD;\na := ('hello');\nb := Std.Str.toUpper(a);\nOUTPUT(b);","W20190929-083114":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\n\treal4 RecCounter := 0;\nend;\n\nSomeFile2 := project(SomeFile,myrec2);\n\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF.AccelN :=  MAP(~SameTrip => 0,  \n                        L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  \n                        AccelN);\n\tSELF.RecCounter := IF(~SameTrip, 1, L.RecCounter + 1);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile2,AddThem(LEFT,RIGHT),local);\noutput(SomeFile2);\noutput(AddedRecs);\n","W20190930-141234":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190929-081058":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nSomeFile2 := project(SomeFile,myrec2);\n\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\t//SameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile2,AddThem(LEFT,RIGHT),local);\noutput(SomeFile2);\noutput(AddedRecs);\n","W20190929-081650":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nSomeFile2 := project(SomeFile,myrec2);\n\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile2,AddThem(LEFT,RIGHT),local);\noutput(SomeFile2);\noutput(AddedRecs);\n","W20190929-081129":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nSomeFile2 := project(SomeFile,myrec2);\n\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile2,AddThem(LEFT,RIGHT),local);\noutput(SomeFile2);\noutput(AddedRecs);\n","W20190929-080650":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nSomeFile1 := DATASET([{1,1,1.2,1.5,0},{1,2,1.4,1.6,0}, {1,3,1.6,2,0}],MyRec2);\n\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\t//SameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile1,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190930-141218":"IMPORT STD;\na := ('hello')\nb := Std.Str.toUpper(a)\nOUTPUT(b);","W20190929-080348":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-080509":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec L, MyRec R) := TRANSFORM\n\t//SameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-080620":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nSomeFile := DATASET([{1,1,1.2,1.5,0},{1,2,1.4,1.6,0}, {1,3,1.6,2,0}],MyRec2);\n\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\t//SameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-080210":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n//\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n//\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-080240":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-080111":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n//\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-080039":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tself.AccelN := (L.GPSSpeed - R.GPSSpeed);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-075621":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n    // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n    SELF.AccelN :=  MAP(~SameTrip => 0,  \n                        L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  \n                        AccelN);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-075724":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n    // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n    SELF.AccelN :=  MAP(~SameTrip => 0,  \n                        L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  \n                        AccelN);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT),local);\n\noutput(AddedRecs);\n","W20190929-075207":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec2 AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n    // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n    SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n","W20190929-074753":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8}\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n    // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n    SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n","W20190929-074910":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec AddThem(MyRec2 L, MyRec2 R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n    // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n    SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n","W20190929-074837":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\treal4 gpsspeed;\n\treal4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,1.5},{1,2,1.4,1.6}, {1,3,1.6,2}, {1,4,2,3},{1,5,2.1,4},{1,6,-2.1,4.2},{1,7,-2.5,4.5},{1,8,-2.7,4.8},\n                    {2,1,1.27,1.6},{2,2,1.45,1.8},{2,3,1.68,2.5},{2,4,2.23,3.7},{2,5,2.54,4.9},{2,6,-2.0,4.2},{2,7,-2.1,4.5},{2,8,-2.3,4.8}],MyRec);\n\nmyrec2:=Record\n    MyRec;\n\treal4 AccelN := 0;\nend;\n\nMyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSameTrip := L.JourneyID = R.JourneyID;\n\t// calculate the acceleration\n\tAccelN := (L.GPSSpeed - R.GPSSpeed);\n    // set acceleration, if the current speed is zero or -1 and next speed is zero or -1, use the previous accel calculation\n    SELF.AccelN :=  MAP(~SameTrip => 0,  L.GPSSpeed <= 0 AND R.GPSSpeed <= 0 => L.AccelN,  AccelN);\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n","W20190929-073625":"MyRec := RECORD\n\tstring4 journeyid;\n\tstring4 pulseid;\n\tfloat4 gpsspeed;\n\tfloat4 dtinval;\nEND;\n\nSomeFile := DATASET([{1,1,1.2,},\n\t\t\t\t\t {20,0},\n\t\t\t\t\t {30,0},\n\t\t\t\t\t {40,0},\n\t\t\t\t\t {50,0}],MyRec);\n\nMyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value2 := L.Value2 + R.Value1;\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n\n/* Processes as:\n\tLEFT.Value2   RIGHT.Value1\n\t\t0 (0)\t\t\t1 (10)\t\t- 0 + 10 = 10\n\t\t1 (10)\t\t\t2 (20)\t\t- 10 + 20 = 30\n\t\t2 (30)\t\t\t3 (30)\t\t- 30 + 30 = 60\n\t\t3 (60)\t\t\t4 (40)\t\t- 60 + 40 = 100\n\t\t4 (100)\t\t\t5 (50)\t\t- 100 + 50 = 150\n\nAddedRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\t10\t\t10\n\t2\t\t20\t\t30\t\n\t3\t\t30\t\t60\n\t4\t\t40\t\t100\n\t5\t\t50\t\t150\n*/","W20190928-144631-1":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\npropertyDs := transfer(ourDs, integer);\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  filteredlayout;\n  integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-144550":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\npropertyDs := transfer(ourDs, integer);\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(ourds1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-144245":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(input.extCond) + getIntPoint(input.intCond) + \n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-144510":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\npropertyDs := transfer(ourDs, integer);\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-144358":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(input.extCond) + getIntPoint(input.intCond) + \n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n","W20190928-143346":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-144131":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190928-143322":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-143217":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\npropertyDs := transform(filteredlayout1, self.exterior_condition := (integer)exterior_condition);\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-143143-3":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\npropertyDs := transform(filteredlayout1, self.exterior_condition := (integer)left.exterior_condition);\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-143159":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\npropertyDs := transform(filteredlayout1, self.exterior_condition := (integer)left.exterior_condition);\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-142235":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(ourDs input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-142321":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-142339":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-143142":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n\npropertyDs := transform(filteredlayout1, self.exterior_condition := (integer)left.exterior_condition);\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(filteredlayout input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-142133":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-142208":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextPoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-142121":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextePoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-141940":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(input.extCond) + getIntPoint(input.intCond) + \n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-060908":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-142057":"filteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n                      3);\nend;\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                                                  self.year_built := (integer)left.year_built,\n                                                  self.market_value := (integer)left.market_value,\n                                                  self.parcel_number := (integer)left.parcel_number\n                                  ));\n//output(ourDs1[1..1000]);\n\n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n                          12 => 1,      //oldest houses (1900s)\n                          11 => 1,\n                          10 => 1,\n                          9 => 2,\n                          8 => 2, \n                          7 => 3,\n                          6 => 3,\n                          5 => 4,\n                          4 => 4,     //1977 houses\n                          3 => 5,\n                          2 => 5,\n                          1 => 6,\n                          0 => 8,    //current houses (2010s+)\n                          5);\nend;\nnewLayout := RECORD\n  properties1;\n    integer flip_potential;\nend;\n\nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getextePoint(input.exterior_condition) + getIntPoint(input.interior_condition) + \n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/\n","W20190928-060818":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING (integer)exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060752":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition := (integer)exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060607":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060708":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition := (integer)left.exterior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060716":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition := (integer)exterior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060522":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := DATASET(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060441":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\n  DATASET(ourDs);\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060503":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060437":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\n  DATASET(ourDs) x;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060348":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\n  DATASET(filteredlayout) x;\nEND;\n\nds := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-060353":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\n  DATASET(filteredlayout) x;\nEND;\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-055351":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-054322":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-055300":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs1 := (ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(o input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-054437":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\n  ourDs1;\nEND;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-054424":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\n  ourDs1;\nEND;\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-054443":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-055318":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n \n                                  ));\n\n\n\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(o input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-053035":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDs input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-053028":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-052550":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-053004":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', filteredlayout1, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDS input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-052914":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(ourDS input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition))\n    SELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-052119":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition));\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-051938":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n\n/*\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n*/\n\nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input(getIntpoint(input.interior_condition));\nSELF := input;\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-051641":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n  \nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\nresult := project(properties2, FindPotential(LEFT));\noutput(result);\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-051334":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n  \nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.exterior_condition) +\n     getYearPoint(input.year_built) + getAirPoint(input.central_air))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-051247":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\n\nnewLayout := RECORD\n  \tfilteredlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n  \nnewLayout FindPotential(filteredlayout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.interior_condition) + getExtPoint(input.extCond) +\n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-050841":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\nlayout1 := RECORD;\n\nnewLayout := RECORD\n  \tlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n  \nnewLayout FindPotential(layout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.intCond) + getExtPoint(input.extCond) +\n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-050807":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\nlayout1;\n\nnewLayout := RECORD\n  \tlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n  \nnewLayout FindPotential(layout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.intCond) + getExtPoint(input.extCond) +\n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-050747":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\nnewLayout := RECORD\n  \tlayout1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n  \nnewLayout FindPotential(layout1 input) := TRANSFORM\n  SELF.flip_potential := input \n    ((getIntPoint(input.intCond) + getExtPoint(input.extCond) +\n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-045920":"/*\nLayout := RECORD\n  String category_code_description; //multifamilies only\n  UNSIGNED4 category_code;\n  String ext_cond;  //exterior condition\n  String int_cond;\t//interior condition\n\tString bathrooms; //for customer info\n\tString bedrooms; // for customer info\n\tString basement; //for customer info\n\tString year_built; //for customer info; if before 1989; potential for asbestos\n\tString market_val; //market value of houses\n\tString parcel_val; //parcel_value - used for tax evaluation to determine the actual value of house\n\tString central_air; //central air is a big expense\n*/\n\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\n\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n//output(ourDs1[1..1000]);\n                  \n//properties := ourDs1(category_code = 1 AND exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]\n                   //AND number_of_bedrooms in [1,2,3,4,5,6,7,8,9,10] );\n\n//data aggregation\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n//result := project(properties, transform(filteredlayout, self := left));\n//sortedresult := sort(result, -exterior_condition);\n//OUTPUT(sortedresult[1..1000]);\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\n\nnewLayout := RECORD\n  \tourDs1;\n\tinteger flip_potential;\n\tinteger extCond;\n\tinteger intCond;\n\tinteger year;\n\tinteger airCond;\nend;\n  \nnewLayout FindPotential(ourDs1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getIntPoint(input.intCond) + getExtPoint(input.extCond) +\n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n//output(table(ourDs, {exterior_condition, count(group)}, exterior_condition, merge));\n\n\n/*\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));\n*/","W20190928-042415":"Layout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\n\nnewLayout := RECORD\n    properties1;\n\tinteger flip_potential;\nend;\n  \nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(input.extCond) + getIntPoint(input.intCond) + \n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n","W20190928-040048":"Layout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\n\nnewLayout := RECORD\n  properties1;\n\tinteger flip_potential;\nend;\n  \nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(extCond) + getIntPoint(intCond) + \n     getYearPoint(year) + getAirPoint(airCond))/ 4);\nSELF := input;\nend;\n\n","W20190928-035948":"Layout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\n\nnewLayout := RECORD\n  properties1;\n\tinteger flip_potential;\nend;\n  \nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(left.extCond) + getIntPoint(left.intCond) + \n     getYearPoint(left.year) + getAirPoint(left.airCond))/ 4);\nSELF := input;\nend;\n\n","W20190928-034823":"Layout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\n\nnewLayout := RECORD\n  properties1;\n\tinteger flip_potential;\nend;\n  \nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(LEFT extcond) + getIntPoint(LEFT intCond) + \n     getYearPoint(LEFT year) + getAirPoint(LEFT airCond))/ 4);\nSELF := input;\nend;\n\n","W20190928-034156":"Layout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nfilteredlayout := RECORD\n  STRING category_code;\n  STRING exterior_condition;\n  STRING interior_condition;\n  STRING number_of_bathrooms;\n  STRING number_of_bedrooms;\n  STRING year_built;\n  STRING market_value;\n  STRING parcel_number;\n  STRING central_air;\nEND;\n\nfilteredlayout1 := RECORD\n  INTEGER category_code;\n  INTEGER exterior_condition;\n  INTEGER interior_condition;\n  INTEGER number_of_bathrooms;\n  INTEGER number_of_bedrooms;\n  INTEGER year_built;\n  INTEGER market_value;\n  INTEGER parcel_number;\n  String central_air;\nEND;\n\nourDs := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n//OUTPUT(ourDs, NAMED('Raw'));\n\ngetAirPoint(string airCond) := function //function definition for central_air point evaluation\n  return CASE(airCond, \n              'Y' => 6,\n              'N' => 1,\n      \t\t\t\t3);\nend;\n\nourDs1 := project(ourDs, transform(filteredlayout1, self.category_code := (integer)left.category_code, //changes raw data to integers\n                                  self.exterior_condition := (integer)left.exterior_condition,\n                                  self.interior_condition := (integer)left.interior_condition,\n                                  self.number_of_bathrooms := (integer)left.number_of_bathrooms,\n                                  self.central_air := left.central_air,\n                                  self.number_of_bedrooms := (integer)left.number_of_bedrooms,\n                  \t\t\t\t\t\t\t\tself.year_built := (integer)left.year_built,\n                  \t\t\t\t\t\t\t\tself.market_value := (integer)left.market_value,\n                  \t\t\t\t\t\t\t\tself.parcel_number := (integer)left.parcel_number\n                                  ));\n\n\nproperties := ourDs1(category_code = 1 );\nproperties1 := properties(exterior_condition in [4,5,6] OR interior_condition in [4,5,6,7]);\nproperties2 := properties1(number_of_bedrooms<> 0);\noutput(properties2[1..1000]);\n\n\ngetExtPoint(integer extCond) := function\n  return CASE(extCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\ngetIntPoint(integer intCond) := function\n  return CASE(intCond, \n              7 => 1,\n              6 => 3,\n              5 => 5,\n              4 => 5,\n              3 => 7,\n              2 => 9,\n              1 => 10,\n              0);\nend;\n\n\ngetYearPoint(integer year) := function\n  return CASE(ROUND(((2019-year)/10)),\n  \t\t\t\t\t\t12 => 1,\t  //oldest houses (1900s)\n  \t\t\t\t\t\t11 => 1,\n  \t\t\t\t\t\t10 => 1,\n  \t\t\t\t\t\t9 => 2,\n  \t\t\t\t\t\t8 => 2, \n  \t\t\t\t\t\t7 => 3,\n  \t\t\t\t\t\t6 => 3,\n  \t\t\t\t\t\t5 => 4,\n  \t\t\t\t\t\t4 => 4,     //1977 houses\n  \t\t\t\t\t\t3 => 5,\n  \t\t\t\t\t\t2 => 5,\n  \t\t\t\t\t\t1 => 6,\n  \t\t\t\t\t\t0 => 8,    //current houses (2010s+)\n  \t\t\t\t\t\t5);  \t\t\t\t\t\t\nend; \n\n\nnewLayout := RECORD\n  properties1;\n\tinteger flip_potential;\nend;\n  \nnewLayout FindPotential(properties1 input) := TRANSFORM\n  SELF.flip_potential := input\n    ((getExtPoint(input.extCond) + getIntPoint(input.intCond) + \n     getYearPoint(input.year) + getAirPoint(input.airCond))/ 4);\nSELF := input;\nend;\n\n","W20190927-202547":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\ndifferent := DATASET([allPeople.FirstName], {STRING15 FirstName});\n\n//  Outputs  ---\ndifferent;\n","W20190927-202535":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\ndifferent := DATASET([allPeople.FirstName], {STRING15 FirstName});\n\n//  Outputs  ---\nsomePeople;\n","W20190927-202518":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\ndifferent := DATASET(allPeople.FirstName, {STRING15 FirstName});\n\n//  Outputs  ---\nsomePeople;\n","W20190927-202509":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\ndifferent := DATASET(allPeople.FirstName, {STRING15 FirstName})\n\n//  Outputs  ---\nsomePeople;\n","W20190927-193737":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190927-193449":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nSTRING out(string firstName):=BEGINC++\n  #option pure\n  cout<<firstName<<endl;\n  \n  ENDC++;\n\n//  Outputs  ---\nsomePeople;\nout(FirstName);","W20190927-193537":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nSTRING out(string firstName):=BEGINC++\n  #option pure\n  cout<<firstName<<endl;\n  \n  ENDC++;\n\n//  Outputs  ---\nsomePeople;","W20190927-193519":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nSTRING out(string firstName):=BEGINC++\n  #option pure\n  cout<<firstName<<endl;\n  \n  ENDC++;\n\n//  Outputs  ---\nsomePeople:=out(FirstName);","W20190927-193602":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nSTRING out(string firstName):=BEGINC++\n  #option pure\n  cout<<firstName<<endl;\n  \n  ENDC++;\n\n//  Outputs  ---\nout(FirstName);","W20190927-193426":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nSTRING out(string firstName):=BEGINC++\n  \n  cout<<firstName<<endl;\n  \n  ENDC++;\n\n//  Outputs  ---\nsomePeople;\nout(FirstName);","W20190927-192259":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190927-180449":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\nLayout_Test := RECORD\n  //UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  //STRING25  LastName;\nEND;\n\ntest :=DATASET([allPeople.firstName], Layout_Test);\n\n\n//  Outputs  ---\n//somePeople;\ntest;\n","W20190927-180210":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\ntest :=DATASET(allPeople.firstName, allPeople.LastName);\n\n\n//  Outputs  ---\n//somePeople;\ntest;\n","W20190927-182907":"MyFunc(STRING DataIn, STRING1 SearchChar) := FUNCTION\n\n  StrLen := LENGTH(TRIM(dataIn));\n\tds := DATASET([{DataIn}],{STRING chars});\n\n\tOutRec := RECORD\n\t\tUNSIGNED1 flag;\n\tEND;\n\n\tOutRec Xform(ds L,INTEGER C) := TRANSFORM\n\t\tSELF.flag := IF(L.chars[C] = SearchChar,1,0);\n\tEND;\n\n\tn := NORMALIZE(ds,StrLen,Xform(LEFT,COUNTER));\n\n\tRETURN COUNT(n(flag=1));\n\t\nEND;\n\t\n\t\nOUTPUT(MyFunc('abc~xyz~def~fred','~'));\t","W20190927-180200":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\ntest :=DATASET(allPeople.firstName, LastName);\n\n\n//  Outputs  ---\n//somePeople;\ntest;\n","W20190927-180356":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\nLayout_Test := RECORD\n  //UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  //STRING25  LastName;\nEND;\n\ntest :=DATASET(allPeople.firstName, Layout_Test);\n\n\n//  Outputs  ---\n//somePeople;\ntest;\n","W20190927-180145":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\ntest :=DATASET(allPeople.firstName);\n\n\n//  Outputs  ---\n//somePeople;\ntest;\n","W20190927-171106":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople1 := sample(allPeople, 1, 2);\n\notherPeople2 := enth(allPeople, 1, 2, 2);\notherPeople3 := enth(allPeople, 1, 3, 4);\notherPeople4 := enth(allPeople, 1, 4, 2);\notherPeople1 := sample(allPeople, 2, 1);\notherPeople1 := sample(allPeople, 1, 3);\notherPeople1 := sample(allPeople, 3, 1);\notherPeople1 := sample(allPeople, 3, 2);\n\n//  Outputs  ---\nsomePeople;\notherPeople;\n","W20190927-171615":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople1 := enth(allPeople, 2, 3, 1);\notherPeople2 := sample(allPeople, 3, 1);\n\notherPeople3 := enth(allPeople, 3, 4, 1);\notherPeople4 := sample(allPeople, 4, 1);\n\n\n/*\notherPeople1 := sample(allPeople, 1, 2);\n\notherPeople2 := enth(allPeople, 1, 2, 2);\notherPeople3 := enth(allPeople, 1, 3, 4);\notherPeople4 := enth(allPeople, 1, 4, 2);\notherPeople5 := sample(allPeople, 2, 1);\notherPeople6 := sample(allPeople, 1, 3);\n\notherPeople8 := sample(allPeople, 3, 2);\n*/\n//  Outputs  ---\nsomePeople1;\notherPeople2;\notherPeople3;\notherPeople4;\n","W20190927-171136":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople1 := sample(allPeople, 1, 2);\n\notherPeople2 := enth(allPeople, 1, 2, 2);\notherPeople3 := enth(allPeople, 1, 3, 4);\notherPeople4 := enth(allPeople, 1, 4, 2);\notherPeople5 := sample(allPeople, 2, 1);\notherPeople6 := sample(allPeople, 1, 3);\notherPeople7 := sample(allPeople, 3, 1);\notherPeople8 := sample(allPeople, 3, 2);\n\n//  Outputs  ---\nsomePeople;\notherPeople1;\notherPeople2;\notherPeople3;\notherPeople4;\notherPeople5;\notherPeople6;\notherPeople7;\notherPeople8;\n","W20190927-171526":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople1 := enth(allPeople, 2, 3, 1);\notherPeople2 := sample(allPeople, 3, 1);\n\notherPeople3 := enth(allPeople, 2, 4, 1);\notherPeople4 := sample(allPeople, 4, 1);\n\n\n/*\notherPeople1 := sample(allPeople, 1, 2);\n\notherPeople2 := enth(allPeople, 1, 2, 2);\notherPeople3 := enth(allPeople, 1, 3, 4);\notherPeople4 := enth(allPeople, 1, 4, 2);\notherPeople5 := sample(allPeople, 2, 1);\notherPeople6 := sample(allPeople, 1, 3);\n\notherPeople8 := sample(allPeople, 3, 2);\n*/\n//  Outputs  ---\nsomePeople1;\notherPeople2;\notherPeople3;\notherPeople4;\n","W20190927-175935":"IMPORT $.^ AS CR_SP;\r\nmale_crimes := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\n\r\nMALE_DATA_CRIME := RECORD\r\n\tmale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(male_crimes, RUBRICA), MALE_DATA_CRIME, RUBRICA);\r\nblack_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nwhite_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_men, -total));\r\nOUTPUT(SORT(white_men, -total));\r\n","W20190927-170826":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople := enth(allPeople, 1, 2, 2);\n\n\n//  Outputs  ---\nsomePeople;\notherPeople;\n","W20190927-170758":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople := enth(allPeople, 1, 2, 2);\n\n\n//  Outputs  ---\nsomePeople;\notherPeople;\n","W20190927-170652":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople := enth(allPeople, 1, 2, 3);\n\n\n//  Outputs  ---\nsomePeople;\notherPeople;\n","W20190927-170640":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople := enth(allPeople, 1, 2, 2);\n\n\n//  Outputs  ---\nsomePeople;\notherPeople;\n","W20190927-170612":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople := enth(allPeople, 1, 3, 2);\n\n\n//  Outputs  ---\nsomePeople;\notherPeople;\n","W20190927-170717":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\notherPeople := enth(allPeople, 0, 3, 3);\n\n\n//  Outputs  ---\nsomePeople;\notherPeople;\n","W20190927-170709":"IMPORT $.^ AS CR_SP;\r\nmale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.male_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\n\r\nMALE_DATA_CRIME := RECORD\r\n\tmale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(male_crimes, RUBRICA), MALE_DATA_CRIME, RUBRICA);\r\nblack_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nwhite_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_men, -total));\r\nOUTPUT(SORT(white_men, -total));\r\n","W20190927-170530":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 3, 1);\n\n\n//  Outputs  ---\nsomePeople;\n","W20190927-170523":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 2, 2, 1);\n\n\n//  Outputs  ---\nsomePeople;\n","W20190927-170509":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 1, 2, 2);\n\n\n//  Outputs  ---\nsomePeople;\n","W20190927-170457":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePeople := enth(allPeople, 1, 2, 1);\n\n\n//  Outputs  ---\nsomePeople;\n","W20190927-170444":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePoeple := enth(allPeople, 1, 2, 1);\n\n\n//  Outputs  ---\nsomePeople;\n","W20190927-170429":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'},\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePoeple := enthPeople(allPeople, 1, 2, 1);\n\n\n//  Outputs  ---\nsomePeople;\n","W20190927-023726":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING building_code;\nSTRING building_code_description;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING interior_condition;\n    STRING location;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n\n   \nEND;\n\n// Change the file name based on your username, workspace name and raw file name in below format:\n// '~USERNMAE::WORKSPACENAME::RAWFILENAME'\n// For example, if your usename is Mike and you created a worksplace 'HPCCSystems'.\n// The raw file you uploaded is 'test.csv'.Then the file name inside the DATASET() function should be\n//  '~Mike::HPCCSystems::test.csv'\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw, NAMED('Raw'));\n\n// Read the Original full Property Assessment dataset\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\nOUTPUT(CHOOSEN(propertyDS, 100), NAMED('PropertyDS'));","W20190927-015759":"/*\n    Example code - use without restriction.  \n*/\nproperty_Layout := RECORD\n  STRING\tPropertyName;\n  UNSIGNED  MarketValue;\n  UNSIGNED  TaxValue;\nEND;\n\nallProperty := DATASET([ {'House1',329000,450000},\n                       {'House2',339000,458000},\n                       {'House3',385000,459000}],property_Layout);\n\nsomeProperty := allProperty(TaxValue >=450000);\n\n//  Outputs  ---\nsomeProperty;\n","W20190927-170422":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'},\n                       {4,'Joe','Bob'}\n                       {5,'Billy','AM'}, \n                       {6,'Jim','BM'},\n                       {7,'John','CM'}],Layout_Person);\n\n//somePeople := allPeople(LastName = 'Smith');\nsomePoeple := enthPeople(allPeople, 1, 2, 1);\n\n\n//  Outputs  ---\nsomePeople;\n","W20190927-015348":"/*\n    Example code - use without restriction.  \n*/\nproperty_Layout := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallProperty := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],property_Layout);\n\nsomeProperty := allProperty(LastName = 'Smith');\n\n//  Outputs  ---\nsomeProperty;\n","W20190927-015248":"/*\n    Example code - use without restriction.  \n*/\nproperty_Layout := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallProperty := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomeProperty := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomeProperty;\n","W20190927-015048":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190927-015027":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([:= ksu ::hackathon::opa_properties_public.csv', Layout,\nCSV(HEADING(1)));],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-235155":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(PersonID > 1, LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-235205":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(PersonID > 1, LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20190927-012611":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-200344":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  DECIMAL8_2  GroupNo;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,2,'Bill'},\n                       {2,2,'Blow'},\n                       {3,5,'Smith'}],Layout_Person);\n\nsomePeople := allPeople(GroupNo = 2);\n\n//  Outputs  ---\nsomePeople;\n","W20190926-200331":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  DECIMAL8_2  GroupNo;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,2,'Smith'},\n                       {2,2,'Blow'},\n                       {3,5,'Smith'}],Layout_Person);\n\nsomePeople := allPeople(GroupNo = 2);\n\n//  Outputs  ---\nsomePeople;\n","W20190926-194051":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Blow');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-194034":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'blow\n                        ');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-193751":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-193641":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-183818":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File,RUBRICA);\r\n\r\nTOTAL_CRIME := RECORD\r\n\tall_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nCRIME_SPECS := TABLE(all_crimes,TOTAL_CRIME,RUBRICA);\r\nOUTPUT(SORT(CRIME_SPECS,-total));","W20190926-193631":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190926-153835":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nr := RECORD\n\tUNSIGNED2 serial_no_;\n\tUNSIGNED2 gre_score;\n\tUNSIGNED2 toefl_score;\n\tUNSIGNED1 university_rating;\n\tREAL4 sop;\n\tREAL4 lor;\n\tREAL4 cgpa;\n    UNSIGNED1 research;\n    REAL4 chance_of_admit;\nEND;\n\nds := DATASET(filePath, r, CSV(HEADING(1)));\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190926-153900":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nr := RECORD\n\tUNSIGNED2 serial_no_;\n\tUNSIGNED2 gre_score;\n\tUNSIGNED2 toefl_score;\n\tUNSIGNED1 university_rating;\n\tREAL4 sop;\n\tREAL4 lor;\n\tREAL4 cgpa;\n    UNSIGNED1 research;\n    REAL4 chance_of_admit;\nEND;\n\nds := DATASET(filePath, r, CSV(HEADING(1)));\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190926-153245":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), IDADE_PESSOA);\r\nwoman_victims := crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender);\r\nmen_victims := crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender);\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nwoman_info := TABLE(woman_victims(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nmen_info := TABLE(men_victims(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\n\r\nOUTPUT(age_info);\r\nOUTPUT(SORT(woman_info,-total_victims));\r\nOUTPUT(SORT(men_info,-total_victims));","W20190926-153331":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), IDADE_PESSOA);\r\nwoman_victims := crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender);\r\nmen_victims := crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender);\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nwoman_info := TABLE(woman_victims(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nmen_info := TABLE(men_victims(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\n\r\nOUTPUT(age_info);\r\nOUTPUT(SORT(woman_info,-total_victims));\r\nOUTPUT(SORT(men_info,IDADE_PESSOA));","W20190926-152210":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nr := RECORD\n\tUNSIGNED2 serial_no_;\n\tUNSIGNED2 gre_score;\n\tUNSIGNED2 toefl_score;\n\tUNSIGNED1 university_rating;\n\tREAL4 sop;\n\tREAL4 lor;\n\tREAL4 cgpa;\n    UNSIGNED1 research;\n    REAL4 chance_of_admit;\nEND;\n\nds := DATASET(filePath, r, CSV(HEADING(1)));\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190926-151845":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nr := RECORD\n\tUNSIGNED2 serial_no_;\n\tUNSIGNED2 gre_score;\n\tUNSIGNED2 toefl_score;\n\tUNSIGNED1 university_rating;\n\tREAL4 sop;\n\tREAL4 lor;\n\tREAL4 cgpa;\n    UNSIGNED1 research;\n    REAL4 chance_of_admit;\nEND;\n\nds := DATASET(filePath, r, CSV(HEADING(1)));\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190926-144235":"IMPORT ^ as DataPatterns;\n\nfilePath1 := '~.::kaggle_01.csv';\nds1 := DATASET(filePath1, RECORDOF(filePath1, LOOKUP), CSV);\nprofileResults1 := DataPatterns.Profile(ds1);\nOUTPUT(profileResults1, ALL, NAMED('profileResults1'));\n\n\nfilePath2 := '~.::kaggle_02.csv';\nds2 := DATASET(filePath2, RECORDOF(filePath2, LOOKUP), CSV);\nprofileResults2 := DataPatterns.Profile(ds2);\nOUTPUT(profileResults2, ALL, NAMED('profileResults2'));\n\n\nfilePath3 := '~.::kaggle_03.csv';\nds3 := DATASET(filePath3, RECORDOF(filePath3, LOOKUP), CSV);\nprofileResults3 := DataPatterns.Profile(ds3);\nOUTPUT(profileResults3, ALL, NAMED('profileResults3'));\n\n\nfilePath4 := '~.::kaggle_04.csv';\nds4 := DATASET(filePath4, RECORDOF(filePath4, LOOKUP), CSV);\nprofileResults4 := DataPatterns.Profile(ds4);\nOUTPUT(profileResults4, ALL, NAMED('profileResults4'));\n\n\nfilePath5 := '~.::kaggle_05.csv';\nds5 := DATASET(filePath5, RECORDOF(filePath5, LOOKUP), CSV);\nprofileResults5 := DataPatterns.Profile(ds5);\nOUTPUT(profileResults5, ALL, NAMED('profileResults5'));\n\n\nfilePath6 := '~.::kaggle_06.csv';\nds6 := DATASET(filePath6, RECORDOF(filePath6, LOOKUP), CSV);\nprofileResults6 := DataPatterns.Profile(ds6);\nOUTPUT(profileResults6, ALL, NAMED('profileResults6'));\n\n\nfilePath7 := '~.::kaggle_07.csv';\nds7 := DATASET(filePath7, RECORDOF(filePath7, LOOKUP), CSV);\nprofileResults7 := DataPatterns.Profile(ds7);\nOUTPUT(profileResults7, ALL, NAMED('profileResults7'));\n\n\nfilePath8 := '~.::kaggle_08.csv';\nds8 := DATASET(filePath8, RECORDOF(filePath8, LOOKUP), CSV);\nprofileResults8 := DataPatterns.Profile(ds8);\nOUTPUT(profileResults8, ALL, NAMED('profileResults8'));\n\n\nfilePath9 := '~.::kaggle_09.csv';\nds9 := DATASET(filePath9, RECORDOF(filePath9, LOOKUP), CSV);\nprofileResults9 := DataPatterns.Profile(ds9);\nOUTPUT(profileResults9, ALL, NAMED('profileResults9'));","W20190926-150537":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::690150_noheader.csv';\n\nr := RECORD\n\tUNSIGNED2 serial_no_;\n\tUNSIGNED2 gre_score;\n\tUNSIGNED2 toefl_score;\n\tUNSIGNED1 university_rating;\n\tREAL4 sop;\n\tREAL4 lor;\n\tREAL4 cgpa;\n    UNSIGNED1 research;\n    REAL4 chance_of_admit;\nEND;\n\nds := DATASET(filePath, r, CSV(HEADING(1)));\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190926-150623":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nr := RECORD\n\tUNSIGNED2 serial_no_;\n\tUNSIGNED2 gre_score;\n\tUNSIGNED2 toefl_score;\n\tUNSIGNED1 university_rating;\n\tREAL4 sop;\n\tREAL4 lor;\n\tREAL4 cgpa;\n    UNSIGNED1 research;\n    REAL4 chance_of_admit;\nEND;\n\nds := DATASET(filePath, r, CSV(HEADING(1)));\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190926-143621":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));\n\nfilePath2 := '~.::kaggle_02.csv';\n\nds2 := DATASET(filePath2, RECORDOF(filePath2, LOOKUP), CSV);\n\nprofileResults2 := DataPatterns.Profile(ds2);\n\nOUTPUT(profileResults2, ALL, NAMED('profileResults2'));","W20190926-145854":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV(HEADING(1)));\n\nprofileResults := DataPatterns.BestRecordStructure(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190925-202532":"/*\n    Example code - use without restriction.  \n*/\nmodP := MODULE\n  export PersonID := 5;\nEND;\n\nmactxt(inmod) := functionmacro\n  return #text(#expand(inmod)); \n  \n  endmacro;\n                      \noutput(mactxt(modp));\n\n//  Outputs  --\n","W20190925-202449":"/*\n    Example code - use without restriction.  \n*/\nmodP := MODULE\n  export PersonID := 5;\nEND;\n\nmactxt(inmod) := functionmacro\n  return #text(inmod); \n  \n  endmacro;\n                      \noutput(mactxt(modp));\n\n//  Outputs  --\n","W20190925-202339":"/*\n    Example code - use without restriction.  \n*/\nmodP := MODULE\n  export PersonID := 5;\nEND;\n\nmactxt(inmod) := functionmacro\n  return #text(inmod); \n  \n  end;\n                      \noutput(mactxt(modp));\n\n//  Outputs  --\n","W20190925-202403":"/*\n    Example code - use without restriction.  \n*/\nmodP := MODULE\n  export PersonID := 5;\nEND;\n\nmactxt(inmod) := functionmacro\n  return #text(inmod); \n  \n  endmacro;\n                      \noutput(mactxt(modp));\n\n//  Outputs  --\n","W20190925-181704":"IMPORT $.^ AS CR_SP;\r\n\r\nfull_theft_crime := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND\r\n(RUBRICA = 'A.I.-ESTUPRO DE VULNERAVEL (ART.217-A)' OR RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)'));\r\n\r\ncrime_lat_lon := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tCR_SP.clean_bo.File.LATITUDE;\r\n\tCR_SP.clean_bo.File.LONGITUDE;\r\n\tCR_SP.clean_bo.File.SEXO_PESSOA;\r\n\tESTADO := 'SÃO PAULO';\r\nEND;\r\n\r\n\r\ncoordinate_crime := PROJECT(full_theft_crime(LATITUDE != 0 AND LONGITUDE != 0), crime_lat_lon);\r\n\r\nOUTPUT(coordinate_crime,,'ERM::SP_CRIMES::COORDINATE_CRAPE',OVERWRITE);\r\n","W20190925-145632-4":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~jj5::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj5::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190925-145632-2":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj5::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj5::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190925-145632":"FakePeople:=RECORD\n\tstring14 first_name;\n\tstring15 last_name;\n\tstring39 email;\n\tstring12 phone;\nEND;\nDS := DATASET('~jj5::ksu_workshop::fake_people.csv',FakePeople,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj5::ksu_workshop::fake_people.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190925-113305":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190925-113250":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190925-112600":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 95}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-113312":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190925-112148":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 95}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-104248":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 95}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-101238":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 95}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-101229":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 95}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-101157":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 95}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-101150":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 25}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-100206":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 25}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-100118":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 25}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-100037":"r := RECORD\n  STRING20 Subject;\n  INTEGER4 Result;\nEND;\n\nd := DATASET([\n\t{'English', 92}, \n\t{'French', 86}, \n\t{'Irish', 80}, \n\t{'Math', 98}, \n\t{'Geography', 55}, \n\t{'Computers', 25}], r);\nOUTPUT(d, {Label := Subject, Value := Result}, NAMED('BarChart'));\n","W20190925-100016":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190925-012723":"ds:=dataset([],{unsigned1 n});\nds1:=dataset([{1}],{unsigned1 n});\n\nif(false,ds,ds1);\n","W20190925-012715":"ds:=dataset([],{unsigned1 n});\nds1:=dataset([{1}],{unsigned1 n});\n\nif(true,ds,ds1);\n","W20190925-012656":"ds:=[];\nds1:=dataset([{1}],{unsigned1 n});\n\nif(true,ds,ds1);\n","W20190925-012637":"ds:=[];\nds1:=dataset([{1}],{unsigned1 n});\n\nk:=true;\nif(k,ds,ds1);\nds;\nds1;","W20190925-012603":"ds:=[];\nds1:=dataset([{1}],{unsigned1 n});\n\nds;\nds1;","W20190924-181214":"IMPORT $.^ AS CR_SP;\r\n\r\nfull_theft_crime := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND\r\n(RUBRICA = 'ROUBO (ART. 157)' OR RUBRICA = 'A.I.-ROUBO (ART. 157)') AND\r\nCIDADE = 'S.PAULO');\r\n\r\ncrime_lat_lon := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tCR_SP.clean_bo.File.LATITUDE;\r\n\tCR_SP.clean_bo.File.LONGITUDE;\r\n\tESTADO := 'SÃO PAULO';\r\nEND;\r\n\r\n\r\ncoordinate_crime := PROJECT(full_theft_crime(LATITUDE != 0 AND LONGITUDE != 0), crime_lat_lon);\r\n\r\nOUTPUT(coordinate_crime,,'ERM::SP_CRIMES::COORDINATE_THEFT',OVERWRITE);\r\n","W20190924-165905":"IMPORT $.^ AS CR_SP;\r\n\r\nfull_theft_crime := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND\r\n(RUBRICA = 'ROUBO (ART. 157)' OR RUBRICA = 'A.I.-ROUBO (ART. 157)'));\r\n\r\ncrime_lat_lon := RECORD\r\n\tCR_SP.clean_bo.File.LATITUDE;\r\n\tCR_SP.clean_bo.File.LONGITUDE;\r\nEND;\r\n\r\ncrime_city := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tESTADO := 'SÃO PAULO';\r\nEND;\r\n\r\ncoordinate_crime := PROJECT(full_theft_crime(LATITUDE != 0 AND LONGITUDE != 0), crime_lat_lon);\r\ncity_crime := PROJECT(full_theft_crime, crime_city);\r\n\r\nOUTPUT(coordinate_crime,,'ERM::SP_CRIMES::COORDINATE_THEFT',OVERWRITE);\r\nOUTPUT(city_crime,,'ERM::SP_CRIMES::CITIES_THEFT',OVERWRITE);","W20190924-165653":"IMPORT $.^ AS CR_SP;\r\n\r\nfull_theft_crime := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND\r\n(RUBRICA = 'ROUBO (ART. 157)' OR RUBRICA = 'A.I.-ROUBO (ART. 157)'));\r\n\r\ncrime_lat_lon := RECORD\r\n\tCR_SP.clean_bo.File.LATITUDE;\r\n\tCR_SP.clean_bo.File.LONGITUDE;\r\nEND;\r\n\r\ncrime_city := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tESTADO := 'SÃO PAULO';\r\nEND;\r\n\r\ncoordinate_crime := PROJECT(full_theft_crime, crime_lat_lon);\r\ncity_crime := PROJECT(full_theft_crime, crime_city);\r\n\r\nOUTPUT(coordinate_crime,,'ERM::SP_CRIMES::COORDINATE_THEFT',OVERWRITE);\r\nOUTPUT(city_crime,,'ERM::SP_CRIMES::CITIES_THEFT',OVERWRITE);","W20190923-175713":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw(book_and_page='8250507'));\n\n//Step 2: Data Validation\n//validSet := raw( (INTEGER) year_built > 2018 AND (INTEGER) year_built < 1900 );\n//OUTPUT(validSet);","W20190923-194020":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190923-175544":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw(book_and_page='8250507'));\n\n//Step 2: Data Validation\n//validSet := raw( (INTEGER) year_built > 2018 AND (INTEGER) year_built < 1900 );\n//OUTPUT(validSet);","W20190923-194006":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190923-175623":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190923-175523":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw(book_and_page='8250507'));\n\n//Step 2: Data Validation\n//validSet := raw( (INTEGER) year_built > 2018 AND (INTEGER) year_built < 1900 );\n//OUTPUT(validSet);","W20190923-175500":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190923-175342":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw(book_and_page='8250507'));\n\n//Step 2: Data Validation\n//validSet := raw( (INTEGER) year_built > 2018 AND (INTEGER) year_built < 1900 );\n//OUTPUT(validSet);","W20190923-175333":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw(book_and_page='8250507'));\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2018 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190923-150452":"IMPORT $.^ AS CR_SP;\r\nfemale_crimes := SORT(CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.female_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),RUBRICA);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(female_crimes, FEMALE_DATA_CRIME, RUBRICA);\r\nblack_woman := TABLE(female_crimes(COR IN CR_SP.race_types.race_negro), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(female_crimes(COR IN CR_SP.race_types.race_branco), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(black_woman);\r\nOUTPUT(white_woman);\r\n","W20190923-150148":"OUTPUT(\n\n  JOIN(  \n    \n    DATASET([{1, 'Mary', 'Peters'}, \n                        {2, 'John', 'Smith'}], \n                        {STRING1 id, STRING25 first, STRING25 last}),\n\n    DATASET([{1, 101000}, {2,99000}], \n                     {STRING1 id, REAL salary}),\n\n    LEFT.id=RIGHT.id                  \n\n  ) \n\n);\n","W20190923-144612":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190923-144000":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n\npropertyDS;","W20190923-150006":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n\noutput(propertyDS);","W20190923-144119":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190923-144651":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, CSV(HEADING(1)));\n\npropertyDS;","W20190922-212506":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190923-143916":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\npropertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, \t\t\t\t\t\t\t\t\t\tCSV(HEADING(1)));\n\npropertyDS;","W20190923-143755":"propertyDS := DATASET('~ksu::hackathon::opa_properties_public.csv', Layout, \t\t\t\t\t\t\t\t\t\tCSV(HEADING(1)));\n\npropertyDS;","W20190923-143018":"IMPORT KMeans;\nIMPORT ML_Core;\n\nRaw_data := KMeans.Test.Datasets.DSIris.ds;\n//Hold the raw data in machine learning dataframes such as NumericField\n// Add id to each record\nML_Core.AppendSeqId(raw_data, id, Raw_with_id);\n// Transform the records to NumericField dataframe\nML_Core.ToField(Raw_with_id, ML_data);\n\n//Initialization\nCentroids := ML_data(id IN [1, 51, 101]);\n\n//Setup model parameters\nMax_iterations := 30;\nTolerance := 0.03;\n\n//Train K-Means Model\n//Setup the model\nPre_Model := KMeans.KMeans(Max_iterations, Tolerance);\n//Train the model\nModel := Pre_Model.Fit( ML_Data(number < 5), Centroids(number < 5));\n\n//Coordinates of cluster centers\nCenters := KMeans.KMeans().Centers(Model);\nOUTPUT(SORT(centers, wi, id, number), NAMED('centers'));\n","W20190922-193224":"MyRec := RECORD\n\tINTEGER2 Value1;\n\tINTEGER2 Value2;\nEND;\n\nSomeFile := DATASET([{10,0},\n\t\t\t\t\t {20,0},\n\t\t\t\t\t {30,0},\n\t\t\t\t\t {40,0},\n\t\t\t\t\t {50,0}],MyRec);\n\nMyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value2 := L.Value2 + R.Value1;\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n\n/* Processes as:\n\tLEFT.Value2   RIGHT.Value1\n\t\t0 (0)\t\t\t1 (10)\t\t- 0 + 10 = 10\n\t\t1 (10)\t\t\t2 (20)\t\t- 10 + 20 = 30\n\t\t2 (30)\t\t\t3 (30)\t\t- 30 + 30 = 60\n\t\t3 (60)\t\t\t4 (40)\t\t- 60 + 40 = 100\n\t\t4 (100)\t\t\t5 (50)\t\t- 100 + 50 = 150\n\nAddedRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\t10\t\t10\n\t2\t\t20\t\t30\t\n\t3\t\t30\t\t60\n\t4\t\t40\t\t100\n\t5\t\t50\t\t150\n*/","W20190923-032537":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190922-015110":"SomeFile := DATASET([{'A'},{'B'},{'C'},{'D'},{'E'},\n                     {'F'},{'G'},{'H'},{'I'},{'J'},\n                     {'K'},{'L'},{'M'},{'N'},{'O'},\n                     {'P'},{'Q'},{'R'},{'S'},{'T'},\n                     {'U'},{'V'},{'W'},{'X'},{'Y'}],\n\t\t\t\t\t{STRING1 Letter});\n\nSet1 := SAMPLE(SomeFile,5,1);\nSet2 := SAMPLE(SomeFile,10,3);\nSet3 := SAMPLE(SomeFile,5,3);\nSet4 := SAMPLE(SomeFile,20,4);\nSet5 := SAMPLE(SomeFile,5,5);\n\nOUTPUT(Set1);\nOUTPUT(Set2);\nOUTPUT(Set3);\nOUTPUT(Set4);\nOUTPUT(Set5);\n/* When run on hthor, the expected results are:\n\t\t\tSet1:\t\tSet2:\t\tSet3:\t\tSet4:\t\tSet5:\n\tRec#\tLetter\t\tLetter\t\tLetter\t\tLetter\t\tLetter\n\t1\t\tA\t\t\tB\t\t\tC\t\t\tD\t\t\tE\n\t2\t\tF\t\t\tG\t\t\tH\t\t\tI\t\t\tJ\n\t3\t\tK\t\t\tL\t\t\tM\t\t\tN\t\t\tO\n\t4\t\tP\t\t\tQ\t\t\tR\t\t\tS\t\t\tT\n\t5\t\tU\t\t\tV\t\t\tW\t\t\tX\t\t\tY\n*/","W20190922-015204":"MyRec := RECORD\n\tINTEGER2 Value1;\n\tINTEGER2 Value2;\nEND;\n\nSomeFile := DATASET([{10,0},\n\t\t\t\t\t {20,0},\n\t\t\t\t\t {30,0},\n\t\t\t\t\t {40,0},\n\t\t\t\t\t {50,0}],MyRec);\n\nMyRec AddThem(MyRec L, MyRec R) := TRANSFORM\n\tSELF.Value2 := L.Value2 + R.Value1;\n\tSELF := R;\nEND;\n\nAddedRecs := ITERATE(SomeFile,AddThem(LEFT,RIGHT));\n\noutput(AddedRecs);\n\n/* Processes as:\n\tLEFT.Value2   RIGHT.Value1\n\t\t0 (0)\t\t\t1 (10)\t\t- 0 + 10 = 10\n\t\t1 (10)\t\t\t2 (20)\t\t- 10 + 20 = 30\n\t\t2 (30)\t\t\t3 (30)\t\t- 30 + 30 = 60\n\t\t3 (60)\t\t\t4 (40)\t\t- 60 + 40 = 100\n\t\t4 (100)\t\t\t5 (50)\t\t- 100 + 50 = 150\n\nAddedRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\t10\t\t10\n\t2\t\t20\t\t30\t\n\t3\t\t30\t\t60\n\t4\t\t40\t\t100\n\t5\t\t50\t\t150\n*/","W20190922-015046":"SomeFile := DATASET([{'A'},{'B'},{'C'},{'D'},{'E'},\n                     {'F'},{'G'},{'H'},{'I'},{'J'},\n                     {'K'},{'L'},{'M'},{'N'},{'O'},\n                     {'P'},{'Q'},{'R'},{'S'},{'T'},\n                     {'U'},{'V'},{'W'},{'X'},{'Y'}],\n\t\t\t\t\t{STRING1 Letter});\n\nSet1 := SAMPLE(SomeFile,5,2);\nSet2 := SAMPLE(SomeFile,10,2);\nSet3 := SAMPLE(SomeFile,5,3);\nSet4 := SAMPLE(SomeFile,20,4);\nSet5 := SAMPLE(SomeFile,5,5);\n\nOUTPUT(Set1);\nOUTPUT(Set2);\nOUTPUT(Set3);\nOUTPUT(Set4);\nOUTPUT(Set5);\n/* When run on hthor, the expected results are:\n\t\t\tSet1:\t\tSet2:\t\tSet3:\t\tSet4:\t\tSet5:\n\tRec#\tLetter\t\tLetter\t\tLetter\t\tLetter\t\tLetter\n\t1\t\tA\t\t\tB\t\t\tC\t\t\tD\t\t\tE\n\t2\t\tF\t\t\tG\t\t\tH\t\t\tI\t\t\tJ\n\t3\t\tK\t\t\tL\t\t\tM\t\t\tN\t\t\tO\n\t4\t\tP\t\t\tQ\t\t\tR\t\t\tS\t\t\tT\n\t5\t\tU\t\t\tV\t\t\tW\t\t\tX\t\t\tY\n*/","W20190922-015013":"SomeFile := DATASET([{'A'},{'B'},{'C'},{'D'},{'E'},\n                     {'F'},{'G'},{'H'},{'I'},{'J'},\n                     {'K'},{'L'},{'M'},{'N'},{'O'},\n                     {'P'},{'Q'},{'R'},{'S'},{'T'},\n                     {'U'},{'V'},{'W'},{'X'},{'Y'}],\n\t\t\t\t\t{STRING1 Letter});\n\nSet1 := SAMPLE(SomeFile,5,2);\nSet2 := SAMPLE(SomeFile,5,2);\nSet3 := SAMPLE(SomeFile,5,3);\nSet4 := SAMPLE(SomeFile,5,4);\nSet5 := SAMPLE(SomeFile,5,5);\n\nOUTPUT(Set1);\nOUTPUT(Set2);\nOUTPUT(Set3);\nOUTPUT(Set4);\nOUTPUT(Set5);\n/* When run on hthor, the expected results are:\n\t\t\tSet1:\t\tSet2:\t\tSet3:\t\tSet4:\t\tSet5:\n\tRec#\tLetter\t\tLetter\t\tLetter\t\tLetter\t\tLetter\n\t1\t\tA\t\t\tB\t\t\tC\t\t\tD\t\t\tE\n\t2\t\tF\t\t\tG\t\t\tH\t\t\tI\t\t\tJ\n\t3\t\tK\t\t\tL\t\t\tM\t\t\tN\t\t\tO\n\t4\t\tP\t\t\tQ\t\t\tR\t\t\tS\t\t\tT\n\t5\t\tU\t\t\tV\t\t\tW\t\t\tX\t\t\tY\n*/","W20190922-014937":"SomeFile := DATASET([{'A'},{'B'},{'C'},{'D'},{'E'},\n                     {'F'},{'G'},{'H'},{'I'},{'J'},\n                     {'K'},{'L'},{'M'},{'N'},{'O'},\n                     {'P'},{'Q'},{'R'},{'S'},{'T'},\n                     {'U'},{'V'},{'W'},{'X'},{'Y'}],\n\t\t\t\t\t{STRING1 Letter});\n\nSet1 := SAMPLE(SomeFile,5,1);\nSet2 := SAMPLE(SomeFile,5,2);\nSet3 := SAMPLE(SomeFile,5,3);\nSet4 := SAMPLE(SomeFile,5,4);\nSet5 := SAMPLE(SomeFile,5,5);\n\nOUTPUT(Set1);\nOUTPUT(Set2);\nOUTPUT(Set3);\nOUTPUT(Set4);\nOUTPUT(Set5);\n/* When run on hthor, the expected results are:\n\t\t\tSet1:\t\tSet2:\t\tSet3:\t\tSet4:\t\tSet5:\n\tRec#\tLetter\t\tLetter\t\tLetter\t\tLetter\t\tLetter\n\t1\t\tA\t\t\tB\t\t\tC\t\t\tD\t\t\tE\n\t2\t\tF\t\t\tG\t\t\tH\t\t\tI\t\t\tJ\n\t3\t\tK\t\t\tL\t\t\tM\t\t\tN\t\t\tO\n\t4\t\tP\t\t\tQ\t\t\tR\t\t\tS\t\t\tT\n\t5\t\tU\t\t\tV\t\t\tW\t\t\tX\t\t\tY\n*/","W20190922-014848":"SomeFile := DATASET([{'A'},{'B'},{'C'},{'D'},{'E'},\n                     {'F'},{'G'},{'H'},{'I'},{'J'},\n                     {'K'},{'L'},{'M'},{'N'},{'O'},\n                     {'P'},{'Q'},{'R'},{'S'},{'T'},\n                     {'U'},{'V'},{'W'},{'X'},{'Y'}],\n\t\t\t\t\t{STRING1 Letter});\n\nSet1 := SAMPLE(SomeFile,5,1);\nSet2 := SAMPLE(SomeFile,5,2);\nSet3 := SAMPLE(SomeFile,5,3);\nSet4 := SAMPLE(SomeFile,5,4);\nSet5 := SAMPLE(SomeFile,10,5);\n\nOUTPUT(Set1);\nOUTPUT(Set2);\nOUTPUT(Set3);\nOUTPUT(Set4);\nOUTPUT(Set5);\n/* When run on hthor, the expected results are:\n\t\t\tSet1:\t\tSet2:\t\tSet3:\t\tSet4:\t\tSet5:\n\tRec#\tLetter\t\tLetter\t\tLetter\t\tLetter\t\tLetter\n\t1\t\tA\t\t\tB\t\t\tC\t\t\tD\t\t\tE\n\t2\t\tF\t\t\tG\t\t\tH\t\t\tI\t\t\tJ\n\t3\t\tK\t\t\tL\t\t\tM\t\t\tN\t\t\tO\n\t4\t\tP\t\t\tQ\t\t\tR\t\t\tS\t\t\tT\n\t5\t\tU\t\t\tV\t\t\tW\t\t\tX\t\t\tY\n*/","W20190922-012134":"\nds := DATASET([{'the fox; and the hen'}], {STRING100 line});\n\nPATTERN ws        \t:= PATTERN('[ \\t\\r\\n]');\nPATTERN Alpha     \t:= PATTERN('[A-Za-z]');\nPATTERN Word      \t:= Alpha+;\nPATTERN Article   \t:= ['the', 'A'];\nPATTERN JustAWord \t:= Word PENALTY(1);\nPATTERN notHen \t:= VALIDATE(Word, MATCHTEXT != 'hen');\nPATTERN NoHenWord \t:= notHen PENALTY(1);\nRULE NounPhraseComp1  := JustAWord | Article ws Word;\nRULE NounPhraseComp2  := NoHenWord | Article ws Word;\n\nps1 := {STRING100\tout1 := MATCHTEXT(NounPhraseComp1) };\nps2 := {STRING100\tout2 := MATCHTEXT(NounPhraseComp2) };\n\np1 := PARSE(ds, line, NounPhraseComp1, ps1, BEST, MANY, NOCASE);\np2 := PARSE(ds, line, NounPhraseComp2, ps2,BEST, MANY, NOCASE);\n\noutput(p1);\noutput(p2);\n\n\ndatafile := DATASET([\n\t\t\t\t\t\t{'Ge 34:2 And when Shechem the son of Hamor the Hivite, prince of the country, saw her,'+\n\t\t\t\t\t\t ' he took her, and lay with her, and defiled her.'},\n\t\t\t\t\t\t{'Ge 36:10 These are the names of Esaus sons; Eliphaz the son of Adah the wife of Esau,'+\n\t\t\t\t\t\t ' Reuel the son of Bashemath the wife of Esau.'}],\n\t\t\t\t\t\t\t\t\t\t{STRING150 line}); \nPATTERN ws1 \t\t  := [' ','\\t',','];\nPATTERN ws2      \t:= ws1 ws1?;\nPATTERN article2 \t:= ['A','The','Thou','a','the','thou'];\nTOKEN   Name     \t:= PATTERN('[A-Z][a-zA-Z]+');\t\nRULE    Namet     := name OPT(ws2 ['the','king of','prince of'] ws2 name);\nPATTERN produced \t:= OPT(article2 ws2) ['begat','father of','mother of'];\nPATTERN produced_by   := OPT(article2 ws2) ['son of','daughter of'];\nPATTERN produces_with := OPT(article2 ws2) ['wife of'];\nRULE    relationtype  := ( produced | produced_by | produces_with );\nRULE    progeny       := namet ws2 relationtype ws2 namet;\nresults := RECORD\n     STRING60 Le :=  MATCHTEXT(Namet[1]);\n\t\t STRING60 Ri \t :=  MATCHTEXT(Namet[2]);\n\t \t STRING30 RelationPhrase := MATCHTEXT(relationtype) \n\tEND;\noutfile1 := PARSE(datafile,line,progeny,results,SCAN ALL);\n\noutput(outfile1);\n\n \nd := DATASET([{'<library><book isbn=\"123456789X\">' +\n\t'<author>Bayliss</author><title>A Way Too Far</title></book>' +\n\t'<book isbn=\"1234567801\">' +\n\t'<author>Smith</author><title>A Way Too Short</title></book>' +\n\t'</library>'}],\t{STRING line });\nrform := RECORD\n  STRING author := XMLTEXT('author');\n  STRING title \t:= XMLTEXT('title');\nEND;\nbooks := PARSE(d,line,rform,XML('library/book'));\noutput(books);\n\n\nin1 := DATASET([{'<ENTITY eid=\"P101\" type=\"PERSON\" subtype=\"MILITARY\">' +\n'<ATTR name=\"fullname\">JOHN SMITH</ATTR>' +\n'<ATTRGRP descriptor=\"passport\">' +\n'<ATTR name=\"idNumber\">W12468</ATTR><ATTR name=\"idType\">pp</ATTR>' +\n'<ATTR name=\"issuingAuthority\">JAPAN PASSPORT AUTHORITY</ATTR>' +\n'<ATTR name=\"country\" value=\"L202\"/></ATTRGRP></ENTITY>'}], {STRING line});\n\npassportRec := { STRING id, STRING country};\noutrec      := { STRING  id, UNICODE  fullname,  passportRec passport };\n\noutrec t( in1 L) := TRANSFORM\n  SELF.id          := XMLTEXT('@eid');\n  SELF.fullname    := XMLUNICODE('ATTR[@name=\"fullname\"]');\n  SELF.passport.id := XMLTEXT('ATTRGRP[@descriptor=\"passport\"]/ATTR[@name=\"idNumber\"]');\n  SELF.passport.country := XMLTEXT('ATTRGRP[@descriptor=\"passport\"]' +\n\t\t\t                                '/ATTR[@name=\"country\"]/@value');\nEND;\nTextout := PARSE(in1, line, t(LEFT), XML('/ENTITY[@type=\"PERSON\"]'));\n\noutput(Textout)\n\n","W20190922-011643":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190920-194648":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190920-193956":"IMPORT STD;\nIMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190920-194512":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  REAL8   precipintensity;\n  INTEGER trend;\nEND;\n//Add class label\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\nOUTPUT(trainData, NAMED('trainData'));\n\n//Transform to Machine Learning Dataframe, such as DiscreteField\nML_Core.ToField(trainData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX:= trainset(number < 4);\nY := PROJECT(trainset(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(X, Y);\n\n//Prediction\npredict := LR.BinomialLogisticRegression().Classify(mod_bi, X);\nOUTPUT(predict, NAMED('predict'));","W20190920-185745":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190920-174736":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190920-170739":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));\n\nfilePath2 := '~.::kaggle_02.csv';\n\nds2 := DATASET(filePath2, RECORDOF(filePath2, LOOKUP), CSV);\n\nprofileResults2 := DataPatterns.Profile(ds2);\n\nOUTPUT(profileResults2, ALL, NAMED('profileResults2'));","W20190920-163138":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));\n\nfilePath2 := '~.::kaggle_02.csv';\n\nds2 := DATASET(filePath2, RECORDOF(filePath2, LOOKUP), CSV);\n\nprofileResults2 := DataPatterns.Profile(ds2);\n\nOUTPUT(profileResults2, ALL, NAMED('profileResults2'));","W20190920-151824":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190920-151810":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190920-151735":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190920-145114":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190920-145105":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190920-143543":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::kaggle_01.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190920-143344":"IMPORT ^ as DataPatterns;\n\nfilePath := '~.::690150_noheader.csv';\n\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), CSV);\n\nprofileResults := DataPatterns.Profile(ds);\n\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190920-041355":"Name := {STRING30 fname, STRING20\tlname};\nin1rec := {UNSIGNED1 id, Name name1,UNSIGNED1 age,STRING5 title};\nin2rec := {UNSIGNED1 id, Name name1,REAL4 age,BOOLEAN dead };\nin1 := DATASET([{1,'Gavin','Halliday',33,'Mr'},\n\t\t    \t\t\t\t   {2,'Liz','Halliday',33,'Dr'},\n\t\t    \t\t\t\t   {3,'Elizabeth','Windsor',99,'Queen'}], in1rec);\nin2 := DATASET([{1,'Gavin','Halliday',33,false},\n\t\t    \t\t\t\t   {2,'Liz','',33,false},\n\t\t\t\t\t\t\t\t\t {3,'Elizabeth','Windsor',99.1,false}], in2rec);\n\t\t\t\t\t\t\t\t\t \n//only matching field values will be compared by ROWDIFF\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t \noutrec := {UNSIGNED1 id,STRING35 diff1,STRING35 diff2};\noutrec t1(in1 L, in2 R) := TRANSFORM\n\t\tSELF.id := L.id;\n\t\tSELF.diff1 := ROWDIFF(L,R,COUNT);\n\t\tSELF.diff2 := ROWDIFF(L,R);\n\t\tEND;\nOUTPUT(JOIN(in1, in2, LEFT.id = RIGHT.id, t1(LEFT, RIGHT)));","W20190920-041329":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190919-195157":"IMPORT STD;\nIMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190919-181649":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), IDADE_PESSOA);\r\nwoman_victims := crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender);\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nwoman_info := TABLE(woman_victims(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\nOUTPUT(SORT(woman_info,-total_victims));","W20190919-181619":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), IDADE_PESSOA);\r\nwoman_victims := crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender);\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nwoman_info := TABLE(woman_victims(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\nOUTPUT(SORT(woman_info),-total_victims);","W20190919-174435":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), IDADE_PESSOA);\r\nwoman_victims := crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender);\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nwoman_info := TABLE(woman_victims(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\nOUTPUT(woman_info);","W20190919-152704":"IMPORT STD;\nIMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190919-142343":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190919-142426":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190918-205341":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND (IDADE_PESSOA >=60 AND IDADE_PESSOA <=99) ), RUBRICA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.RUBRICA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\n\r\nage_info := TABLE(crimes, AGE_VICTIM, RUBRICA);\r\nOUTPUT(SORT(age_info,-total_victims));\r\n","W20190918-201802":"IMPORT $.^ AS CR_SP;\r\n\r\nbo_children_rape := SORT(CR_SP.clean_bo.File(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)'),CIDADE);\r\nbo_drugs_use := SORT(CR_SP.clean_bo.File(RUBRICA = 'DROGAS SEM AUTORIZAÃ§Ã£O OU EM DESACORDO (ART.33, CAPUT)'),CIDADE);\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_children_rape := TABLE(bo_children_rape,INFO_CRIME,CIDADE);\r\npre_drugs_use := TABLE(bo_drugs_use,INFO_CRIME,CIDADE);\t\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\nfinal_childre_rape := JOIN(pre_children_rape,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nfinal_drugs_use := JOIN(pre_drugs_use,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(final_childre_rape,-CRIMES));\r\n//OUTPUT(bo_drugs_use);\r\nOUTPUT(SORT(final_drugs_use,-CRIMES));\r\n","W20190918-200853":"IMPORT $.^ AS CR_SP;\r\n\r\nbo_children_rape := SORT(CR_SP.clean_bo.File(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)'),CIDADE);\r\nbo_drugs_use := SORT(CR_SP.clean_bo.File(RUBRICA = 'DROGAS SEM AUTORIZAÃ§Ã£O OU EM DESACORDO (ART.33, CAPUT)'),CIDADE);\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_children_rape := TABLE(bo_children_rape,INFO_CRIME,CIDADE);\r\npre_drugs_use := TABLE(bo_drugs_use,INFO_CRIME,CIDADE);\t\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\nfinal_childre_rape := JOIN(pre_children_rape,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nfinal_drugs_use := JOIN(pre_drugs_use,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(final_childre_rape,-CRIMES));\r\nOUTPUT(bo_drugs_use);\r\n//OUTPUT(SORT(final_drugs_use,-CRIMES));\r\n","W20190918-200753":"IMPORT $.^ AS CR_SP;\r\n\r\nbo_children_rape := SORT(CR_SP.clean_bo.File(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)'),CIDADE);\r\nbo_drugs_use := SORT(CR_SP.clean_bo.File(RUBRICA = 'DROGAS SEM AUTORIZAÇÃO OU EM DESACORDO (ART.33, CAPUT)'),CIDADE);\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_children_rape := TABLE(bo_children_rape,INFO_CRIME,CIDADE);\r\npre_drugs_use := TABLE(bo_drugs_use,INFO_CRIME,CIDADE);\t\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\nfinal_childre_rape := JOIN(pre_children_rape,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nfinal_drugs_use := JOIN(pre_drugs_use,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(final_childre_rape,-CRIMES));\r\nOUTPUT(bo_drugs_use);\r\n//OUTPUT(SORT(final_drugs_use,-CRIMES));\r\n","W20190918-200601":"IMPORT $.^ AS CR_SP;\r\n\r\nbo_children_rape := SORT(CR_SP.clean_bo.File(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)'),CIDADE);\r\nbo_drugs_use := SORT(CR_SP.clean_bo.File(RUBRICA = 'DROGAS SEM AUTORIZAçãO OU EM DESACORDO (ART.33, CAPUT)'),CIDADE);\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_children_rape := TABLE(bo_children_rape,INFO_CRIME,CIDADE);\r\npre_drugs_use := TABLE(bo_drugs_use,INFO_CRIME,CIDADE);\t\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\nfinal_childre_rape := JOIN(pre_children_rape,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nfinal_drugs_use := JOIN(pre_drugs_use,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(final_childre_rape,-CRIMES));\r\nOUTPUT(SORT(bo_drugs_use,-CRIMES));\r\n","W20190918-200629":"IMPORT $.^ AS CR_SP;\r\n\r\nbo_children_rape := SORT(CR_SP.clean_bo.File(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)'),CIDADE);\r\nbo_drugs_use := SORT(CR_SP.clean_bo.File(RUBRICA = 'DROGAS SEM AUTORIZAçãO OU EM DESACORDO (ART.33, CAPUT)'),CIDADE);\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_children_rape := TABLE(bo_children_rape,INFO_CRIME,CIDADE);\r\npre_drugs_use := TABLE(bo_drugs_use,INFO_CRIME,CIDADE);\t\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\nfinal_childre_rape := JOIN(pre_children_rape,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nfinal_drugs_use := JOIN(pre_drugs_use,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(final_childre_rape,-CRIMES));\r\nOUTPUT(bo_drugs_use);\r\n//OUTPUT(SORT(final_drugs_use,-CRIMES));\r\n","W20190918-200425":"IMPORT $.^ AS CR_SP;\r\n\r\nbo_children_rape := SORT(CR_SP.clean_bo.File(RUBRICA = 'ESTUPRO DE VULNERAVEL (ART.217-A)'),CIDADE);\r\nbo_drugs_use := SORT(CR_SP.clean_bo.File(RUBRICA = 'DROGAS SEM AUTORIZAçãO OU EM DESACORDO (ART.33, CAPUT)'),CIDADE);\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tCR_SP.clean_bo.File.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_children_rape := TABLE(bo_children_rape,INFO_CRIME,CIDADE);\r\npre_drugs_use := TABLE(bo_drugs_use,INFO_CRIME,CIDADE);\t\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\nfinal_childre_rape := JOIN(pre_children_rape,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nfinal_drugs_use := JOIN(pre_drugs_use,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(final_childre_rape,-CRIMES));\r\nOUTPUT(SORT(final_drugs_use,-CRIMES));\r\n","W20190918-193719":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND (IDADE_PESSOA >=13 AND IDADE_PESSOA <=17) ), RUBRICA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.RUBRICA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\n\r\nage_info := TABLE(crimes, AGE_VICTIM, RUBRICA);\r\nOUTPUT(SORT(age_info,-total_victims));\r\n","W20190918-185725":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND (IDADE_PESSOA >=13 AND IDADE_PESSOA <=17) ), RUBRICA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.RUBRICA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\n\r\nage_info := TABLE(crimes, AGE_VICTIM, RUBRICA);\r\nOUTPUT(SORT(age_info,total_victims));\r\n","W20190918-184658":"IMPORT $.^ AS CR_SP;\r\n\r\nall_victim\t:= SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_victim.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile\t:= TABLE(all_victim,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nwoman_school_profile\t:= TABLE(all_victim(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nmen_school_profile\t\t:= TABLE(all_victim(SEXO_PESSOA IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));\r\nOUTPUT(SORT(woman_school_profile,-TOTAL));\r\nOUTPUT(SORT(men_school_profile,-TOTAL));","W20190918-185146":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim AND (IDADE_PESSOA >=13 AND IDADE_PESSOA <=17) ), RUBRICA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.RUBRICA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\n\r\nage_info := TABLE(crimes, AGE_VICTIM, RUBRICA);\r\nOUTPUT(age_info);\r\n","W20190918-183540":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO = '1 GRAU COMPLETO')),\r\nRUBRICA);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.RUBRICA;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ntype_crimes := TABLE(all_crimes,SCHOOL_PROFILE,RUBRICA);\r\nwoman_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,RUBRICA);\r\nmen_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,RUBRICA);\r\n\r\nOUTPUT(SORT(type_crimes,-TOTAL));\r\nOUTPUT(SORT(woman_crimes,-TOTAL));\r\nOUTPUT(SORT(men_crimes,-TOTAL));\r\n","W20190918-182617":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO = 'SUPERIOR COMPLETO' OR DESCR_GRAU_INSTRUCAO = 'SUPERIOR INCOMPLETO')),\r\nRUBRICA);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.RUBRICA;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ntype_crimes := TABLE(all_crimes,SCHOOL_PROFILE,RUBRICA);\r\nwoman_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,RUBRICA);\r\nmen_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,RUBRICA);\r\n\r\nOUTPUT(SORT(type_crimes,-TOTAL));\r\nOUTPUT(SORT(woman_crimes,-TOTAL));\r\nOUTPUT(SORT(men_crimes,-TOTAL));\r\n","W20190918-182316":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO = 'SUPERIOR COMPLETO' OR DESCR_GRAU_INSTRUCAO = 'SUPERIOR INCOMPLETO')),\r\nRUBRICA);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.RUBRICA;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ntype_crimes := TABLE(all_crimes,SCHOOL_PROFILE,RUBRICA);\r\nwoman_crimes := TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,RUBRICA);\r\nmen_crimes := TABLE(all_crimes(COR IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,RUBRICA);\r\n\r\nOUTPUT(SORT(type_crimes,-TOTAL));\r\nOUTPUT(SORT(woman_crimes,-TOTAL));\r\nOUTPUT(SORT(men_crimes,-TOTAL));\r\n","W20190918-180258":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes\t:= SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile\t:= TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nwoman_school_profile\t:= TABLE(all_crimes(CR_SP.gender_types.female_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nmen_school_profile\t\t:= TABLE(all_crimes(CR_SP.gender_types.male_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));\r\nOUTPUT(SORT(woman_school_profile,-TOTAL));\r\nOUTPUT(SORT(men_school_profile,-TOTAL));","W20190918-180431":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes\t:= SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile\t:= TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nwoman_school_profile\t:= TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nmen_school_profile\t\t:= TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));\r\nOUTPUT(SORT(woman_school_profile,-TOTAL));\r\nOUTPUT(SORT(men_school_profile,-TOTAL));","W20190918-164024-3":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~lily::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-180432":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes\t:= SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile\t:= TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nwoman_school_profile\t:= TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nmen_school_profile\t\t:= TABLE(all_crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));\r\nOUTPUT(SORT(woman_school_profile,-TOTAL));\r\nOUTPUT(SORT(men_school_profile,-TOTAL));","W20190918-180257":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes\t:= SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile\t:= TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nwoman_school_profile\t:= TABLE(all_crimes(CR_SP.gender_types.female_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nmen_school_profile\t\t:= TABLE(all_crimes(CR_SP.gender_types.male_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));\r\nOUTPUT(SORT(woman_school_profile,-TOTAL));\r\nOUTPUT(SORT(men_school_profile,-TOTAL));","W20190918-180314":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes\t:= SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile\t:= TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nwoman_school_profile\t:= TABLE(all_crimes(SEXO IN CR_SP.gender_types.female_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nmen_school_profile\t\t:= TABLE(all_crimes(SEXO IN CR_SP.gender_types.male_gender),SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));\r\nOUTPUT(SORT(woman_school_profile,-TOTAL));\r\nOUTPUT(SORT(men_school_profile,-TOTAL));","W20190918-164024":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-160414":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\n// Change the file name based on your username, workspace name and raw file name in below format:\n// '~USERNMAE::WORKSPACENAME::RAWFILENAME'\n// For example, if your usename is Mike and you created a worksplace 'HPCCSystems'.\n// The raw file you uploaded is 'test.csv'.Then the file name inside the DATASET() function should be\n//  '~Mike::HPCCSystems::test.csv'\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190918-160301":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190918-155935":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\n// Change the file name based on your username, workspace name and raw file name in below format:\n// '~USERNMAE::WORKSPACENAME::RAWFILENAME'\n// For example, if your usename is Mike and you created a worksplace 'HPCCSystems'.\n// The raw file you uploaded is 'test.csv'.Then the file name inside the DATASET() function should be\n//  '~Mike::HPCCSystems::test.csv'\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190918-160250":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190918-153041":"IMPORT STD;\nIMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190918-153016-2":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-153016":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~lily::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-152257":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190918-152104-4":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~lily::ksu_workshop::sample10000.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190918-152104":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~lily::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-150408":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::ksu_workshop::fake_people.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190918-150146":"IMPORT STD;\nIMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190918-150407":"FakePeople:=RECORD\n\tstring14 first_name;\n\tstring15 last_name;\n\tstring39 email;\n\tstring12 phone;\nEND;\nDS := DATASET('~jj2::ksu_workshop::fake_people.csv',FakePeople,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::fake_people.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-145347":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~dtatum::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~dtatum::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190918-145227":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~dtatum::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2019 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190918-145217":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~dtatum::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190918-145007":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  REAL8   precipintensity;\n  INTEGER trend;\nEND;\n//Add class label\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\nOUTPUT(trainData, NAMED('trainData'));\n\n//Transform to Machine Learning Dataframe, such as DiscreteField\nML_Core.ToField(trainData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX:= trainset(number < 4);\nY := PROJECT(trainset(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(X, Y);\n\n//Prediction\npredict := LR.BinomialLogisticRegression().Classify(mod_bi, X);\nOUTPUT(predict, NAMED('predict'));","W20190918-145244":"IMPORT STD;\nIMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~dtatum::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190918-144949":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190918-144937":"IMPORT STD;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\nEXPORT D_Data_Enhancement := MODULE\n  \n//Reading Taxi_Weather Data\nSHARED raw := A_Data_Ingestion.raw;\n\n//Enhance raw data\n//Enhancement 1\nEXPORT enhancedLayout1 := RECORD\n  UNSIGNED4 date;\n  REAL8 precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData1 := PROJECT(raw, TRANSFORM(enhancedLayout1,\n                                                SELF.date := (INTEGER) LEFT.date,\n                                                SELF.precipintensity := (REAL) LEFT.precipintensity,\n                                                SELF.trip_counts := (INTEGER) LEFT.trip_counts));\n\n//Enhancement 2\nEXPORT enhancedLayout2 := RECORD\n  UNSIGNED2 id;\n  UNSIGNED2 month_of_year;\n  UNSIGNED2 day_of_week;\n  REAL8   precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData2 := PROJECT(enhancedData1, TRANSFORM(enhancedLayout2,\n                                        SELF.id := COUNTER,\n                                        SELF.day_of_week := (INTEGER) Std.Date.DayOfWeek(LEFT.date),\n                                        SELF.month_of_year := (INTEGER) Std.Date.Month(LEFT.date),\n                                        SELF.precipintensity := LEFT.precipintensity,\n                                        SELF.trip_counts := LEFT.trip_counts));\nEXPORT enhancedData := enhancedData2;\nEND;","W20190918-144740":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190918-144923":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190918-144845":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190918-144821":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190918-144730":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190918-144724":"//Reading Taxi_Weather Data\nEXPORT A_Data_Ingestion := MODULE\n\nEXPORT Layout := RECORD\n  STRING date;\n  STRING precipintensity;\n  STRING trip_counts;\nEND;\n\n//Change the file name based on your username, workspace name and raw file name in below format:\n//'~USERNMAE::WORKSPACENAME::RAWFILENAME'\n//For example, if your usename is Mike and you created a worksplace 'HPCCSystems'.\n//The raw file you uploaded is 'test.csv'.Then the file name inside the DATASET() function should be \n//'~Mike::HPCCSystems::test.csv'\nEXPORT raw := DATASET('~dtatum::ksu_workshop::ny_sampleinput.csv', Layout, CSV(HEADING(1)));\nEND;","W20190918-142228":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LogisticRegression AS LR;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\n\n//Average trips per day\navgTrip := AVE(enhancedData, trip_counts);\n//Add trend layout\ntrainLayout := RECORD\n  INTEGER id;\n  INTEGER month_of_year;\n  INTEGER day_of_week;\n  REAL8   precipintensity;\n  INTEGER trend;\nEND;\n//Add class label\ntrainData := PROJECT(enhancedData, TRANSFORM(trainLayout,\n                                            SELF.trend := IF(LEFT.trip_counts < avgTrip, 0, 1),\n                                            SELF := LEFT));\nOUTPUT(trainData, NAMED('trainData'));\n\n//Transform to Machine Learning Dataframe, such as DiscreteField\nML_Core.ToField(trainData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX:= trainset(number < 4);\nY := PROJECT(trainset(number = 4), TRANSFORM(Types.DiscreteField, SELF.number := 1, SELF := LEFT));\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n\n//Training LogisticRegression Model\nmod_bi := LR.BinomialLogisticRegression(100,0.00001).getModel(X, Y);\n\n//Prediction\npredict := LR.BinomialLogisticRegression().Classify(mod_bi, X);\nOUTPUT(predict, NAMED('predict'));","W20190918-143743":"IMPORT STD.DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190918-142125":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190918-142042":"IMPORT STD;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\nEXPORT D_Data_Enhancement := MODULE\n  \n//Reading Taxi_Weather Data\nSHARED raw := A_Data_Ingestion.raw;\n\n//Enhance raw data\n//Enhancement 1\nEXPORT enhancedLayout1 := RECORD\n  UNSIGNED4 date;\n  REAL8 precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData1 := PROJECT(raw, TRANSFORM(enhancedLayout1,\n                                                SELF.date := (INTEGER) LEFT.date,\n                                                SELF.precipintensity := (REAL) LEFT.precipintensity,\n                                                SELF.trip_counts := (INTEGER) LEFT.trip_counts));\n\n//Enhancement 2\nEXPORT enhancedLayout2 := RECORD\n  UNSIGNED2 id;\n  UNSIGNED2 month_of_year;\n  UNSIGNED2 day_of_week;\n  REAL8   precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData2 := PROJECT(enhancedData1, TRANSFORM(enhancedLayout2,\n                                        SELF.id := COUNTER,\n                                        SELF.day_of_week := (INTEGER) Std.Date.DayOfWeek(LEFT.date),\n                                        SELF.month_of_year := (INTEGER) Std.Date.Month(LEFT.date),\n                                        SELF.precipintensity := LEFT.precipintensity,\n                                        SELF.trip_counts := LEFT.trip_counts));\nEXPORT enhancedData := enhancedData2;\nEND;","W20190918-141919":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190918-141832":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190918-141435":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190918-141721":"//Reading Taxi_Weather Data\nEXPORT A_Data_Ingestion := MODULE\n\nEXPORT Layout := RECORD\n  STRING date;\n  STRING precipintensity;\n  STRING trip_counts;\nEND;\n\n//Change the file name based on your username, workspace name and raw file name in below format:\n//'~USERNMAE::WORKSPACENAME::RAWFILENAME'\n//For example, if your usename is Mike and you created a worksplace 'HPCCSystems'.\n//The raw file you uploaded is 'test.csv'.Then the file name inside the DATASET() function should be \n//'~Mike::HPCCSystems::test.csv'\nEXPORT raw := DATASET('~dtatum::ksu_workshop::ny_sampleinput.csv', Layout, CSV(HEADING(1)));\nEND;","W20190918-141422":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190918-141417":"IMPORT STD;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\nEXPORT D_Data_Enhancement := MODULE\n  \n//Reading Taxi_Weather Data\nSHARED raw := A_Data_Ingestion.raw;\n\n//Enhance raw data\n//Enhancement 1\nEXPORT enhancedLayout1 := RECORD\n  UNSIGNED4 date;\n  REAL8 precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData1 := PROJECT(raw, TRANSFORM(enhancedLayout1,\n                                                SELF.date := (INTEGER) LEFT.date,\n                                                SELF.precipintensity := (REAL) LEFT.precipintensity,\n                                                SELF.trip_counts := (INTEGER) LEFT.trip_counts));\n\n//Enhancement 2\nEXPORT enhancedLayout2 := RECORD\n  UNSIGNED2 id;\n  UNSIGNED2 month_of_year;\n  UNSIGNED2 day_of_week;\n  REAL8   precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData2 := PROJECT(enhancedData1, TRANSFORM(enhancedLayout2,\n                                        SELF.id := COUNTER,\n                                        SELF.day_of_week := (INTEGER) Std.Date.DayOfWeek(LEFT.date),\n                                        SELF.month_of_year := (INTEGER) Std.Date.Month(LEFT.date),\n                                        SELF.precipintensity := LEFT.precipintensity,\n                                        SELF.trip_counts := LEFT.trip_counts));\nEXPORT enhancedData := enhancedData2;\nEND;","W20190918-141413":"IMPORT STD;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\nEXPORT D_Data_Enhancement := MODULE\n  \n//Reading Taxi_Weather Data\nSHARED raw := A_Data_Ingestion.raw;\n\n//Enhance raw data\n//Enhancement 1\nEXPORT enhancedLayout1 := RECORD\n  UNSIGNED4 date;\n  REAL8 precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData1 := PROJECT(raw, TRANSFORM(enhancedLayout1,\n                                                SELF.date := (INTEGER) LEFT.date,\n                                                SELF.precipintensity := (REAL) LEFT.precipintensity,\n                                                SELF.trip_counts := (INTEGER) LEFT.trip_counts));\n\n//Enhancement 2\nEXPORT enhancedLayout2 := RECORD\n  UNSIGNED2 id;\n  UNSIGNED2 month_of_year;\n  UNSIGNED2 day_of_week;\n  REAL8   precipintensity;\n  UNSIGNED3 trip_counts;\nEND;\nEXPORT enhancedData2 := PROJECT(enhancedData1, TRANSFORM(enhancedLayout2,\n                                        SELF.id := COUNTER,\n                                        SELF.day_of_week := (INTEGER) Std.Date.DayOfWeek(LEFT.date),\n                                        SELF.month_of_year := (INTEGER) Std.Date.Month(LEFT.date),\n                                        SELF.precipintensity := LEFT.precipintensity,\n                                        SELF.trip_counts := LEFT.trip_counts));\nEXPORT enhancedData := enhancedData2;\nEND;","W20190918-141355":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190918-133318-1":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~lily::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-031504":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190918-030852-1":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~fardanian::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~fardanian::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-133318":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190918-030852":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~fardanian::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~fardanian::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-191517":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO = 'SUPERIOR COMPLETO' OR DESCR_GRAU_INSTRUCAO = '\tSUPERIOR INCOMPLETO')),\r\nRUBRICA);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.RUBRICA;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ntype_crimes := TABLE(all_crimes,SCHOOL_PROFILE,RUBRICA);\r\nblackmen_crimes := TABLE(all_crimes(COR IN CR_SP.race_types.race_negro),SCHOOL_PROFILE,RUBRICA);\r\nwhitemen_crimes := TABLE(all_crimes(COR IN CR_SP.race_types.race_branco),SCHOOL_PROFILE,RUBRICA);\r\n\r\nOUTPUT(SORT(type_crimes,-TOTAL));\r\nOUTPUT(SORT(blackmen_crimes,-TOTAL));\r\nOUTPUT(SORT(whitemen_crimes,-TOTAL));\r\n","W20190917-191301":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO = 'SUPERIOR COMPLETO' OR DESCR_GRAU_INSTRUCAO = '\tSUPERIOR INCOMPLETO')),\r\nRUBRICA);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.RUBRICA;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ntype_crimes := TABLE(all_crimes,SCHOOL_PROFILE,RUBRICA);\r\nOUTPUT(type_crimes);","W20190917-191109":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND (DESCR_GRAU_INSTRUCAO = 'SUPERIOR COMPLETO' OR DESCR_GRAU_INSTRUCAO = '\tSUPERIOR INCOMPLETO')),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(all_crimes);","W20190917-193425":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190917-190159":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\nblackmen_crime := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND COR IN CR_SP.race_types.race_negro),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\nwhitemen_crime := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author AND COR IN CR_SP.race_types.race_branco),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile := TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nblack_school_profile := TABLE(blackmen_crime,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nwhite_school_profile := TABLE(whitemen_crime,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\n\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));\r\nOUTPUT(SORT(black_school_profile,-TOTAL));\r\nOUTPUT(SORT(white_school_profile,-TOTAL));","W20190917-185651":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile := TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nOUTPUT(SORT(crimes_school_profile,-TOTAL));","W20190917-175945":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File,RUBRICA);\r\n\r\nTOTAL_CRIME := RECORD\r\n\tall_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nCRIME_SPECS := TABLE(all_crimes,TOTAL_CRIME,RUBRICA);\r\nOUTPUT(SORT(CRIME_SPECS,-total));","W20190917-180450":"IMPORT $,STD;\r\nCITY_NAME := RECORD\r\n\t$.clean_bo.FILE.CIDADE;\r\nEND;\r\n\r\nOUTPUT($.clean_bo.File)\r\n// cities := TABLE($.clean_bo.File,CITY_NAME);\r\n// simple_ct := DEDUP(SORT(cities,CIDADE),CIDADE);\r\n// OUTPUT(simple_ct,,'erm::crimes_sp::cities');\r\n","W20190917-184530":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),\r\nDESCR_GRAU_INSTRUCAO);\r\n\r\nSCHOOL_PROFILE := RECORD\r\n\tall_crimes.DESCR_GRAU_INSTRUCAO;\r\n\tTOTAL := COUNT(GROUP);\r\nEND;\r\n\r\ncrimes_school_profile := TABLE(all_crimes,SCHOOL_PROFILE,DESCR_GRAU_INSTRUCAO);\r\nOUTPUT(crimes_school_profile);","W20190917-175713":"IMPORT $,STD;\r\n\r\ndirty2015 := DATASET( '~erm::crimes_sp::bo_2015',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\ndirty2016 := DATASET( '~erm::crimes_sp::bo_2016',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo2015.File d_info) := TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',TRIM(STD.Str.ToUpperCase(d_info.RUBRICA), RIGHT),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DATA_OCORRENCIA_BO := -1;\r\n\tSELF.HORA_OCORRENCIA_BO := -1;\r\n\tSELF.DESCR_TIPO_PESSOA := '';\r\n\tSELF.CONT_PESSOA := 0;\r\n\tSELF.SEXO_PESSOA := '';\r\n\tSELF.IDADE_PESSOA := -1;\r\n\tSELF.COR := '';\r\n\tSELF.DESCR_PROFISSAO := '';\r\n\tSELF.DESCR_GRAU_INSTRUCAO := '';\r\nEND;\r\n\r\nclean_2015 := PROJECT(dirty2015,dataCleaner(LEFT));\r\nclean_2016 := PROJECT(dirty2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_2015,,'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190917-175818":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190917-174756":"IMPORT $,STD;\r\n\r\n//SUB FILES FROM CRIMES SP\r\ndirty_20071 := DATASET( '~erm::crimes_sp::bo_2007_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20072 := DATASET( '~erm::crimes_sp::bo_2007_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20081 := DATASET( '~erm::crimes_sp::bo_2008_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20082 := DATASET( '~erm::crimes_sp::bo_2008_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20091 := DATASET( '~erm::crimes_sp::bo_2009_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20092 := DATASET( '~erm::crimes_sp::bo_2009_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20101 := DATASET( '~erm::crimes_sp::bo_2010_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20102 := DATASET( '~erm::crimes_sp::bo_2010_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20111 := DATASET( '~erm::crimes_sp::bo_2011_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20112 := DATASET( '~erm::crimes_sp::bo_2011_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20121 := DATASET( '~erm::crimes_sp::bo_2012_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20122 := DATASET( '~erm::crimes_sp::bo_2012_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20131 := DATASET( '~erm::crimes_sp::bo_2013_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20132 := DATASET( '~erm::crimes_sp::bo_2013_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20141 := DATASET( '~erm::crimes_sp::bo_2014_1',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\ndirty_20142 := DATASET( '~erm::crimes_sp::bo_2014_2',$.unprocessed_bo.Layout,CSV(HEADING(1)));\r\n\r\nfStrDateConvert(STRING date) := FUNCTION\r\n\tarray_date := STD.Str.SplitWords(date,'/');\r\n\tSTRING day := array_date[1];\r\n\tSTRING month := array_date[2];\r\n\tSTRING year := array_date[3];\r\n\tRETURN (INTEGER)(year+month + day);\r\nEND;\r\n\r\n\r\nfStrTimeConvert(STRING time) := FUNCTION\r\n\tarray_time := STD.Str.SplitWords(time,':');\r\n\tSTRING hour := array_time[1];\r\n\tSTRING minute := array_time[2];\r\n\tRETURN (INTEGER)(hour + minute);\r\nEND;\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo.File d_info):=TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.DATA_OCORRENCIA_BO := IF(d_info.DATA_OCORRENCIA_BO != 'NULL',fStrDateConvert(d_info.DATA_OCORRENCIA_BO),-1);\r\n\tSELF.HORA_OCORRENCIA_BO := IF(d_info.HORA_OCORRENCIA_BO != 'NULL',fStrTimeConvert(d_info.HORA_OCORRENCIA_BO),-1);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',TRIM(STD.Str.ToUpperCase(d_info.RUBRICA), RIGHT),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tdescre_treated := IF(d_info.DESCR_TIPO_PESSOA != 'NULL',\r\n\t\t\t\t\t\tSTD.STR.ToUpperCase((STRING)STD.UNI.CleanAccents(d_info.DESCR_TIPO_PESSOA))\r\n\t\t\t\t\t\t,'');\r\n\tSELF.DESCR_TIPO_PESSOA := descre_treated;\r\n\tSELF.CONT_PESSOA := (INTEGER)d_info.CONT_PESSOA;\r\n\tSELF.SEXO_PESSOA := IF(d_info.SEXO_PESSOA != 'NULL',STD.Str.ToUpperCase(d_info.SEXO_PESSOA),'');\r\n\tSELF.IDADE_PESSOA := (INTEGER)d_info.IDADE_PESSOA;\r\n\tSELF.COR := IF(d_info.COR != 'NULL',STD.Str.ToUpperCase(d_info.COR),'');\r\n\tSELF.DESCR_PROFISSAO := IF(d_info.DESCR_PROFISSAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_PROFISSAO),'');\r\n\tSELF.DESCR_GRAU_INSTRUCAO := IF(d_info.DESCR_GRAU_INSTRUCAO != 'NULL',STD.Str.ToUpperCase(d_info.DESCR_GRAU_INSTRUCAO),'');\r\nEND;\r\n\r\nclean_20071\t:=\tPROJECT(dirty_20071,dataCleaner(LEFT));\r\nclean_20072\t:=\tPROJECT(dirty_20072,dataCleaner(LEFT));\r\nclean_20081\t:=\tPROJECT(dirty_20081,dataCleaner(LEFT));\r\nclean_20082\t:=\tPROJECT(dirty_20082,dataCleaner(LEFT));\r\nclean_20091\t:=\tPROJECT(dirty_20091,dataCleaner(LEFT));\r\nclean_20092\t:=\tPROJECT(dirty_20092,dataCleaner(LEFT));\r\nclean_20101\t:=\tPROJECT(dirty_20101,dataCleaner(LEFT));\r\nclean_20102\t:=\tPROJECT(dirty_20102,dataCleaner(LEFT));\r\nclean_20111\t:=\tPROJECT(dirty_20111,dataCleaner(LEFT));\r\nclean_20112\t:=\tPROJECT(dirty_20112,dataCleaner(LEFT));\r\nclean_20121\t:=\tPROJECT(dirty_20121,dataCleaner(LEFT));\r\nclean_20122\t:=\tPROJECT(dirty_20122,dataCleaner(LEFT));\r\nclean_20131\t:=\tPROJECT(dirty_20131,dataCleaner(LEFT));\r\nclean_20132\t:=\tPROJECT(dirty_20132,dataCleaner(LEFT));\r\nclean_20141\t:=\tPROJECT(dirty_20141,dataCleaner(LEFT));\r\nclean_20142\t:=\tPROJECT(dirty_20142,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_20071,,'erm::crimes_sp::clean::bo_20071',OVERWRITE);\r\nOUTPUT(clean_20072,,'erm::crimes_sp::clean::bo_20072',OVERWRITE);\r\nOUTPUT(clean_20081,,'erm::crimes_sp::clean::bo_20081',OVERWRITE);\r\nOUTPUT(clean_20082,,'erm::crimes_sp::clean::bo_20082',OVERWRITE);\r\nOUTPUT(clean_20091,,'erm::crimes_sp::clean::bo_20091',OVERWRITE);\r\nOUTPUT(clean_20092,,'erm::crimes_sp::clean::bo_20092',OVERWRITE);\r\nOUTPUT(clean_20101,,'erm::crimes_sp::clean::bo_20101',OVERWRITE);\r\nOUTPUT(clean_20102,,'erm::crimes_sp::clean::bo_20102',OVERWRITE);\r\nOUTPUT(clean_20111,,'erm::crimes_sp::clean::bo_20111',OVERWRITE);\r\nOUTPUT(clean_20112,,'erm::crimes_sp::clean::bo_20112',OVERWRITE);\r\nOUTPUT(clean_20121,,'erm::crimes_sp::clean::bo_20121',OVERWRITE);\r\nOUTPUT(clean_20122,,'erm::crimes_sp::clean::bo_20122',OVERWRITE);\r\nOUTPUT(clean_20131,,'erm::crimes_sp::clean::bo_20131',OVERWRITE);\r\nOUTPUT(clean_20132,,'erm::crimes_sp::clean::bo_20132',OVERWRITE);\r\nOUTPUT(clean_20141,,'erm::crimes_sp::clean::bo_20141',OVERWRITE);\r\nOUTPUT(clean_20142,,'erm::crimes_sp::clean::bo_20142',OVERWRITE);","W20190917-171528":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File,RUBRICA);\r\n\r\nTOTAL_CRIME := RECORD\r\n\tall_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nCRIME_SPECS := TABLE(all_crimes,TOTAL_CRIME,RUBRICA);\r\nOUTPUT(SORT(CRIME_SPECS,-total));","W20190917-173050":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File,CIDADE);\r\nbo_157 := SORT(CR_SP.clean_bo.File(RUBRICA = 'ROUBO (ART. 157)'),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\nINFO_CRIME := RECORD\r\n\tbo_records.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_city_info := TABLE(bo_records, INFO_CRIME, CIDADE);\r\npre_city_157 := TABLE(bo_157,INFO_CRIME,CIDADE);\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\ncrimes_city_info := JOIN(pre_city_info,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\ncrimes_city_157 := JOIN(pre_city_157,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(crimes_city_info,-CRIMES),,'erm::crimes_sp::cities_crime',OVERWRITE);\r\nOUTPUT(SORT(crimes_city_157,-CRIMES),,'erm::crimes_sp::cities_crime_157',OVERWRITE);","W20190917-174733":"IMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190917-172739":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File,CIDADE);\r\nbo_157 := SORT(CR_SP.clean_bo.File(RUBRICA = 'ROUBO (ART. 157)'),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\nINFO_CRIME := RECORD\r\n\tbo_records.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_city_info := TABLE(bo_records, INFO_CRIME, CIDADE);\r\npre_city_157 := TABLE(bo_157,INFO_CRIME,CIDADE);\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\ncrimes_city_info := JOIN(pre_city_info,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\ncrimes_city_157 := JOIN(pre_city_157,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(crimes_city_info,-CRIMES),,'erm::crimes_sp::cities_crime');\r\nOUTPUT(SORT(crimes_city_157,-CRIMES),,'erm::crimes_sp::cities_crime_157');","W20190917-170943":"IMPORT $.^ AS CR_SP;\r\n\r\nall_crimes := SORT(CR_SP.clean_bo.File,RUBRICA);\r\n\r\nTOTAL_CRIME := RECORD\r\n\tall_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nCRIME_SPECS := TABLE(all_crimes,TOTAL_CRIME,RUBRICA);\r\nOUTPUT(CRIME_SPECS);","W20190917-172713":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File,CIDADE);\r\nbo_157 := SORT(CR_SP.clean_bo.File(RUBRICA = 'ROUBO (ART. 157)'),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\nINFO_CRIME := RECORD\r\n\tbo_records.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_city_info := TABLE(bo_records, INFO_CRIME, CIDADE);\r\npre_city_157 := TABLE(bo_157,INFO_CRIME,CIDADE);\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\ncrimes_city_info := JOIN(pre_city_info,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\ncrimes_city_157 := JOIN(pre_city_157,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(crimes_city_info,-CRIMES),,'erm::crimes_sp::cities_crime');","W20190917-163508":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File(),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tbo_records.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_city_info := TABLE(bo_records, INFO_CRIME, CIDADE);\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\ncrimes_city_info := JOIN(pre_city_info,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(crimes_city_info,-CRIMES),'erm::crimes_sp::cities_crime');","W20190917-164356":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File(),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tbo_records.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_city_info := TABLE(bo_records, INFO_CRIME, CIDADE);\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\ncrimes_city_info := JOIN(pre_city_info,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(crimes_city_info,-CRIMES),,'erm::crimes_sp::cities_crime');","W20190917-162752":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File(),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := SORT(CR_SP.population_data.File,CITY_NAME);\r\n\r\nINFO_CRIME := RECORD\r\n\tbo_records.CIDADE;\r\n\tcrimes := COUNT(GROUP);\r\n\tpopulation := 0;\r\nEND;\r\n\r\npre_city_info := TABLE(bo_records, INFO_CRIME, CIDADE);\r\n\r\nINFO_CRIME CrimeBasedPopulation(INFO_CRIME l_info, cities_population r_data):= TRANSFORM\r\n\tSELF.POPULATION :=  r_data.POPULATION;\r\n\tSELF.CRIMES := l_info.CRIMES / (r_data.POPULATION/10000);\r\n\tSELF.CIDADE := l_info.CIDADE;\r\nEND;\r\n\r\ncrimes_city_info := JOIN(pre_city_info,cities_population,\r\nLEFT.CIDADE = RIGHT.CITY_NAME,\r\nCrimeBasedPopulation(LEFT,RIGHT));\r\n\r\nOUTPUT(SORT(crimes_city_info,-CRIMES));","W20190917-155520":"IMPORT Visualizer;\n\nds := DATASET([ {'English', 5},\n                {'History', 17},\n                {'Geography', 7},\n                {'Chemistry', 16},\n                {'Irish', 26},\n                {'Spanish', 67},\n                {'Bioligy', 66},\n                {'Physics', 46},\n                {'Math', 98}],\n                {STRING subject, INTEGER4 year});\n\nOUTPUT(ds, NAMED('chartData'));\n\nVisualizer.TwoD.pie('myChart',, 'chartData');","W20190917-154000":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~dtatum::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~dtatum::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190917-152453-3":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~dtatum::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~dtatum::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-152239-1":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~dtatum::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~dtatum::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-152453":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~dtatum::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~dtatum::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-151639":"IMPORT KMeans;\nIMPORT ML_Core;\n\nRaw_data := KMeans.Test.Datasets.DSIris.ds;\n//Hold the raw data in machine learning dataframes such as NumericField\n// Add id to each record\nML_Core.AppendSeqId(raw_data, id, Raw_with_id);\n// Transform the records to NumericField dataframe\nML_Core.ToField(Raw_with_id, ML_data);\n\n//Initialization\nCentroids := ML_data(id IN [1, 51, 101]);\n\n//Setup model parameters\nMax_iterations := 30;\nTolerance := 0.03;\n\n//Train K-Means Model\n//Setup the model\nPre_Model := KMeans.KMeans(Max_iterations, Tolerance);\n//Train the model\nModel := Pre_Model.Fit( ML_Data(number < 5), Centroids(number < 5));\n\n//Coordinates of cluster centers\nCenters := KMeans.KMeans().Centers(Model);\nOUTPUT(SORT(centers, wi, id, number), NAMED('centers'));\n","W20190917-152239":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~dtatum::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~dtatum::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-143058":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190917-151339":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190917-142228":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190917-142247":"//Reading Taxi_Weather Data\nEXPORT A_Data_Ingestion := MODULE\n\nEXPORT Layout := RECORD\n  STRING date;\n  STRING precipintensity;\n  STRING trip_counts;\nEND;\n\n//Change the file name based on your username, workspace name and raw file name in below format:\n//'~USERNMAE::WORKSPACENAME::RAWFILENAME'\n//For example, if your usename is Mike and you created a worksplace 'HPCCSystems'.\n//The raw file you uploaded is 'test.csv'.Then the file name inside the DATASET() function should be \n//'~Mike::HPCCSystems::test.csv'\nEXPORT raw := DATASET('~fardanian::ksu_workshop::ny_sampleinput.csv', Layout, CSV(HEADING(1)));\nEND;","W20190917-142201":"IMPORT KMeans;\nIMPORT ML_Core;\n\nRaw_data := KMeans.Test.Datasets.DSIris.ds;\n//Hold the raw data in machine learning dataframes such as NumericField\n// Add id to each record\nML_Core.AppendSeqId(raw_data, id, Raw_with_id);\n// Transform the records to NumericField dataframe\nML_Core.ToField(Raw_with_id, ML_data);\n\n//Initialization\nCentroids := ML_data(id IN [1, 51, 101]);\n\n//Setup model parameters\nMax_iterations := 30;\nTolerance := 0.03;\n\n//Train K-Means Model\n//Setup the model\nPre_Model := KMeans.KMeans(Max_iterations, Tolerance);\n//Train the model\nModel := Pre_Model.Fit( ML_Data(number < 5), Centroids(number < 5));\n\n//Coordinates of cluster centers\nCenters := KMeans.KMeans().Centers(Model);\nOUTPUT(SORT(centers, wi, id, number), NAMED('centers'));\n","W20190917-142138":"IMPORT KMeans;\nIMPORT ML_Core;\n\nRaw_data := KMeans.Test.Datasets.DSIris.ds;\n//Hold the raw data in machine learning dataframes such as NumericField\n// Add id to each record\nML_Core.AppendSeqId(raw_data, id, Raw_with_id);\n// Transform the records to NumericField dataframe\nML_Core.ToField(Raw_with_id, ML_data);\n\n//Initialization\nCentroids := ML_data(id IN [1, 51, 101]);\n\n//Setup model parameters\nMax_iterations := 30;\nTolerance := 0.03;\n\n//Train K-Means Model\n//Setup the model\nPre_Model := KMeans.KMeans(Max_iterations, Tolerance);\n//Train the model\nModel := Pre_Model.Fit( ML_Data(number < 5), Centroids(number < 5));\n\n//Coordinates of cluster centers\nCenters := KMeans.KMeans().Centers(Model);\nOUTPUT(SORT(centers, wi, id, number), NAMED('centers'));\n","W20190917-142109":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190917-142045":"IMPORT KMeans;\nIMPORT ML_Core;\n\nRaw_data := KMeans.Test.Datasets.DSIris.ds;\n//Hold the raw data in machine learning dataframes such as NumericField\n// Add id to each record\nML_Core.AppendSeqId(raw_data, id, Raw_with_id);\n// Transform the records to NumericField dataframe\nML_Core.ToField(Raw_with_id, ML_data);\n\n//Initialization\nCentroids := ML_data(id IN [1, 51, 101]);\n\n//Setup model parameters\nMax_iterations := 30;\nTolerance := 0.03;\n\n//Train K-Means Model\n//Setup the model\nPre_Model := KMeans.KMeans(Max_iterations, Tolerance);\n//Train the model\nModel := Pre_Model.Fit( ML_Data(number < 5), Centroids(number < 5));\n\n//Coordinates of cluster centers\nCenters := KMeans.KMeans().Centers(Model);\nOUTPUT(SORT(centers, wi, id, number), NAMED('centers'));\n","W20190917-141943":"IMPORT KMeans;\nIMPORT ML_Core;\n\nRaw_data := KMeans.Test.Datasets.DSIris.ds;\n//Hold the raw data in machine learning dataframes such as NumericField\n// Add id to each record\nML_Core.AppendSeqId(raw_data, id, Raw_with_id);\n// Transform the records to NumericField dataframe\nML_Core.ToField(Raw_with_id, ML_data);\n\n//Initialization\nCentroids := ML_data(id IN [1, 51, 101]);\n\n//Setup model parameters\nMax_iterations := 30;\nTolerance := 0.03;\n\n//Train K-Means Model\n//Setup the model\nPre_Model := KMeans.KMeans(Max_iterations, Tolerance);\n//Train the model\nModel := Pre_Model.Fit( ML_Data(number < 5), Centroids(number < 5));\n\n//Coordinates of cluster centers\nCenters := KMeans.KMeans().Centers(Model);\nOUTPUT(centers, NAMED('centers'));\n//Predict the cluster index of the new samples\nLabels := KMeans.KMeans().Predict(Model, NewSamples);\nOUTPUT(labels, NAEMD('labels'));","W20190917-142000":"IMPORT KMeans;\nIMPORT ML_Core;\n\nRaw_data := KMeans.Test.Datasets.DSIris.ds;\n//Hold the raw data in machine learning dataframes such as NumericField\n// Add id to each record\nML_Core.AppendSeqId(raw_data, id, Raw_with_id);\n// Transform the records to NumericField dataframe\nML_Core.ToField(Raw_with_id, ML_data);\n\n//Initialization\nCentroids := ML_data(id IN [1, 51, 101]);\n\n//Setup model parameters\nMax_iterations := 30;\nTolerance := 0.03;\n\n//Train K-Means Model\n//Setup the model\nPre_Model := KMeans.KMeans(Max_iterations, Tolerance);\n//Train the model\nModel := Pre_Model.Fit( ML_Data(number < 5), Centroids(number < 5));\n\n//Coordinates of cluster centers\nCenters := KMeans.KMeans().Centers(Model);\nOUTPUT(centers, NAMED('centers'));\n","W20190917-141903-4":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~fardanian::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~fardanian::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-141903":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~fardanian::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~fardanian::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-141850":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~fardanian::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~fardanian::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-141850-5":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~fardanian::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~fardanian::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190917-012416":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190917-012113":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190916-204426":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190916-204344":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2018 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190916-204302":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2019 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190916-203932":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190916-203841":"IMPORT STD.DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190916-203059":"IMPORT STD.DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190916-202756":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~lily::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190916-202433":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~lily::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190916-202333":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~ksu::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190916-202134":"IMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~ksu::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190916-202230":"IMPORT std;\nIMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190916-202206":"IMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190916-201957":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2019 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190916-201557":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-201938":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~ksu::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2019 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190916-201531":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-201715":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~lily::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-201506":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~ksu::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-201441":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~lily::ksu_workshop::sample10000.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190916-201440":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~lily::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-201203":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::TestShare::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TestShare::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-194736":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190916-201203-1":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::TestShare::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190916-194729":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190916-194634":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190916-194507":"namesRec := RECORD\n  STRING20\tlname;\n  STRING10\tfname;\n  UNSIGNED2\tage := 25;\n  UNSIGNED2\tctr := 0;\nEND;\nnamesTable2 := DATASET([{'Flintstone','Fred',35},\n\t\t\t\t       {'Flintstone','Wilma',33},\n\t\t\t\t       {'Jetson','Georgie',10},\n\t\t\t\t       {'Mr. T','Z-man'}], namesRec);\nloopBody(SET OF DATASET(namesRec) ds, UNSIGNED4 c) :=\n         PROJECT(ds[c-1],\t\t\t\t         //ds[0]=original input \n\t               TRANSFORM(namesRec, \n\t\t\t           SELF.age := LEFT.age+c; //c is graph COUNTER (+55: 1+2+3..+10)\n\t\t\t           SELF.ctr := COUNTER;    //PROJECT’s COUNTER\n\t\t\t           SELF := LEFT));\ng1 := GRAPH(namesTable2,10,loopBody(ROWSET(LEFT),COUNTER));\nOUTPUT(g1);\n","W20190916-194136":"namesRec := RECORD\n  STRING20\tlname;\n  STRING10\tfname;\n  UNSIGNED2\tage := 25;\n  UNSIGNED2\tctr := 0;\nEND;\nnamesTable2 := DATASET([{'Flintstone','Fred',35},\n\t\t\t\t       {'Flintstone','Wilma',33},\n\t\t\t\t       {'Jetson','Georgie',10},\n\t\t\t\t       {'Mr. T','Z-man'}], namesRec);\nloopBody(SET OF DATASET(namesRec) ds, UNSIGNED4 c) :=\n         PROJECT(ds[c-1],\t\t\t\t         //ds[0]=original input \n\t               TRANSFORM(namesRec, \n\t\t\t           SELF.age := LEFT.age+c; //c is graph COUNTER (+55: 1+2+3..+10)\n\t\t\t           SELF.ctr := COUNTER;    //PROJECT’s COUNTER\n\t\t\t           SELF := LEFT));\ng1 := GRAPH(namesTable2,10,loopBody(ROWSET(LEFT),COUNTER));\nOUTPUT(g1);\n","W20190916-194604":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190916-194246":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190916-194120":"//run on hthor\n//If you are running without the Java plugin installed, you will get syntax errors\n\nIMPORT java;\n\nINTEGER add1(INTEGER val)  := IMPORT(java, 'JavaCat.add1:(I)I');\nSTRING add2(STRING val)    := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nSTRING add3(VARSTRING val) := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nUTF8 add4(UTF8 val)        := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nUNICODE add5(UNICODE val)  := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\n\nSTRING addChar(STRING c)         := IMPORT(java, 'JavaCat.addChar:(C)C');\nSTRING cat(STRING s1, STRING s2) := IMPORT(java, 'JavaCat.cat:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;');\nDATA testData(DATA indata)       := IMPORT(java, 'JavaCat.testData:([B)[B');\nINTEGER testArrays(SET OF BOOLEAN b, SET OF INTEGER2 s, SET OF INTEGER4 i, SET OF REAL8 d) \n                                 := IMPORT(java, 'JavaCat.testArrays:([Z[S[I[D)I');\nSET OF STRING testStringArray1(SET OF STRING s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF VARSTRING testStringArray2(SET OF VARSTRING s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF STRING8 testStringArray3(SET OF STRING8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF VARSTRING8 testStringArray4(SET OF VARSTRING8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UTF8 testStringArray5(SET OF UTF8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UNICODE8 testStringArray6(SET OF UNICODE8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UNICODE testStringArray7(SET OF UNICODE s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\n\nadd1(10);\nadd2('Hello');\nadd3('World');\nadd4(U'Leovenaðes');\nadd5(U'你好世界');\naddChar('A');\n\ncat('Hello', ' world');\n\ntestData(d'aa');\ntestArrays([true],[2,3],[4,5,6,7],[8.0,9.0]);\ntestArrays([],[],[],[]);\ntestStringArray1(['one', 'two', 'three']);\ntestStringArray2(['one', 'two', 'three']);\ntestStringArray3(['one', 'two', 'three']);\ntestStringArray4(['one', 'two', 'three']);\ntestStringArray5(['one', 'two', 'three']);\ntestStringArray6(['one', 'two', 'three']);\ntestStringArray7(['one', 'two', 'three']);\n\ns1 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER)));\ns2 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER/2)));\n SUM(NOFOLD(s1 + s2), a);\n\ns1a :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) add2((STRING)COUNTER)));\ns2a :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) add3((STRING)(COUNTER/2))));\n SUM(NOFOLD(s1a + s2a), a);\n\ns1b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := COUNTER+1));\ns2b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (COUNTER/2)+1));\n SUM(NOFOLD(s1b + s2b), a);\n\ns1c :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) ((STRING) COUNTER + '1')));\ns2c :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) ((STRING)(COUNTER/2) + '1')));\n SUM(NOFOLD(s1c + s2c), a);","W20190916-194107":"//run on hthor\n//If you are running without the Java plugin installed, you will get syntax errors\n\nIMPORT java;\n\nINTEGER add1(INTEGER val)  := IMPORT(java, 'JavaCat.add1:(I)I');\nSTRING add2(STRING val)    := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nSTRING add3(VARSTRING val) := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nUTF8 add4(UTF8 val)        := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\nUNICODE add5(UNICODE val)  := IMPORT(java, 'JavaCat.add2:(Ljava/lang/String;)Ljava/lang/String;');\n\nSTRING addChar(STRING c)         := IMPORT(java, 'JavaCat.addChar:(C)C');\nSTRING cat(STRING s1, STRING s2) := IMPORT(java, 'JavaCat.cat:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;');\nDATA testData(DATA indata)       := IMPORT(java, 'JavaCat.testData:([B)[B');\nINTEGER testArrays(SET OF BOOLEAN b, SET OF INTEGER2 s, SET OF INTEGER4 i, SET OF REAL8 d) \n                                 := IMPORT(java, 'JavaCat.testArrays:([Z[S[I[D)I');\nSET OF STRING testStringArray1(SET OF STRING s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF VARSTRING testStringArray2(SET OF VARSTRING s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF STRING8 testStringArray3(SET OF STRING8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF VARSTRING8 testStringArray4(SET OF VARSTRING8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UTF8 testStringArray5(SET OF UTF8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UNICODE8 testStringArray6(SET OF UNICODE8 s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\nSET OF UNICODE testStringArray7(SET OF UNICODE s) \n                                 := IMPORT(java, 'JavaCat.testStringArray:([Ljava/lang/String;)[Ljava/lang/String;');\n\nadd1(10);\nadd2('Hello');\nadd3('World');\nadd4(U'Leovenaðes');\nadd5(U'你好世界');\naddChar('A');\n\ncat('Hello', ' world');\n\ntestData(d'aa');\ntestArrays([true],[2,3],[4,5,6,7],[8.0,9.0]);\ntestArrays([],[],[],[]);\ntestStringArray1(['one', 'two', 'three']);\ntestStringArray2(['one', 'two', 'three']);\ntestStringArray3(['one', 'two', 'three']);\ntestStringArray4(['one', 'two', 'three']);\ntestStringArray5(['one', 'two', 'three']);\ntestStringArray6(['one', 'two', 'three']);\ntestStringArray7(['one', 'two', 'three']);\n\ns1 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER)));\ns2 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER/2)));\n SUM(NOFOLD(s1 + s2), a);\n\ns1a :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) add2((STRING)COUNTER)));\ns2a :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) add3((STRING)(COUNTER/2))));\n SUM(NOFOLD(s1a + s2a), a);\n\ns1b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := COUNTER+1));\ns2b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (COUNTER/2)+1));\n SUM(NOFOLD(s1b + s2b), a);\n\ns1c :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) ((STRING) COUNTER + '1')));\ns2c :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (integer) ((STRING)(COUNTER/2) + '1')));\n SUM(NOFOLD(s1c + s2c), a);","W20190916-194020":"/* The HPCC Systems platform comes bundled with a Java example class.\n   Execute the following example in your favorite ECL IDE (or ECL Watch Playground) \n   If you are running this example without the Java plugin installed, you will get syntax errors\n*/\nIMPORT java;\nINTEGER add1(integer val) := IMPORT(java, 'JavaCat.add1:(I)I');\nadd1(10);\n\n","W20190916-193756":"FlatRec := RECORD\n\tSTRING1 Value1;\n\tSTRING1 Value2;\n\tSTRING1 CVal2_1;\n\tSTRING1 CVal2_2;\nEND;\n\nFlatFile := DATASET([{'C','A','X','W'},\n\t\t\t\t\t {'B','B','S','Y'},\n\t\t\t\t\t {'A','C','Z','T'}],FlatRec);\n\nOutRec := RECORD\n\tFlatFile.Value1;\n\tFlatFile.Value2;\nEND;\nP_Recs := TABLE(FlatFile, OutRec);\n\nOUTPUT(P_Recs,NAMED('ParentData'));\n/*\nP_Recs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tA\n\t2\t\tB\t\tB\t\n\t3\t\tA\t\tC\n*/\n\nOutRec NormThem(FlatRec L, INTEGER C) := TRANSFORM\n\tSELF.Value2 := CHOOSE(C,L.CVal2_1, L.CVal2_2);\n\tSELF := L;\nEND;\nChildRecs := NORMALIZE(FlatFile,2,NormThem(LEFT,COUNTER));\n\nOUTPUT(ChildRecs,NAMED('ChildData'));\n/*\nChildRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tX\n\t2\t\tC\t\tW\n\t3\t\tB\t\tS\n\t4\t\tB\t\tY\t\n\t5\t\tA\t\tZ\n\t6\t\tA\t\tT\n*/","W20190916-193710":"FlatRec := RECORD\n\tSTRING145 Value1;\n\tSTRING1 Value2;\n\tSTRING1 CVal2_1;\n\tSTRING1 CVal2_2;\nEND;\n\nFlatFile := DATASET([{'C','A','X','W'},\n\t\t\t\t\t {'B','B','S','Y'},\n\t\t\t\t\t {'A','C','Z','T'}],FlatRec);\n\nOutRec := RECORD\n\tFlatFile.Value1;\n\tFlatFile.Value2;\nEND;\nP_Recs := TABLE(FlatFile, OutRec);\n\nOUTPUT(P_Recs,NAMED('ParentData'));\n/*\nP_Recs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tA\n\t2\t\tB\t\tB\t\n\t3\t\tA\t\tC\n*/\n\nOutRec NormThem(FlatRec L, INTEGER C) := TRANSFORM\n\tSELF.Value2 := CHOOSE(C,L.CVal2_1, L.CVal2_2);\n\tSELF := L;\nEND;\nChildRecs := NORMALIZE(FlatFile,2,NormThem(LEFT,COUNTER));\n\nOUTPUT(ChildRecs,NAMED('ChildData'));\n/*\nChildRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tX\n\t2\t\tC\t\tW\n\t3\t\tB\t\tS\n\t4\t\tB\t\tY\t\n\t5\t\tA\t\tZ\n\t6\t\tA\t\tT\n*/","W20190916-193705":"FlatRec := RECORD\n\tSTRING145 Value1;\n\tSTRING1 Value2;\n\tSTRING1 CVal2_1;\n\tSTRING1 CVal2_2;\nEND;\n\nFlatFile := DATASET([{'C','A','X','W'},\n\t\t\t\t\t {'B','B','S','Y'},\n\t\t\t\t\t {'A','C','Z','T'}],FlatRec);\n\nOutRec := RECORD\n\tFlatFile.Value1;\n\tFlatFile.Value2;\nEND;\nP_Recs := TABLE(FlatFile, OutRec);\n\nOUTPUT(P_Recs,NAMED('ParentData'));\n/*\nP_Recs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tA\n\t2\t\tB\t\tB\t\n\t3\t\tA\t\tC\n*/\n\nOutRec NormThem(FlatRec L, INTEGER C) := TRANSFORM\n\tSELF.Value2 := CHOOSE(C,L.CVal2_1, L.CVal2_2);\n\tSELF := L;\nEND;\nChildRecs := NORMALIZE(FlatFile,2,NormThem(LEFT,COUNTER));\n\nOUTPUT(ChildRecs,NAMED('ChildData'));\n/*\nChildRecs result set is:\n\tRec#\tValue1\tValue2\n\t1\t\tC\t\tX\n\t2\t\tC\t\tW\n\t3\t\tB\t\tS\n\t4\t\tB\t\tY\t\n\t5\t\tA\t\tZ\n\t6\t\tA\t\tT\n*/","W20190916-193426":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190916-190820":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190916-190651":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190916-185514":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190916-185324":"IMPORT STD.DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190916-185454":"//Read raw data from HPCC Systems cluster\n\n// original layout\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~ksu::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n\n//enchanced Layout\nLayout1 := RECORD\n    UNSIGNED4 number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    UNSIGNED8 book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    UNSIGNED4 category_code;\n    STRING category_code_description;\n    UNSIGNED4 census_tract;\n    STRING central_air;\n    INTEGER cross_reference;\n    STRING date_exterior_condition;\n    REAL8 depth;\n    UNSIGNED8 exempt_building;\n    UNSIGNED8 exempt_land;\n    UNSIGNED4 exterior_condition;\n    UNSIGNED4 fireplaces;\n    UNSIGNED4 frontage;\n    STRING fuel;\n    UNSIGNED4 garage_spaces;\n    UNSIGNED4 garage_type;\n    STRING general_construction;\n    UNSIGNED4 geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    INTEGER house_number;\n    UNSIGNED4 interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    UNSIGNED8 market_value;\n    STRING market_value_date;\n    UNSIGNED4 number_of_bathrooms;\n    UNSIGNED4 number_of_bedrooms;\n    STRING basements;\n    UNSIGNED4 number_stories;\n    UNSIGNED4 off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    INTEGER parcel_number;\n    STRING parcel_shape;\n    UNSIGNED4 quality_grade;\n    STRING recording_date;\n    INTEGER registry_number;\n    STRING sale_date;\n    INTEGER sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    UNSIGNED4 state_code;\n    UNSIGNED4 street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    INTEGER taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    REAL8 total_area;\n    UNSIGNED4 total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    UNSIGNED4 year_built;\n    STRING year_built_estimate;\n    INTEGER zip_code;\n    STRING zoning;\n    INTEGER objectid;\n    REAL lat;\n    REAL lng;\nEND;\n\nenchanced_ds1 := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout1, CSV(HEADING(1)));\nOUTPUT(enchanced_ds1);\n\n//To-Do: enchance the data type based on the result of Data Profiling\n","W20190916-185216":"IMPORT DataPatterns;\n\n//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Profiling\nprofileset:= DataPatterns.Profile(raw);\nOUTPUT(profileset);","W20190916-185122":"//Step 1 : read in the raw data\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2019 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190916-185043":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-185013-1":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~jj2::ksu_workshop::sample10000.csv_thor', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-185018":"/*##############################################################################\n## HPCC SYSTEMS software Copyright (C) 2019 HPCC Systems.  All rights reserved.\n############################################################################## */\n#option ('clusterSize', 5);\n\n/**\n  * Unit test for the Synchronous Gradient Descent (SGD) subsystem\n  */\nIMPORT $.^.Types;\nIMPORT $.^.internal AS int;\n\nSlice := Types.slice;\nSliceExt := Types.sliceExt;\nTrainingDat := Types.TrainingDat;\n\n\nshape := [10, 5, 10];\n\nw := int.Weights(shape);\n\nmySGD := int.SGD(shape, 10000, 10, .5, 1);\n\ntrain := DATASET([{1,[2,3,4]},{2,[1,5,7]},{8,[2,3,9]}], TrainingDat);\n//train := DATASET([{1,2},{1,3}], TrainingPair);\n\nslices := w.initWeights;\n\nSE := w.toSliceExt(slices);\n\n\n//wNew := mySGD.getWeightUpdates(SE, train, w.sliceSize, 10, 5, 100, .1);\n\nOUTPUT(slices, ALL, NAMED('OrigWeights'));\nOUTPUT(SE, ALL, NAMED('OrigWeightsExt'));\n\nsliceSize := w.sliceSize;\nOUTPUT(sliceSize, NAMED('sliceSize'));\n\n//wNew := mySGD.getWeightUpdates(SE, train, w.sliceSize, 10, 5, 100, .1);\nwNew := mySGD.Train_Dupl(train);\nwCount := COUNT(wNew[1].weights);\nOUTPUT(wCount, NAMED('OutWeightCount'));\nOUTPUT(wNew, NAMED('NewWeights'));\n\nwNew2 := mySGD.Train(train);\nOUTPUT(wNew2, NAMED('NewWeights2'));\n\ntemprec := RECORD\n  UNSIGNED sliceId;\n  SET OF REAL8 wi;\n  SET OF REAL8 wo;\nEND;\ntestrec := RECORD\n UNSIGNED wNum;\n REAL8 wi;\n REAL8 wo;\n BOOLEAN error := 0;\nEND;\n\nt1 := JOIN(slices, wNew, LEFT.sliceId = RIGHT.sliceId, TRANSFORM(temprec,\n                                            SELF.wi := LEFT.weights, SELF.wo := RIGHT.weights,\n                                            SELF := LEFT), LOCAL);\n\nt2 := NORMALIZE(t1, sliceSize, TRANSFORM(testrec, SELF.wNum := COUNTER + (LEFT.sliceId - 1) * sliceSize,\n                      SELF.wi := LEFT.wi[COUNTER], SELF.wo := LEFT.wo[COUNTER],\n                      SELF.error := (SELF.wi != SELF.wo)));\nOUTPUT(t2, ALL, NAMED('WeightsCompare'));","W20190916-185013":"/*##############################################################################\n## HPCC SYSTEMS software Copyright (C) 2019 HPCC Systems.  All rights reserved.\n############################################################################## */\nIMPORT $.^.Types;\n\nt_Vector := Types.t_Vector;\n/**\n  * Various utility functions used by TextVectors\n  */\nEXPORT svUtils := MODULE\n  /**\n    * Normalize a vector by dividing by the its length to create a unit vector\n    */ \n  EXPORT t_Vector normalizeVector(t_Vector vec) := EMBED(C++)\n    double * dVec = (double *) vec;\n    __lenResult = lenVec;\n    __isAllResult = FALSE;\n    double * result = (double *)rtlMalloc(__lenResult);\n    __result = (void *) result;\n    uint16_t vecLen = lenVec / sizeof(double);\n    uint16_t i;\n    double norm = 0.0;\n    for (i = 0; i < vecLen; i++)\n    {\n      double cell = dVec[i];\n      norm += cell * cell;\n    }\n    norm = sqrt(norm);\n    if (norm < 1e-8)\n      // Avoid scaling vectors with tiny magnitude.  Leave the values at close to zero.\n      norm = 1;\n    for (i = 0; i < vecLen; i++)\n    {\n      result[i] = dVec[i] / norm;\n    }\n  ENDEMBED;\n\n  /**\n    * Calculate a Sentence Vector by taking the average of the word vectors for all words\n    * in the sentence.\n    * @param wordvecs A concatenated set of vectors for all the words in the sentence.\n    * @param veclen The length of each word vector and the resulting sentence vector.\n    */\n  EXPORT t_Vector calcSentVector(t_Vector wordvecs, UNSIGNED2 veclen) := EMBED(C++)\n    #include <assert.h>\n    #body\n    const double * items = (double *) wordvecs;\n    assert(veclen > 0);\n    assert(lenWordvecs % (veclen * sizeof(double)) == 0);\n    uint32_t nItems = lenWordvecs / (veclen * sizeof(double));\n    __lenResult = veclen * sizeof(double);\n    __isAllResult = false;\n    uint16_t item, i;\n    uint32_t indx;\n    double norm;\n    double * result = (double *) rtlMalloc(__lenResult);\n    __result = (void *) result;\n    // Initialize result to zero\n    for (i = 0; i < veclen; i++)\n      result[i] = 0.0;\n    // Loop over the word vector items\n    for (item = 0; item < nItems; item++)\n    {\n      // Now accumulate the sum of word vectors in result\n      // Word vectors are unit vectors, so no normalization of them is needed\n      // We don't need to average them because we are going to normalize them at the\n      // end, and normalize(SUM(wordVecs)) is equivalent to normalize(AVG(wordVecs))\n      for (i = 0; i < veclen; i++)\n      {\n        indx = item * veclen + i;\n        result[i] += items[indx];\n      }\n    }\n    // Normalize the result\n    norm = 0;\n    for (i = 0; i < veclen; i++)\n    {\n      double cell = result[i];\n      norm += cell * cell;\n    }\n    norm = sqrt(norm);\n    if (norm < 1e-8)\n      // Avoid scaling vectors with tiny magnitude.  Leave the values at close to zero.\n      norm = 1;\n    for (i = 0; i < veclen; i++)\n    {\n      result[i] = result[i] / norm;\n    }\n  ENDEMBED;\n  /**\n    * Cosine similarity\n    *\n    * a and b are unit vectors.  Theta is the angle between vectors.\n    * Cosine similarity is Cos(theta).\n    *\n    * Cos(theta) = (a . b) / (L2Norm(a) * L2Norm(b))\n    *\n    * Note: a . b = L2Norm(a) * L2Norm(b) * Cos(theta)\n    * Since we assume the inputs to be unit vectors, the norms will be 1.\n    * We therefore simplify the calculation to a . b.\n    */\n  EXPORT REAL8 cosineSim(t_Vector a_in, t_Vector b_in, UNSIGNED4 veclen) := EMBED(C++)\n    #body\n    double * a = (double*)a_in;\n    double * b = (double*)b_in;\n    double adotb = 0;\n    for (uint32_t i = 0; i < veclen; i++)\n    {\n      adotb += a[i] * b[i];\n    }\n    return adotb;;\n  ENDEMBED;\n  /**\n    * Returns TRUE if a string represents a number (integer).  Otherwise FALSE.\n    */\n  EXPORT BOOLEAN isNumeric(STRING instr) := EMBED(C++)\n    #body\n    uint32_t slen = lenInstr;\n    for (uint i = 0; i < slen; i++)\n    {\n      if (!isdigit(instr[i]))\n        return false;\n    }\n    return true;\n  ENDEMBED;\n  /**\n    * Calculates the numeric distance between two numeric strings as ABS(n1 - n2).\n    */\n  EXPORT UNSIGNED4 numDistance(VARSTRING str1, VARSTRING str2) := EMBED(C++)\n    #body\n    int32_t n1, n2, dist;\n    n1 = atol(str1);\n    n2 = atol(str2);\n    dist = abs(n1 - n2);\n    return (uint32_t) dist;\n  ENDEMBED;\n  /**\n    * Implements vec1 + (vec2 * multiplier)\n    * Allows (potentially) scaled addition of vectors as well as subtraction (using a negative\n    * multiplier.\n    */\n  EXPORT t_Vector addVecs(t_Vector vec1, t_Vector vec2, UNSIGNED4 multiplier = 1) := EMBED(C++)\n    #body\n    uint32_t vecLen = lenVec1 / sizeof(double);\n    uint32_t i;\n    __lenResult = lenVec1;\n    __isAllResult = false;\n    double * result = (double *) rtlMalloc(__lenResult);\n    __result = (void *) result;\n    double * vec1N = (double *) vec1;\n    double * vec2N = (double *) vec2;\n    for (i = 0; i < vecLen; i++)\n    {\n      result[i] = vec1N[i] + (vec2N[i] * multiplier);\n    }\n  ENDEMBED;\nEND;","W20190916-184903-4":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::ksu_workshop::sample10000.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190916-184903":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~jj2::ksu_workshop::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-184829":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~ksu::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-184637":"/*##############################################################################\n## HPCC SYSTEMS software Copyright (C) 2019 HPCC Systems.  All rights reserved.\n############################################################################## */\n#option ('clusterSize', 5);\n\n/**\n  * Unit test for the Synchronous Gradient Descent (SGD) subsystem\n  */\nIMPORT $.^.Types;\nIMPORT $.^.internal AS int;\n\nSlice := Types.slice;\nSliceExt := Types.sliceExt;\nTrainingDat := Types.TrainingDat;\n\n\nshape := [10, 5, 10];\n\nw := int.Weights(shape);\n\nmySGD := int.SGD(shape, 10000, 10, .5, 1);\n\ntrain := DATASET([{1,[2,3,4]},{2,[1,5,7]},{8,[2,3,9]}], TrainingDat);\n//train := DATASET([{1,2},{1,3}], TrainingPair);\n\nslices := w.initWeights;\n\nSE := w.toSliceExt(slices);\n\n\n//wNew := mySGD.getWeightUpdates(SE, train, w.sliceSize, 10, 5, 100, .1);\n\nOUTPUT(slices, ALL, NAMED('OrigWeights'));\nOUTPUT(SE, ALL, NAMED('OrigWeightsExt'));\n\nsliceSize := w.sliceSize;\nOUTPUT(sliceSize, NAMED('sliceSize'));\n\n//wNew := mySGD.getWeightUpdates(SE, train, w.sliceSize, 10, 5, 100, .1);\nwNew := mySGD.Train_Dupl(train);\nwCount := COUNT(wNew[1].weights);\nOUTPUT(wCount, NAMED('OutWeightCount'));\nOUTPUT(wNew, NAMED('NewWeights'));\n\nwNew2 := mySGD.Train(train);\nOUTPUT(wNew2, NAMED('NewWeights2'));\n\ntemprec := RECORD\n  UNSIGNED sliceId;\n  SET OF REAL8 wi;\n  SET OF REAL8 wo;\nEND;\ntestrec := RECORD\n UNSIGNED wNum;\n REAL8 wi;\n REAL8 wo;\n BOOLEAN error := 0;\nEND;\n\nt1 := JOIN(slices, wNew, LEFT.sliceId = RIGHT.sliceId, TRANSFORM(temprec,\n                                            SELF.wi := LEFT.weights, SELF.wo := RIGHT.weights,\n                                            SELF := LEFT), LOCAL);\n\nt2 := NORMALIZE(t1, sliceSize, TRANSFORM(testrec, SELF.wNum := COUNTER + (LEFT.sliceId - 1) * sliceSize,\n                      SELF.wi := LEFT.wi[COUNTER], SELF.wo := LEFT.wo[COUNTER],\n                      SELF.error := (SELF.wi != SELF.wo)));\nOUTPUT(t2, ALL, NAMED('WeightsCompare'));","W20190916-184638":"IMPORT $.^ AS CR_SP;\r\nfemale_crimes := SORT(CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.female_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),RUBRICA);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(female_crimes, FEMALE_DATA_CRIME, RUBRICA);\r\nblack_woman := TABLE(female_crimes(COR IN CR_SP.race_types.race_negro), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(female_crimes(COR IN CR_SP.race_types.race_branco), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(result);\r\nOUTPUT(black_woman);\r\nOUTPUT(white_woman);\r\n","W20190916-184811":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-184514-2":"/*##############################################################################\n## HPCC SYSTEMS software Copyright (C) 2019 HPCC Systems.  All rights reserved.\n############################################################################## */\n#option ('clusterSize', 5);\n\n/**\n  * Unit test for the Synchronous Gradient Descent (SGD) subsystem\n  */\nIMPORT $.^.Types;\nIMPORT $.^.internal AS int;\n\nSlice := Types.slice;\nSliceExt := Types.sliceExt;\nTrainingDat := Types.TrainingDat;\n\n\nshape := [10, 5, 10];\n\nw := int.Weights(shape);\n\nmySGD := int.SGD(shape, 10000, 10, .5, 1);\n\ntrain := DATASET([{1,[2,3,4]},{2,[1,5,7]},{8,[2,3,9]}], TrainingDat);\n//train := DATASET([{1,2},{1,3}], TrainingPair);\n\nslices := w.initWeights;\n\nSE := w.toSliceExt(slices);\n\n\n//wNew := mySGD.getWeightUpdates(SE, train, w.sliceSize, 10, 5, 100, .1);\n\nOUTPUT(slices, ALL, NAMED('OrigWeights'));\nOUTPUT(SE, ALL, NAMED('OrigWeightsExt'));\n\nsliceSize := w.sliceSize;\nOUTPUT(sliceSize, NAMED('sliceSize'));\n\n//wNew := mySGD.getWeightUpdates(SE, train, w.sliceSize, 10, 5, 100, .1);\nwNew := mySGD.Train_Dupl(train);\nwCount := COUNT(wNew[1].weights);\nOUTPUT(wCount, NAMED('OutWeightCount'));\nOUTPUT(wNew, NAMED('NewWeights'));\n\nwNew2 := mySGD.Train(train);\nOUTPUT(wNew2, NAMED('NewWeights2'));\n\ntemprec := RECORD\n  UNSIGNED sliceId;\n  SET OF REAL8 wi;\n  SET OF REAL8 wo;\nEND;\ntestrec := RECORD\n UNSIGNED wNum;\n REAL8 wi;\n REAL8 wo;\n BOOLEAN error := 0;\nEND;\n\nt1 := JOIN(slices, wNew, LEFT.sliceId = RIGHT.sliceId, TRANSFORM(temprec,\n                                            SELF.wi := LEFT.weights, SELF.wo := RIGHT.weights,\n                                            SELF := LEFT), LOCAL);\n\nt2 := NORMALIZE(t1, sliceSize, TRANSFORM(testrec, SELF.wNum := COUNTER + (LEFT.sliceId - 1) * sliceSize,\n                      SELF.wi := LEFT.wi[COUNTER], SELF.wo := LEFT.wo[COUNTER],\n                      SELF.error := (SELF.wi != SELF.wo)));\nOUTPUT(t2, ALL, NAMED('WeightsCompare'));","W20190916-184514":"IMPORT $.^ AS CR_SP;\r\nfemale_crimes := SORT(CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.female_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author),RUBRICA);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(female_crimes, FEMALE_DATA_CRIME, RUBRICA);\r\nblack_woman := TABLE(female_crimes(COR IN CR_SP.race_types.race_negro), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(female_crimes(COR IN CR_SP.race_types.race_branco), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_woman, -total));\r\nOUTPUT(SORT(white_woman, -total));\r\n","W20190916-183507":"IMPORT $,STD;\r\nCITY_NAME := RECORD\r\n\t$.clean_bo.FILE.CIDADE;\r\nEND;\r\n\r\ncities := TABLE($.clean_bo.File,CITY_NAME);\r\nsimple_ct := DEDUP(SORT(cities,CIDADE),CIDADE);\r\nOUTPUT(simple_ct);\r\n","W20190916-183229":"IMPORT $,STD;\r\nall_data := SORT($.clean_bo.File,CIDADE);\r\ndeduped := DEDUP(all_data,CIDADE);\r\nOUTPUT(deduped.CIDADE);","W20190916-183809":"IMPORT $,STD;\r\nCITY_NAME := RECORD\r\n\t$.clean_bo.FILE.CIDADE;\r\nEND;\r\n\r\ncities := TABLE($.clean_bo.File,CITY_NAME);\r\nsimple_ct := DEDUP(SORT(cities,CIDADE),CIDADE);\r\nOUTPUT(simple_ct,,'erm::crimes_sp::cities');\r\n","W20190916-182929-3":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~asdf::test::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190916-182929":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::test::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::test::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-181836":"Sample10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\tstring6 depth;\n\tstring8 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\tstring5 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring22 mailing_city_state;\n\tstring24 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\tstring7 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring4 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~jj2::TestShare::sample10000.csv',Sample10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::TestShare::sample10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-181759":"#WORKUNIT('name', 'hpcc-viz-HelloWorld');\nIMPORT Visualizer;\n\n//  Create simple inline \"2D\" dataset.\nds := DATASET([ {'Hello', 20}, \n                {'World', 15}],\n                {STRING subject, INTEGER4 year});\n\n//  Output dataset giving it a \"known\" name so the visualization can locate the data\nOUTPUT(ds, NAMED('HelloWorldViz'));\n\n//  Create the visualization, giving it a uniqueID \"bubble\" and supplying the result name \"HelloWorldViz\"\nVisualizer.TwoD.Bubble('bubble', /*datasource*/, 'HelloWorldViz', /*mappings*/, /*filteredBy*/, /*dermatologyProperties*/ );","W20190916-181836-4":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~jj2::TestShare::sample10000.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190916-180534-1":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~asdf::test_aws::sample_yellow_tripdata.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190916-181202":"IMPORT $.^ AS CR_SP;\r\n\r\n\r\ncrimes := CR_SP.clean_bo.File;\r\n\r\ntotal_records := COUNT(crimes);\r\n// the use of vatima instead of vitima occurs because of the unicode generated when is used the function STD.UNI.CleanAccents\r\ntotal_records_pardo := COUNT(crimes(crimes.COR IN CR_SP.race_types.race_pardo AND crimes.DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim));\r\ntotal_records_branco := COUNT(crimes(crimes.COR IN CR_SP.race_types.race_branco AND crimes.DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim));\r\ntotal_records_negro := COUNT(crimes(crimes.COR IN CR_SP.race_types.race_negro AND crimes.DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim));\r\ntotal_records_vermelho := COUNT(crimes(crimes.COR IN CR_SP.race_types.race_vermelha AND crimes.DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim));\r\ntotal_records_amarelo := COUNT(crimes(crimes.COR IN CR_SP.race_types.race_amarelo AND crimes.DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim));\r\ntotal_records_other := COUNT(crimes(crimes.COR IN CR_SP.race_types.race_other AND crimes.DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim));\r\n\r\nOUTPUT(total_records,NAMED('REGISTER_NUMBER'));\r\nOUTPUT(COUNT(crimes(crimes.DESCR_TIPO_PESSOA='VA­TIMA')),NAMED('TOTAL_VITIMAS'));\r\nOUTPUT(total_records_pardo,NAMED('TOTALV_PARDO'));\r\nOUTPUT(total_records_branco,NAMED('TOTALV_BRANCO'));\r\nOUTPUT(total_records_negro,NAMED('TOTALV_NEGRO'));\r\nOUTPUT(total_records_vermelho,NAMED('TOTALV_VERMELHO'));\r\nOUTPUT(total_records_amarelo,NAMED('TOTALV_AMARELO'));\r\nOUTPUT(total_records_other,NAMED('TOTALV_OTHER'));\r\n\r\n\r\n// REGISTER_NUMBER\t14.712.755\r\n// TOTAL_VITIMAS\t4.956.846\r\n// TOTALV_PARDO\t\t941.521\r\n// TOTALV_BRANCO\t3.116.536\r\n// TOTALV_NEGRO\t\t163.376\r\n// TOTALV_VERMELHO\t901\r\n// TOTALV_AMARELO\t45.374\r\n// TOTALV_OTHER\t\t689.138","W20190916-180534":"SampleYellowTripdata:=RECORD\n\tunsigned1 vendorid;\n\tstring19 tpep_pickup_datetime;\n\tstring19 tpep_dropoff_datetime;\n\tunsigned1 passenger_count;\n\treal4 trip_distance;\n\tstring19 pickup_longitude;\n\tstring18 pickup_latitude;\n\tunsigned1 rate_code_id;\n\tstring1 store_and_fwd_flag;\n\tstring19 dropoff_longitude;\n\tstring18 dropoff_latitude;\n\tunsigned1 payment_type;\n\treal4 fare_amount;\n\tstring3 extra;\n\tstring3 mta_tax;\n\tstring5 tip_amount;\n\tstring5 tolls_amount;\n\tstring3 improvement_surcharge;\n\treal4 total_amount;\nEND;\nDS := DATASET('~asdf::test_aws::sample_yellow_tripdata.csv',SampleYellowTripdata,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::test_aws::sample_yellow_tripdata.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-180236":"IMPORT $.^ AS CR_SP;\r\n\r\ncrimes := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim);\r\ntotal_victims\t:= COUNT(crimes);\r\ntotalV_female := COUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender));\r\ntotalV_male := COUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender));\r\ntotalV_undefined := COUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.undefined_gender));\r\ntotalV_other := COUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.other_gender));\r\n\r\nOUTPUT(total_victims);\r\nOUTPUT(totalV_female);\r\nOUTPUT(totalV_male);\r\nOUTPUT(totalV_undefined);\r\nOUTPUT(totalV_other);\r\n\r\n// total_victims\t4956846\t\r\n// female\t\t\t2036887\t\r\n// male\t\t\t\t2876019\t\r\n// undefined\t\t43663\t\r\n// other\t\t\t277\r\n","W20190916-175715":"IMPORT $.^ AS CR_SP;\r\n//work to mount the crimes in less fields\r\nmale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.male_gender AND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim);\r\n\r\nMALE_DATA_CRIME := RECORD\r\n\tmale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(male_crimes,RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nblack_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nwhite_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_men, -total));\r\nOUTPUT(SORT(white_men, -total));","W20190916-181540":"IMPORT $,STD;\r\nall_data := SORT($.clean_bo.File,CIDADE);\r\nOUTPUT(DEDUP(all_data,CIDADE));","W20190916-174908":"IMPORT $.^ AS CR_SP;\r\n//work to mount the crimes in less fields\r\nfemale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.female_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes,RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nblack_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_woman, -total));\r\nOUTPUT(SORT(white_woman, -total));","W20190916-174807":"OpaPropertiesPublic10000:=RECORD\n\tstring2 number_of_rooms;\n\tstring assessment_date;\n\tstring25 beginning_point;\n\tstring7 book_and_page;\n\tstring3 building_code;\n\tstring25 building_code_description;\n\tunsigned1 category_code;\n\tstring13 category_code_description;\n\tstring3 census_tract;\n\tstring1 central_air;\n\tstring9 cross_reference;\n\tstring10 date_exterior_condition;\n\treal8 depth;\n\tstring9 exempt_building;\n\tstring8 exempt_land;\n\tstring1 exterior_condition;\n\tstring1 fireplaces;\n\treal8 frontage;\n\tstring1 fuel;\n\tstring1 garage_spaces;\n\tstring1 garage_type;\n\tstring1 general_construction;\n\tstring2 geographic_ward;\n\tstring5 homestead_exemption;\n\tstring2 house_extension;\n\tstring5 house_number;\n\tstring1 interior_condition;\n\tstring22 location;\n\tstring23 mailing_address_1;\n\tstring24 mailing_address_2;\n\tstring25 mailing_care_of;\n\tstring18 mailing_city_state;\n\tstring25 mailing_street;\n\tstring10 mailing_zip;\n\treal8 market_value;\n\tstring market_value_date;\n\tstring1 number_of_bathrooms;\n\tstring1 number_of_bedrooms;\n\tstring1 basements;\n\tstring1 number_stories;\n\tstring2 off_street_open;\n\tstring other_building;\n\tstring25 owner_1;\n\tstring25 owner_2;\n\tstring9 parcel_number;\n\tstring1 parcel_shape;\n\tunsigned1 quality_grade;\n\tstring10 recording_date;\n\tstring10 registry_number;\n\tstring10 sale_date;\n\treal8 sale_price;\n\tstring1 separate_utilities;\n\tstring1 sewer;\n\tstring1 site_type;\n\tunsigned2 state_code;\n\tunsigned3 street_code;\n\tstring3 street_designation;\n\tstring1 street_direction;\n\tstring12 street_name;\n\tstring1 suffix;\n\tstring8 taxable_building;\n\tstring8 taxable_land;\n\tstring1 topography;\n\treal8 total_area;\n\tstring6 total_livable_area;\n\tstring1 type_heater;\n\tstring1 unfinished;\n\tstring7 unit;\n\tstring1 utility;\n\tstring1 view_type;\n\tstring4 year_built;\n\tstring1 year_built_estimate;\n\tstring10 zip_code;\n\tstring5 zoning;\n\tunsigned5 objectid;\n\treal8 lat;\n\treal8 lng;\nEND;\nDS := DATASET('~asdf::play::opa_properties_public-10000.csv',OpaPropertiesPublic10000,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::play::opa_properties_public-10000.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-174337":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), IDADE_PESSOA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190916-174808":"IMPORT STD.DataPatterns;\nfilePath := '~asdf::play::opa_properties_public-10000.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190916-174145":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File(),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := CR_SP.population_data.File;\r\nOUTPUT(bo_records);","W20190916-173615":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\ntheft_records := all_records(RUBRICA = 'ROUBO (ART. 157)');\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\ntheft_hour_interval := SORT(PROJECT(theft_records,colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nHOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nTHEFT_HOUR_CRIME := RECORD\r\n\ttheft_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,HOUR_CRIME,HORA_OCORRENCIA_BO);\r\ntheft_hour_hotspot :=  TABLE(theft_hour_interval,THEFT_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\nOUTPUT(theft_hour_hotspot);\r\n\r\n","W20190916-173507":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\ntheft_records := all_records(RUBRICA = 'ROUBO (ART. 157)');\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\ntheft_hour_interval := SORT(PROJECT(theft_records,colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nTYPE_HOUR_CRIME := RECORD\r\n\tall_records.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\ntheft_hour_hotspot :=  TABLE(theft_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\nOUTPUT(theft_hour_hotspot);\r\n\r\n","W20190916-173423":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\ntheft_records := all_records(RUBRICA = 'ROUBO (ART. 157)');\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\ntheft_hour_interval := SORT(PROJECT(theft_records,colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nTYPE_HOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\ntheft_hour_hotspot :=  TABLE(theft_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\nOUTPUT(theft_hour_hotspot);\r\n\r\n","W20190916-172457":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\ntheft_records := all_records(RUBRICA = 'ROUBO (ART. 157)');\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\ntheft_hour_interval := SORT(PROJECT(theft_records,colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nTYPE_HOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\ntheft_hour_hotspot :=  TABLE(theft_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\nOUTPUT(theft_hour_hotspot);\r\n\r\n","W20190916-172703":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\ntheft_records := all_records(RUBRICA = 'ROUBO (ART. 157)');\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\ntheft_hour_interval := SORT(PROJECT(theft_records,colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nTYPE_HOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\ntheft_hour_hotspot :=  TABLE(theft_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\nOUTPUT(theft_hour_hotspot);\r\n\r\n","W20190916-172136":"IMPORT $.^ AS CR_SP;\r\n\r\n\r\n\r\ncrimes := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\ntotal_records := COUNT(crimes);\r\n\r\ntotal_records_pardo\t\t:=\tCOUNT(crimes(COR IN CR_SP.race_types.race_pardo));\r\ntotal_records_branco\t:=\tCOUNT(crimes(COR IN CR_SP.race_types.race_branco));\r\ntotal_records_negro\t\t:=\tCOUNT(crimes(COR IN CR_SP.race_types.race_negro));\r\ntotal_records_vermelho\t:=\tCOUNT(crimes(COR IN CR_SP.race_types.race_vermelha));\r\ntotal_records_amarelo\t:=\tCOUNT(crimes(COR IN CR_SP.race_types.race_amarelo));\r\ntotal_records_other\t\t:=\tCOUNT(crimes(COR IN CR_SP.race_types.race_other));\r\n\r\nOUTPUT(total_records,\t\t\tNAMED('REGISTER_NUMBER'));\r\nOUTPUT(total_records_pardo,\t\tNAMED('TOTALA_PARDO'));\r\nOUTPUT(total_records_branco,\tNAMED('TOTALA_BRANCO'));\r\nOUTPUT(total_records_negro,\t\tNAMED('TOTALA_NEGRO'));\r\nOUTPUT(total_records_vermelho,\tNAMED('TOTALA_VERMELHO'));\r\nOUTPUT(total_records_amarelo,\tNAMED('TOTALA_AMARELO'));\r\nOUTPUT(total_records_other,\t\tNAMED('TOTALA_OTHER'));\r\n\r\n// REGISTER_NUMBER\t\t4134114\t\r\n// TOTALA_PARDO\t\t1376298\t\r\n// TOTALA_BRANCO\t\t1196928\t\r\n// TOTALA_NEGRO\t\t412105\t\r\n// TOTALA_VERMELHO\t\t615\t\r\n// TOTALA_AMARELO\t\t4982\t\r\n// TOTALA_OTHER\t\t1143184","W20190916-171746":"IMPORT $;\r\n\r\n\r\n\r\ncrimes := $.clean_bo.File(DESCR_TIPO_PESSOA IN $.person_type.crime_author);\r\ntotal_records := COUNT(crimes);\r\n\r\ntotal_records_pardo\t\t:=\tCOUNT(crimes(COR IN $.race_types.race_pardo));\r\ntotal_records_branco\t:=\tCOUNT(crimes(COR IN $.race_types.race_branco));\r\ntotal_records_negro\t\t:=\tCOUNT(crimes(COR IN $.race_types.race_negro));\r\ntotal_records_vermelho\t:=\tCOUNT(crimes(COR IN $.race_types.race_vermelha));\r\ntotal_records_amarelo\t:=\tCOUNT(crimes(COR IN $.race_types.race_amarelo));\r\ntotal_records_other\t\t:=\tCOUNT(crimes(COR IN $.race_types.race_other));\r\n\r\nOUTPUT(total_records,\t\t\tNAMED('REGISTER_NUMBER'));\r\nOUTPUT(total_records_pardo,\t\tNAMED('TOTALA_PARDO'));\r\nOUTPUT(total_records_branco,\tNAMED('TOTALA_BRANCO'));\r\nOUTPUT(total_records_negro,\t\tNAMED('TOTALA_NEGRO'));\r\nOUTPUT(total_records_vermelho,\tNAMED('TOTALA_VERMELHO'));\r\nOUTPUT(total_records_amarelo,\tNAMED('TOTALA_AMARELO'));\r\nOUTPUT(total_records_other,\t\tNAMED('TOTALA_OTHER'));\r\n\r\n// REGISTER_NUMBER\t\t4134114\t\r\n// TOTALA_PARDO\t\t1376298\t\r\n// TOTALA_BRANCO\t\t1196928\t\r\n// TOTALA_NEGRO\t\t412105\t\r\n// TOTALA_VERMELHO\t\t615\t\r\n// TOTALA_AMARELO\t\t4982\t\r\n// TOTALA_OTHER\t\t1143184","W20190916-170730":"IMPORT $.^ AS CR_SP;\r\nmale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.male_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\n\r\nMALE_DATA_CRIME := RECORD\r\n\tmale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(male_crimes, RUBRICA), MALE_DATA_CRIME, RUBRICA);\r\nblack_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nwhite_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_men, -total));\r\nOUTPUT(SORT(white_men, -total));\r\n","W20190916-170102":"IMPORT $.^ AS CR_SP;\r\nfemale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.female_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes, RUBRICA), FEMALE_DATA_CRIME, RUBRICA);\r\nblack_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_woman, -total));\r\nOUTPUT(SORT(white_woman, -total));\r\n","W20190916-170316":"IMPORT $.^ AS CR_SP;\r\n\r\n\r\n\r\ncrimes := CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\ntotal_authors\t\t:=\tCOUNT(crimes);\r\ntotala_female\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.female_gender));\r\ntotala_male\t\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.male_gender ));\r\ntotala_undefined\t:=\tCOUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.undefined_gender));\r\ntotala_other\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN CR_SP.gender_types.other_gender));\r\n\r\nOUTPUT(total_authors);\r\nOUTPUT(totala_female);\r\nOUTPUT(totala_male);\r\nOUTPUT(totala_undefined);\r\nOUTPUT(totala_other);\r\n\r\n// total_author\t\t4134114\t\r\n// female\t\t\t214654\t\r\n// male\t\t\t\t3510925\t\r\n// undefined\t\t408479\t\r\n// other\t\t\t56\r\n","W20190916-164015":"IMPORT $,STD;\r\n// STD.File.CreateSuperFile('~erm::crimes_sp::sf::bo_clean',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20071'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20072'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20081'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20082'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20091'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20092'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20101'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20102'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20111'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20112'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20121'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20122'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20131'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20132'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20141'),\r\n\t// STD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_20142'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.AddSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190916-163429":"IMPORT $,STD;\r\n\r\ndirty2015 := DATASET( '~erm::crimes_sp::bo_2015',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\ndirty2016 := DATASET( '~erm::crimes_sp::bo_2016',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo2015.File d_info) := TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DATA_OCORRENCIA_BO := -1;\r\n\tSELF.HORA_OCORRENCIA_BO := -1;\r\n\tSELF.DESCR_TIPO_PESSOA := '';\r\n\tSELF.CONT_PESSOA := 0;\r\n\tSELF.SEXO_PESSOA := '';\r\n\tSELF.IDADE_PESSOA := -1;\r\n\tSELF.COR := '';\r\n\tSELF.DESCR_PROFISSAO := '';\r\n\tSELF.DESCR_GRAU_INSTRUCAO := '';\r\nEND;\r\n\r\nclean_2015 := PROJECT(dirty2015,dataCleaner(LEFT));\r\nclean_2016 := PROJECT(dirty2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_2015,,'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190916-164726":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author), IDADE_PESSOA);\r\n\r\nAGE_AUTHOR := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4134114\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4134018\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_AUTHOR, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190916-163352":"IMPORT $;\r\nIMPORT $,STD;\r\n\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2015'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo_clean','~hthor::erm::crimes_sp::clean::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190916-162506":"IMPORT $,STD;\r\n\r\ndirty2015 := DATASET( '~erm::crimes_sp::bo_2015',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\ndirty2016 := DATASET( '~erm::crimes_sp::bo_2016',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo2015.File d_info) := TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DATA_OCORRENCIA_BO := -1;\r\n\tSELF.HORA_OCORRENCIA_BO := -1;\r\n\tSELF.DESCR_TIPO_PESSOA := '';\r\n\tSELF.CONT_PESSOA := 0;\r\n\tSELF.SEXO_PESSOA := '';\r\n\tSELF.IDADE_PESSOA := -1;\r\n\tSELF.COR := '';\r\n\tSELF.DESCR_PROFISSAO := '';\r\n\tSELF.DESCR_GRAU_INSTRUCAO := '';\r\nEND;\r\n\r\nclean_2015 := PROJECT(dirty2015,dataCleaner(LEFT));\r\nclean_2016 := PROJECT(dirty2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_2015,,'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190916-160226":"//Step 1 : read in the raw data\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~ksu::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);\n\n//Step 2: Data Validation\nvalidSet := raw( (INTEGER) year_built > 2019 AND (INTEGER) year_built < 1900 );\nOUTPUT(validSet);","W20190916-082920":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {2,'Freddidd'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box));\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n//OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box));\n\n\n\n\n","W20190916-134202":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190916-160138":"//Read raw data from HPCC Systems cluster\n\nLayout := RECORD\n    STRING number_of_rooms;\n    STRING assessment_date;\n    STRING beginning_point;\n    STRING book_and_page;\n    STRING building_code;\n    STRING building_code_description;\n    STRING category_code;\n    STRING category_code_description;\n    STRING census_tract;\n    STRING central_air;\n    STRING cross_reference;\n    STRING date_exterior_condition;\n    STRING depth;\n    STRING exempt_building;\n    STRING exempt_land;\n    STRING exterior_condition;\n    STRING fireplaces;\n    STRING frontage;\n    STRING fuel;\n    STRING garage_spaces;\n    STRING garage_type;\n    STRING general_construction;\n    STRING geographic_ward;\n    STRING homestead_exemption;\n    STRING house_extension;\n    STRING house_number;\n    STRING interior_condition;\n    STRING location;\n    STRING mailing_address_1;\n    STRING mailing_address_2;\n    STRING mailing_care_of;\n    STRING mailing_city_state;\n    STRING mailing_street;\n    STRING mailing_zip;\n    STRING market_value;\n    STRING market_value_date;\n    STRING number_of_bathrooms;\n    STRING number_of_bedrooms;\n    STRING basements;\n    STRING number_stories;\n    STRING off_street_open;\n    STRING other_building;\n    STRING owner_1;\n    STRING owner_2;\n    STRING parcel_number;\n    STRING parcel_shape;\n    STRING quality_grade;\n    STRING recording_date;\n    STRING registry_number;\n    STRING sale_date;\n    STRING sale_price;\n    STRING separate_utilities;\n    STRING sewer;\n    STRING site_type;\n    STRING state_code;\n    STRING street_code;\n    STRING street_designation;\n    STRING street_direction;\n    STRING street_name;\n    STRING suffix;\n    STRING taxable_building;\n    STRING taxable_land;\n    STRING topography;\n    STRING total_area;\n    STRING total_livable_area;\n    STRING type_heater;\n    STRING unfinished;\n    STRING unit;\n    STRING utility;\n    STRING view_type;\n    STRING year_built;\n    STRING year_built_estimate;\n    STRING zip_code;\n    STRING zoning;\n    STRING objectid;\n    STRING lat;\n    STRING lng;\nEND;\n\nraw := DATASET('~ksu::sample10000.csv', Layout, CSV(HEADING(1)));\nOUTPUT(raw);","W20190916-082449":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {2,'Freddidd'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box));\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n//OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l.text;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box));\n\n\n\n\n","W20190916-081615":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {2,'Freddidd'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box));\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n//OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box));\n\n\n\n\n","W20190916-081435":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box));\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n//OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box));\n\n\n\n\n","W20190916-081310":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box));\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n//OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\n//data2 := AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\n//OUTPUT(data2);\n\n\n\n\n","W20190916-081348":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box));\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n//OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\n//data2 := AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\n//OUTPUT(data2);\n\n\n\n\n","W20190916-081236":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box));\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n//OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\n//data2 := AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\n//OUTPUT(data2);\n\n\n\n\n","W20190916-081155":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\n//data1 := AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box);\n//OUTPUT(data1);\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\n//data2 := AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\n//OUTPUT(data2);\n\n\n\n\n","W20190916-080741":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\n//data1 := AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box);\n//OUTPUT(data1);\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\nOUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\n//data2 := AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\n//OUTPUT(data2);\n\n\n\n\n","W20190916-080542":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\ndata1 := AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box);\nOUTPUT(data1);\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n// OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\ndata2 := AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\nOUTPUT(data2);\n\n\n\n\n","W20190916-080516":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\ndata1 = AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box);\nOUTPUT(data1);\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n// OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\ndata2 = AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\nOUTPUT(data2);\n\n\n\n\n","W20190916-080500":"inRecord := RECORD\n\tUNSIGNED box;\n\tSTRING text{MAXLENGTH(10)};\nEND;\ninTable := DATASET([{1,'Fred'},\n                    {1,'Freddy'},\n\t\t\t\t\t{2,'Freddi'},\n                    {3,'Fredrik'},\n                    {1,'FredJon'}], inRecord);\n\n//Example 1: Produce a list of box contents by concatenating a string:\noutRecord1 := RECORD\n\tUNSIGNED box;\n\tSTRING contents{MAXLENGTH(200)};\nEND;\n\noutRecord1 t1(inRecord l, outRecord1 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.contents := r.contents + IF(r.contents <> '', ',', '') + l.text;\nEND;\n\noutRecord1 t2(outRecord1 r1, outRecord1 r2) := TRANSFORM\n\tSELF.box := r1.box;\n\tSELF.contents := r1.contents + ',' + r2.contents;\nEND;\n\ndata1 := AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), t2(RIGHT1, RIGHT2), LEFT.box);\nOUTPUT(data1);\n//This example could eliminate the merge transform if the SELF.contents expression in\n//the t1 TRANSFORM were simpler, like this:\n// SELF.contents := r.contents + ',' + l.text;\n//which would make the AGGREGATE function like this:\n// OUTPUT(AGGREGATE(inTable, outRecord1, t1(LEFT, RIGHT), LEFT.box));\n\n\n//Example 2: A PIGMIX style grouping operation:\noutRecord2 := RECORD\n\tUNSIGNED box;\n\tDATASET(inRecord) items;\nEND;\n\noutRecord2 t3(inRecord l, outRecord2 r) := TRANSFORM\n\tSELF.box := l.box;\n\tSELF.items:= r.items + l;\nEND;\n\ndata2 := AGGREGATE(inTable, outRecord2, t3(LEFT, RIGHT), LEFT.box);\nOUTPUT(data2);\n\n\n\n\n","W20190914-220333":"/*\n    Example code - use without restriction.  \n*/\nLayout_Pop := RECORD\n  UNSIGNED1 CountryID;\n  STRING15  CountryName;\n  UNSIGNED4\tValue;\nEND;\n\nallPop := DATASET([ {1,'Iran',300000},\n                       {2,'Iraq',50000},\n                       {3,'Syria',100000}],Layout_Pop);\n\n// somePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\n// somePeople;\nallPop;\n","W20190914-215942":"/*\n    Example code - use without restriction.  \n*/\nLayout_Pop := RECORD\n  UNSIGNED1 CountryID;\n  STRING15  CountryName;\n  UNSIGNED4\tValue;\nEND;\n\nallPop := DATASET([ {1,'United States',300000},\n                       {2,'Canada',50000},\n                       {3,'Mexico',100000}],Layout_Pop);\n\n// somePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\n// somePeople;\nallPop;\n","W20190914-220250":"/*\n    Example code - use without restriction.  \n*/\nLayout_Pop := RECORD\n  UNSIGNED1 CountryID;\n  STRING15  CountryName;\n  UNSIGNED4\tValue;\nEND;\n\nallPop := DATASET([ {1,'Iran',300000},\n                       {2,'Iraq',50000},\n                       {3,'Syria',100000}],Layout_Pop);\n\n// somePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\n// somePeople;\nallPop;\n","W20190914-215935":"/*\n    Example code - use without restriction.  \n*/\nLayout_Pop := RECORD\n  UNSIGNED1 CountryID;\n  STRING15  CountryName;\n  UNSIGNED4\tValue;\nEND;\n\nallPop := DATASET([ {1,'United States',300000},\n                       {2,'Canada',50000},\n                       {3,'Mexico',100000}],Layout_Pop);\n\n// somePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\n// somePeople;\nallPop;\n","W20190914-215354":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190913-184423":"IMPORT $,STD;\r\n\r\ndirty2015 := DATASET( '~hthor::erm::crimes_sp::clean::bo_2015',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\ndirty2016 := DATASET( '~hthor::erm::crimes_sp::clean::bo_2016',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\n\r\n$.clean_bo.Layout dataCleaner($.unprocessed_bo2015.File d_info) := TRANSFORM\r\n\tSELF.NUM_BO := (INTEGER)d_info.NUM_BO;\r\n\tSELF.ANO_BO := (INTEGER)d_info.ANO_BO;\r\n\tSELF.ID_DELEGACIA := (INTEGER)d_info.ID_DELEGACIA;\r\n\tSELF.NOME_DEPARTAMENTO := IF(d_info.NOME_DEPARTAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO),'');\r\n\tSELF.NOME_SECCIONAL := IF(d_info.NOME_SECCIONAL != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL),'');\r\n\tSELF.DELEGACIA := IF(d_info.DELEGACIA != 'NULL',STD.Str.ToUpperCase(d_info.DELEGACIA),'');\r\n\tSELF.NOME_DEPARTAMENTO_CIRC := IF(d_info.NOME_DEPARTAMENTO_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DEPARTAMENTO_CIRC),'');\r\n\tSELF.NOME_SECCIONAL_CIRC := IF(d_info.NOME_SECCIONAL_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_SECCIONAL_CIRC),'');\r\n\tSELF.NOME_DELEGACIA_CIRC := IF(d_info.NOME_DELEGACIA_CIRC != 'NULL',STD.Str.ToUpperCase(d_info.NOME_DELEGACIA_CIRC),'');\r\n\tSELF.ANO := IF(d_info.ANO != 'NULL',(INTEGER)d_info.ANO,0);\r\n\tSELF.MES := IF(d_info.MES != 'NULL',(INTEGER)d_info.MES,0);\r\n\tSELF.FLAG_STATUS := IF(d_info.FLAG_STATUS != 'NULL',STD.Str.ToUpperCase(d_info.FLAG_STATUS),'');\r\n\tSELF.RUBRICA := IF(d_info.RUBRICA != 'NULL',STD.Str.ToUpperCase(d_info.RUBRICA),'');\r\n\tSELF.DESDOBRAMENTO := IF(d_info.DESDOBRAMENTO != 'NULL',STD.Str.ToUpperCase(d_info.DESDOBRAMENTO),'');\r\n\tSELF.CONDUTA := IF(d_info.CONDUTA != 'NULL',STD.Str.ToUpperCase(d_info.CONDUTA),'');\r\n\tSELF.LATITUDE := (DECIMAL)d_info.LATITUDE;\r\n\tSELF.LONGITUDE := (DECIMAL)d_info.LONGITUDE;\r\n\tSELF.CIDADE := IF(d_info.CIDADE != 'NULL',STD.Str.ToUpperCase(d_info.CIDADE),'');\r\n\tSELF.LOGRADOURO := IF(d_info.LOGRADOURO != 'NULL',STD.Str.ToUpperCase(d_info.LOGRADOURO),'');\r\n\tSELF.NUMERO_LOGRADOURO := IF(d_info.NUMERO_LOGRADOURO != 'Informação restrita (art. 31 da LAI)',(INTEGER)d_info.NUMERO_LOGRADOURO,0);\r\n\tSELF.DATA_OCORRENCIA_BO := -1;\r\n\tSELF.HORA_OCORRENCIA_BO := -1;\r\n\tSELF.DESCR_TIPO_PESSOA := '';\r\n\tSELF.CONT_PESSOA := 0;\r\n\tSELF.SEXO_PESSOA := '';\r\n\tSELF.IDADE_PESSOA := -1;\r\n\tSELF.COR := '';\r\n\tSELF.DESCR_PROFISSAO := '';\r\n\tSELF.DESCR_GRAU_INSTRUCAO := '';\r\nEND;\r\n\r\nclean_2015 := PROJECT(dirty2015,dataCleaner(LEFT));\r\nclean_2016 := PROJECT(dirty2016,dataCleaner(LEFT));\r\n\r\nOUTPUT(clean_2015,,'erm::crimes_sp::clean::bo_2015',OVERWRITE);\r\nOUTPUT(clean_2016,,'erm::crimes_sp::clean::bo_2016',OVERWRITE);","W20190913-174356":"IMPORT $;\r\n\r\ndirty2015 := DATASET( '~erm::crimes_sp::bo_2015',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\ndirty2016 := DATASET( '~erm::crimes_sp::bo_2016',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\nOUTPUT(dirty2015);\r\nOUTPUT(dirty2016);","W20190913-173819":"IMPORT $;\r\n\r\ndirty2015 := DATASET( '~erm::crimes_sp::bo_2015',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\nOUTPUT(dirty2015);","W20190913-173751":"IMPORT $;\r\n\r\ndirty2015 := DATASET( '~erm::crimes_sp::bo_20015',$.unprocessed_bo2015.Layout,CSV(HEADING(1)));\r\nOUTPUT(dirty2015);","W20190913-173609":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190913-173613":"IMPORT $;\r\nIMPORT $,STD;\r\nSTD.File.CreateSuperFile('~erm::crimes_sp::sf::bo',allowExist :=1 );\r\nSEQUENTIAL(\r\n\tSTD.File.StartSuperFileTransaction(),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2015'),\r\n\tSTD.File.RemoveSuperFile('~erm::crimes_sp::sf::bo','~erm::crimes_sp::bo_2016'),\r\n\tSTD.File.FinishSuperFileTransaction()\r\n);\r\n","W20190913-173226":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~mreis::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~mreis::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190914-162034":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190913-165744":"IMPORT $.^ AS CR_SP;\r\n\r\n//here have records from the same crime but from diferent persons\r\nbo_records := SORT(CR_SP.clean_bo.File(),CIDADE);\r\n//informations of the number of persons in each city\r\n//used to make the balance of proportion of crimes.\r\ncities_population := CR_SP.population_data.File;\r\nOUTPUT(bo_records);","W20190913-162540":"IMPORT $,STD;\r\n\r\nfileName := '~erm::crimes_sp::population_sp';\r\npureData := DATASET(fileName,$.population_data.Layout,CSV(HEADING(0)));\r\n\r\n$.population_data.Layout cityToUpper(pureData info) := TRANSFORM\r\n    SELF.CITY_NAME := STD.STR.ToUpperCase(info.CITY_NAME);\r\n    SELF := info;\r\nEND;\r\n\r\ncities_population := PROJECT(pureData,cityToUpper(LEFT));\r\nOUTPUT(cities_population,,'erm::crimes_sp::clean::population_data',OVERWRITE);","W20190913-154946-5":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~asdf::test::test_ny.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190913-154932":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190913-154946":"TestNy:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::test::test_ny.csv',TestNy,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::test::test_ny.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-154914":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190913-154908":"/*\n    Example code - use without restriction.  \n*/\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n","W20190913-154848":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-152752":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File(RUBRICA = 'ROUBO (ART. 157)');\r\n\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nTYPE_HOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\n\r\n","W20190913-151314":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\n\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nTYPE_HOUR_CRIME := RECORD\r\n\trecords_hour_interval.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\n\r\n","W20190913-142251":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-142226":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-142208":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~arjunachala::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~arjunachala::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-142142":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-142113":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-141620":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-141740":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-141608":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-141424":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-141541":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-141354":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-141138":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-141330":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-141126-4":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-140945":"IMPORT std;\nIMPORT DataPatterns;\nIMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Profiling\nTaxi_Weather_profile:= DataPatterns.Profile(raw);\nOUTPUT(Taxi_Weather_profile);\n","W20190913-141126":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~asdf::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~asdf::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-140907":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-140802":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-140756":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj3::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj3::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-140717":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-140709":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-140702":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~arjunachala::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~arjunachala::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-140701":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-140628":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj3::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj3::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-140212":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-135700":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190913-132359":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-132334":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190913-132328":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-211946":"IMPORT ML_Core;\nIMPORT ML_Core.Types;\nIMPORT NYTaxiTrip.D_Data_Enhancement;\nIMPORT LinearRegression AS LROLS;\n\n//Reading enhanced data\nenhancedData := D_Data_Enhancement.enhancedData;\nOUTPUT(enhancedData, NAMED('enhancedData'));\n\n//Transform to Machine Learning Dataframe, such as NumericField\nML_Core.ToField(enhancedData, trainset);\nOUTPUT(trainset, NAMED('trainset'));\n\n// split into input (X) and output (Y) variables\nX := trainset(number < 4);\nY := trainset(number = 4);\nOUTPUT(X, NAMED('X'));\nOUTPUT(Y, NAMED('Y'));\n       \n//Training LinearRegression Model\nlr := LROLS.OLS(X, Y);\n\n//Prediction\npredict := lr.predict(X);\nOUTPUT(predict, NAMED('predict'));\n","W20190912-211936":"IMPORT NYTaxiTrip.A_Data_Ingestion;\n\n//Reading Taxi_Weather Data\nraw := A_Data_Ingestion.raw;\n\n//Data Validation\nvalidSet := raw( (INTEGER) date < 20000101 AND (INTEGER) date > 20190501 );\nOUTPUT(validSet);\n","W20190912-211924":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-211910":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj2::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj2::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-210908":"IMPORT STD;\nIMPORT DataPatterns;\nfilePath := '~lily::ksu_workshop::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190912-210906":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-210804":"IMPORT STD.DataPatterns;\nfilePath := '~lily::ksu_workshop::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190912-210453":"IMPORT STD.DataPatterns;\nfilePath := '~lily::ksu_workshop::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190912-210330":"IMPORT STD.DataPatterns;\nfilePath := '~lily::ksu_workshop::NY_SampleInput.csv';\nds := DATASET(filePath, RECORDOF(filePath, LOOKUP), csv);\nprofileResults := DataPatterns.Profile(ds,,,,'best_ecl_types',5);\nOUTPUT(profileResults, ALL, NAMED('profileResults'));","W20190912-205941":"VARSTRING MyStr := DATASET('~file::play.hpccsystems.com::var::lib::^h^p^c^c^systems::mydropzone::mytext.txt',{STRING key},FLAT)[1].key;\nMyStr;\n","W20190912-205553":"VARSTRING MyStr := DATASET('~file::play.hpccsystems.com::var::lib::^h^p^c^c^systems::mydropzone::accounts',{STRING key},FLAT)[1].key;\nMyStr;\n","W20190912-194844":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\n\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nTYPE_HOUR_CRIME := RECORD\r\n\tall_records.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\n\r\n","W20190912-205509":"VARSTRING MyStr := DATASET('~file::play.hpccsys.com::var::lib::^h^p^c^c^systems::mydropzone::accounts',{STRING key},FLAT)[1].key;\nMyStr;\n","W20190912-194617":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\n\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := SORT(PROJECT(all_records, colectHourInterval(LEFT)),HORA_OCORRENCIA_BO);\r\n//after this is made a group of hours.\r\n\r\nOUTPUT(records_hour_interval);\r\nTYPE_HOUR_CRIME := RECORD\r\n\tall_records.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(records_hour_interval,TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\n\r\n","W20190912-194300":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\n\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := PROJECT(all_records, colectHourInterval(LEFT));\r\n//after this is made a group of hours.\r\n\r\nOUTPUT(records_hour_interval);\r\nTYPE_HOUR_CRIME := RECORD\r\n\tall_records.HORA_OCORRENCIA_BO;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nhour_hotspot := TABLE(SORT(records_hour_interval, HORA_OCORRENCIA_BO),TYPE_HOUR_CRIME,HORA_OCORRENCIA_BO);\r\nOUTPUT(hour_hotspot);\r\n\r\n","W20190912-193331":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\n\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := PROJECT(all_records, colectHourInterval(LEFT));\r\n\r\nOUTPUT(records_hour_interval);\r\n// TYPE_HOUR_CRIME := RECORD\r\n// \tall_records.HORA_OCORRENCIA_BO;\r\n// \ttotal := COUNT(GROUP);\r\n// END;\r\n\r\n","W20190912-193136":"IMPORT $.^ AS CR_SP;\r\n\r\n//some records are related to the same crime, but is related to different person\r\nall_records := CR_SP.clean_bo.File;\r\n\r\n//first chance the hour to the hour interval of each record\r\nCR_SP.clean_bo.Layout colectHourInterval(CR_SP.clean_bo.File info) := TRANSFORM\r\n\tSELF.HORA_OCORRENCIA_BO := IF(info.HORA_OCORRENCIA_BO <=-1, -1, CR_SP.fGetHourInterval(info.HORA_OCORRENCIA_BO));\r\n\tSELF := info;\r\nEND;\r\nrecords_hour_interval := PROJECT(all_records, colectHourInterval(LEFT));\r\n\r\nOUTPUT(records_hour_interval);\r\n// TYPE_HOUR_CRIME := RECORD\r\n// \tall_records.HORA_OCORRENCIA_BO;\r\n// \ttotal := COUNT(GROUP);\r\n// END;\r\n\r\n","W20190912-190420":"IMPORT $;\r\nOUTPUT($.clean_bo.File);","W20190912-185103":"IMPORT $.^ AS CR_SP;\r\nmale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.male_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\n\r\nMALE_DATA_CRIME := RECORD\r\n\tmale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(male_crimes, RUBRICA), MALE_DATA_CRIME, RUBRICA);\r\nblack_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nwhite_men := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_men, -total));\r\nOUTPUT(SORT(white_men, -total));\r\n","W20190912-183614":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-184210":"IMPORT $.^ AS CR_SP;\r\nfemale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.female_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes, RUBRICA), FEMALE_DATA_CRIME, RUBRICA);\r\nblack_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_woman, -total));\r\nOUTPUT(SORT(white_woman, -total));\r\n","W20190912-184449":"IMPORT $.^ AS CR_SP;\r\nmale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.male_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author);\r\n\r\nMALE_DATA_CRIME := RECORD\r\n\tmale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(male_crimes, RUBRICA), MALE_DATA_CRIME, RUBRICA);\r\nblack_woman := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(SORT(male_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_woman, -total));\r\nOUTPUT(SORT(white_woman, -total));\r\n","W20190912-183248":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-183140":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lilyclemson::ksu2::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lilyclemson::ksu2::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-182751":"IMPORT $.^ AS CR_SP;\r\nfemale_crimes := CR_SP.clean_bo.File(SEXO_PESSOA IN CR_SP.gender_types.female_gender\r\nAND DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes, RUBRICA), FEMALE_DATA_CRIME, RUBRICA);\r\nblack_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_negro),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(SORT(female_crimes(COR IN CR_SP.race_types.race_branco),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_woman, -total));\r\nOUTPUT(SORT(white_woman, -total));\r\n","W20190912-180359":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~jj3::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~jj3::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-180335":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_author), IDADE_PESSOA);\r\n\r\nAGE_AUTHOR := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_AUTHOR, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190912-174216":"IMPORT $.^ AS CR_SP;\r\ncrimes := SORT(CR_SP.clean_bo.File(DESCR_TIPO_PESSOA IN CR_SP.person_type.crime_victim), IDADE_PESSOA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4134114\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4134018\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190912-172635":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu2::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu2::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-172536":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu2::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu2::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-172619":"NySampleinput:=RECORD\n\tunsigned4 date;\n\tstring11 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu2::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu2::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-171707":"IMPORT $;\r\n//work to mount the crimes in less fields\r\nmale_crimes := $.clean_bo.File(SEXO_PESSOA IN $.gender_types.male_gender AND DESCR_TIPO_PESSOA IN $.person_type.crime_victim);\r\n\r\nMALE_DATA_CRIME := RECORD\r\n\tmale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(male_crimes,RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nblack_men := TABLE(SORT(male_crimes(COR IN $.race_types.race_negro),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nwhite_men := TABLE(SORT(male_crimes(COR IN $.race_types.race_branco),RUBRICA), MALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_men, -total));\r\nOUTPUT(SORT(white_men, -total));","W20190912-172418":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-165341":"IMPORT $;\r\n//work to mount the crimes in less fields\r\nfemale_crimes := $.clean_bo.File(SEXO_PESSOA IN $.gender_types.female_gender AND DESCR_TIPO_PESSOA IN $.person_type.crime_victim);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes,RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nblack_woman := TABLE(SORT(female_crimes(COR IN $.race_types.race_negro),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nwhite_woman := TABLE(SORT(female_crimes(COR IN $.race_types.race_branco),RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));\r\nOUTPUT(SORT(black_woman, -total));\r\nOUTPUT(SORT(white_woman, -total));","W20190912-172343":"NySampleinput:=RECORD\n\tunsigned4 date;\n\treal8 precipintensity;\n\tunsigned3 trip_counts;\nEND;\nDS := DATASET('~lily::ksu_workshop::NY_SampleInput.csv',NySampleinput,CSV(HEADING(1)));\nOUTPUT(DS,,'~lily::ksu_workshop::NY_SampleInput.csv_thor',CLUSTER('mythor'),OVERWRITE);","W20190912-164200":"IMPORT $;\r\n\r\nfemale_crimes := $.clean_bo.File(SEXO_PESSOA IN $.gender_types.female_gender AND DESCR_TIPO_PESSOA IN $.person_type.crime_author);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes,RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));","W20190912-163946":"IMPORT $;\r\n\r\nfemale_crimes := $.clean_bo.File(SEXO_PESSOA IN $.gender_types.female_gender AND DESCR_TIPO_PESSOA IN $.person_type.crime_author);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes,RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(result);","W20190911-212026":"IMPORT $;\r\ncrime_author := ['INDICIADO', 'AUTOR'];\r\ncrimes := SORT($.clean_bo.File(DESCR_TIPO_PESSOA IN crime_author), IDADE_PESSOA);\r\n\r\nAGE_VICTIM := RECORD\r\n\tcrimes.IDADE_PESSOA;\r\n\ttotal_victims := COUNT(GROUP);\r\nEND;\r\n\r\nOUTPUT(COUNT(crimes));\r\n//4956846\r\nOUTPUT(COUNT(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99)));\r\n//4956549\r\nage_info := TABLE(crimes(IDADE_PESSOA >=0 AND IDADE_PESSOA <= 99), AGE_VICTIM, IDADE_PESSOA);\r\nOUTPUT(age_info);\r\n","W20190911-211509":"IMPORT $;\r\n\r\n//modularize this information\r\nfemale_gender\t\t:=\t['F'];\r\nmale_gender\t\t\t:=\t['M'];\r\nundefined_gender\t:=\t['I'];\r\nother_gender\t\t:=\t['','1']; //Those genger isn't specified in the database\r\n//=============================\r\ncrime_author := ['INDICIADO', 'AUTOR'];\r\n\r\ncrimes := $.clean_bo.File(DESCR_TIPO_PESSOA IN crime_author);\r\ntotal_authors\t\t:=\tCOUNT(crimes);\r\ntotala_female\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN female_gender));\r\ntotala_male\t\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN male_gender ));\r\ntotala_undefined\t:=\tCOUNT(crimes(SEXO_PESSOA IN undefined_gender));\r\ntotala_other\t\t:=\tCOUNT(crimes(SEXO_PESSOA IN other_gender));\r\n\r\nOUTPUT(total_authors);\r\nOUTPUT(totala_female);\r\nOUTPUT(totala_male);\r\nOUTPUT(totala_undefined);\r\nOUTPUT(totala_other);\r\n\r\n// total_victims\t4956846\t\r\n// female\t\t\t2036887\t\r\n// male\t\t\t\t2876019\t\r\n// undefined\t\t43663\t\r\n// other\t\t\t277\r\n","W20190912-164757":"IMPORT $;\r\n//work to mount the crimes in less fields\r\nfemale_crimes := $.clean_bo.File(SEXO_PESSOA IN $.gender_types.female_gender AND DESCR_TIPO_PESSOA IN $.person_type.crime_victim);\r\n\r\nFEMALE_DATA_CRIME := RECORD\r\n\tfemale_crimes.RUBRICA;\r\n\ttotal := COUNT(GROUP);\r\nEND;\r\n\r\nresult := TABLE(SORT(female_crimes,RUBRICA), FEMALE_DATA_CRIME,RUBRICA);\r\nOUTPUT(SORT(result, -total));"};